---
- name: Create system kube-cert groups
  group: name={{ kube_cert_group }} state=present system=yes

- name: Create system kube user
  user:
    name=kube
    comment="Kubernetes user"
    shell=/sbin/nologin
    state=present
    system=yes
    groups={{ kube_cert_group }}

- name: make sure the certificate directory exits
  file:
    path={{ kube_cert_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- name: make sure the tokens directory exits
  file:
    path={{ kube_token_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- include: gen_certs.yml
  when: inventory_hostname == groups['masters'][0]

- name: Archive certificates
  shell: tar -czf /tmp/certs.tar.gz .
  args:
    chdir: "{{ kube_cert_dir }}"
  delegate_to: "{{ groups['masters'][0] }}"

- name: Fetch certificates
  fetch: src=/tmp/certs.tar.gz dest=/tmp/certs.tar.gz flat=yes
  delegate_to: "{{ groups['masters'][0] }}"

- name: Place certs everywhere
  unarchive: src=/tmp/certs.tar.gz dest="{{ kube_cert_dir }}"
  when: inventory_hostname in groups['masters']

- name: Read back the CA certificate
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy: content="{{ kube_ca_cert }}" dest="{{ kube_cert_dir }}/ca.crt"

- name: Read back the kubecfg key
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.key"
  register: api_key
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the cfg key as a fact so it can be used later
  set_fact:
    kube_api_key: "{{ api_key.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy: content="{{ kube_api_key }}" dest="{{ kube_cert_dir }}/kubecfg.key"

- name: Read back the kubecfg cert
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.crt"
  register: api_crt
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the cfg cert as a fact so it can be used later
  set_fact:
    kube_api_crt: "{{ api_crt.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy: content="{{ kube_api_crt }}" dest="{{ kube_cert_dir }}/kubecfg.crt"
  notify:
    - restart daemons

- name: Copy the token gen script
  copy:
    src=kube-gen-token.sh
    dest={{ kube_script_dir }}
    mode=u+x

- include: gen_tokens.yml
  when: inventory_hostname == groups['masters'][0]

- name: Archive tokens
  shell: tar -czf /tmp/known_tokens.tar.gz .
  args:
    chdir: "{{ kube_token_dir }}"
  delegate_to: "{{ groups['masters'][0] }}"

- name: Fetch tokens
  fetch: src=/tmp/known_tokens.tar.gz dest=/tmp/known_tokens.tar.gz flat=yes
  delegate_to: "{{ groups['masters'][0] }}"

- name: Place tokens everywhere
  unarchive: src=/tmp/known_tokens.tar.gz dest="{{ kube_token_dir }}"
  when: inventory_hostname in groups['masters']
