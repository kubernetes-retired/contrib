---
- name: Create kubernetes script directory
  file: path={{ kube_script_dir }} state=directory

- name: Create system kube-cert groups
  group: name={{ kube_cert_group }} state=present system=yes

- name: Create system kube user
  user:
    name=kube
    comment="Kubernetes user"
    shell=/sbin/nologin
    state=present
    system=yes
    groups={{ kube_cert_group }}

- name: make sure the certificate directory exits
  file:
    path={{ kube_cert_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- name: make sure the tokens directory exits
  file:
    path={{ kube_token_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}

- name: Fix Ansible not setting default var in hostvars array
  set_fact:
    kube_cert_ip: "{{ kube_cert_ip }}"

- include: gen_certs.yml
  when: inventory_hostname == groups['masters'][0]

- name: Read back the CA certificate
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy:
    content: "{{ kube_ca_cert }}"
    dest: "{{ kube_cert_dir }}/ca.crt"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440

- name: Read back the kubecfg key
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.key"
  register: api_key
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the cfg key as a fact so it can be used later
  set_fact:
    kube_api_key: "{{ api_key.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy:
    content: "{{ kube_api_key }}"
    dest: "{{ kube_cert_dir }}/kubecfg.key"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440

- name: Read back the kubecfg cert
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.crt"
  register: api_crt
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Register the cfg cert as a fact so it can be used later
  set_fact:
    kube_api_crt: "{{ api_crt.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy:
    content: "{{ kube_api_crt }}"
    dest: "{{ kube_cert_dir }}/kubecfg.crt"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440
  notify:
    - restart daemons

- include: gen_tokens.yml
  when: inventory_hostname == groups['masters'][0]
  tags:
    - secrets
    - configure

- name: Slurp known_tokens.csv from first master
  slurp:
    src: "{{ kube_token_dir }}/known_tokens.csv"
  register: known_tokens
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  tags:
    - secrets
    - configure

- name: Copy known_tokens.csv to other masters
  copy:
    content: "{{ known_tokens.content|b64decode }}"
    dest: "{{ kube_token_dir }}/known_tokens.csv"
  when: inventory_hostname in groups['masters'] and inventory_hostname != groups['masters'][0]
  notify:
    - restart daemons
  tags:
    - secrets
    - configure

- name: Copy token files to other masters
  copy:
    content: "{{ item.stdout }}"
    dest: "{{ kube_token_dir }}/{{ item.cmd[1] }}.token"
  when: inventory_hostname in groups['masters'] and inventory_hostname != groups['masters'][0]
  with_items:
    - "{{ gentoken_master.results }}"
    - "{{ gentoken_node.results }}"
  notify:
    - restart daemons
  tags:
    - secrets
    - configure
