events {}
http {

    log_format compression '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    gzip on;
    access_log /var/log/nginx-access.log compression;
    error_log /var/log/nginx-error.log warn;

    server {
        listen 80;
        root /siteroot;
        location /fs {
        }
        location /files {
            root /fs;
        }
        location /images {
            root /fs;
        }
        location /hostname {
            content_by_lua '
                fh = io.popen("hostname")
                name = fh:read("*a")
                fh:close()
                ngx.say(name)
            ';
        }
        location /stress {
            content_by_lua '
                local cpu = ngx.var.arg_cpu or "1"
                local w = ngx.var.arg_w or "1"
                local bytes = ngx.var.arg_bytes or "100M"
                local timeout = ngx.var.arg_timeout or "1"
                local topIterations = 3
                local topInterval = timeout/topIterations

                stressCmd = string.format("stress --cpu "..cpu.." --vm "..w.." --vm-bytes "..bytes.." --timeout "..timeout.."s")
                fh = io.popen(stressCmd, "r")

                topFh = io.popen("top -n "..topIterations.." -d "..topInterval.." -b", "r")
                topOutput = topFh:read("*a")
                stressOutput = fh:read("*a")
                topFh:close()
                fh:close()

                ngx.say("STRESS")
                ngx.say("======")
                ngx.say(stressCmd)
                ngx.say(stressOutput)
                ngx.say("PROFILE")
                ngx.say("=======")
                ngx.say(topOutput)
           ';
        }
        location /test {
            content_by_lua '
                local foo = ngx.var.arg_foo or "defaultfoo"
                ngx.say(foo)
            ';
        }
        location /echo {
            content_by_lua '
                ngx.say("HTTP Headers:")
                for key, value in pairs(ngx.req.get_headers()) do
                        ngx.say(key..": "..value)
                end
            ';
        }
    }
}
