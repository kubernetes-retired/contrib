/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [23]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(23)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym127 := z.DecBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct128 := r.ContainerType()
		if yyct128 == codecSelferValueTypeMap1234 {
			yyl128 := r.ReadMapStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl128, d)
			}
		} else if yyct128 == codecSelferValueTypeArray1234 {
			yyl128 := r.ReadArrayStart()
			if yyl128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys129Slc
	var yyhl129 bool = l >= 0
	for yyj129 := 0; ; yyj129++ {
		if yyhl129 {
			if yyj129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys129Slc = r.DecodeBytes(yys129Slc, true, true)
		yys129 := string(yys129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys129 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys129)
		} // end switch yys129
	} // end for yyj129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym177 := z.EncBinary()
		_ = yym177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep178 := !z.EncBinary()
			yy2arr178 := z.EncBasicHandle().StructToArray
			var yyq178 [22]bool
			_, _, _ = yysep178, yyq178, yy2arr178
			const yyr178 bool = false
			yyq178[0] = x.HostPath != nil
			yyq178[1] = x.EmptyDir != nil
			yyq178[2] = x.GCEPersistentDisk != nil
			yyq178[3] = x.AWSElasticBlockStore != nil
			yyq178[4] = x.GitRepo != nil
			yyq178[5] = x.Secret != nil
			yyq178[6] = x.NFS != nil
			yyq178[7] = x.ISCSI != nil
			yyq178[8] = x.Glusterfs != nil
			yyq178[9] = x.PersistentVolumeClaim != nil
			yyq178[10] = x.RBD != nil
			yyq178[11] = x.FlexVolume != nil
			yyq178[12] = x.Cinder != nil
			yyq178[13] = x.CephFS != nil
			yyq178[14] = x.Flocker != nil
			yyq178[15] = x.DownwardAPI != nil
			yyq178[16] = x.FC != nil
			yyq178[17] = x.AzureFile != nil
			yyq178[18] = x.ConfigMap != nil
			yyq178[19] = x.VsphereVolume != nil
			yyq178[20] = x.Quobyte != nil
			yyq178[21] = x.AzureDisk != nil
			var yynn178 int
			if yyr178 || yy2arr178 {
				r.EncodeArrayStart(22)
			} else {
				yynn178 = 0
				for _, b := range yyq178 {
					if b {
						yynn178++
					}
				}
				r.EncodeMapStart(yynn178)
				yynn178 = 0
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq178[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq178[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr178 || yy2arr178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym201 := z.DecBinary()
	_ = yym201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct202 := r.ContainerType()
		if yyct202 == codecSelferValueTypeMap1234 {
			yyl202 := r.ReadMapStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl202, d)
			}
		} else if yyct202 == codecSelferValueTypeArray1234 {
			yyl202 := r.ReadArrayStart()
			if yyl202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys203Slc
	var yyhl203 bool = l >= 0
	for yyj203 := 0; ; yyj203++ {
		if yyhl203 {
			if yyj203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys203Slc = r.DecodeBytes(yys203Slc, true, true)
		yys203 := string(yys203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys203 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys203)
		} // end switch yys203
	} // end for yyj203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj226 int
	var yyb226 bool
	var yyhl226 bool = l >= 0
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj226++
	if yyhl226 {
		yyb226 = yyj226 > l
	} else {
		yyb226 = r.CheckBreak()
	}
	if yyb226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj226++
		if yyhl226 {
			yyb226 = yyj226 > l
		} else {
			yyb226 = r.CheckBreak()
		}
		if yyb226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [2]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[1] = x.ReadOnly != false
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(2)
			} else {
				yynn250 = 1
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym252 := z.EncBinary()
				_ = yym252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym253 := z.EncBinary()
				_ = yym253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym257 := z.DecBinary()
	_ = yym257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct258 := r.ContainerType()
		if yyct258 == codecSelferValueTypeMap1234 {
			yyl258 := r.ReadMapStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl258, d)
			}
		} else if yyct258 == codecSelferValueTypeArray1234 {
			yyl258 := r.ReadArrayStart()
			if yyl258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys259Slc
	var yyhl259 bool = l >= 0
	for yyj259 := 0; ; yyj259++ {
		if yyhl259 {
			if yyj259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys259Slc = r.DecodeBytes(yys259Slc, true, true)
		yys259 := string(yys259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys259 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys259)
		} // end switch yys259
	} // end for yyj259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj262 int
	var yyb262 bool
	var yyhl262 bool = l >= 0
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj262++
	if yyhl262 {
		yyb262 = yyj262 > l
	} else {
		yyb262 = r.CheckBreak()
	}
	if yyb262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj262++
		if yyhl262 {
			yyb262 = yyj262 > l
		} else {
			yyb262 = r.CheckBreak()
		}
		if yyb262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym265 := z.EncBinary()
		_ = yym265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep266 := !z.EncBinary()
			yy2arr266 := z.EncBasicHandle().StructToArray
			var yyq266 [16]bool
			_, _, _ = yysep266, yyq266, yy2arr266
			const yyr266 bool = false
			yyq266[0] = x.GCEPersistentDisk != nil
			yyq266[1] = x.AWSElasticBlockStore != nil
			yyq266[2] = x.HostPath != nil
			yyq266[3] = x.Glusterfs != nil
			yyq266[4] = x.NFS != nil
			yyq266[5] = x.RBD != nil
			yyq266[6] = x.ISCSI != nil
			yyq266[7] = x.Cinder != nil
			yyq266[8] = x.CephFS != nil
			yyq266[9] = x.FC != nil
			yyq266[10] = x.Flocker != nil
			yyq266[11] = x.FlexVolume != nil
			yyq266[12] = x.AzureFile != nil
			yyq266[13] = x.VsphereVolume != nil
			yyq266[14] = x.Quobyte != nil
			yyq266[15] = x.AzureDisk != nil
			var yynn266 int
			if yyr266 || yy2arr266 {
				r.EncodeArrayStart(16)
			} else {
				yynn266 = 0
				for _, b := range yyq266 {
					if b {
						yynn266++
					}
				}
				r.EncodeMapStart(yynn266)
				yynn266 = 0
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq266[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq266[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr266 || yy2arr266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym283 := z.DecBinary()
	_ = yym283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct284 := r.ContainerType()
		if yyct284 == codecSelferValueTypeMap1234 {
			yyl284 := r.ReadMapStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl284, d)
			}
		} else if yyct284 == codecSelferValueTypeArray1234 {
			yyl284 := r.ReadArrayStart()
			if yyl284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys285Slc
	var yyhl285 bool = l >= 0
	for yyj285 := 0; ; yyj285++ {
		if yyhl285 {
			if yyj285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys285Slc = r.DecodeBytes(yys285Slc, true, true)
		yys285 := string(yys285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys285 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys285)
		} // end switch yys285
	} // end for yyj285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym319 := z.EncBinary()
		_ = yym319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep320 := !z.EncBinary()
			yy2arr320 := z.EncBasicHandle().StructToArray
			var yyq320 [5]bool
			_, _, _ = yysep320, yyq320, yy2arr320
			const yyr320 bool = false
			yyq320[0] = x.Kind != ""
			yyq320[1] = x.APIVersion != ""
			yyq320[2] = true
			yyq320[3] = true
			yyq320[4] = true
			var yynn320 int
			if yyr320 || yy2arr320 {
				r.EncodeArrayStart(5)
			} else {
				yynn320 = 0
				for _, b := range yyq320 {
					if b {
						yynn320++
					}
				}
				r.EncodeMapStart(yynn320)
				yynn320 = 0
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[0] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[1] {
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[2] {
					yy328 := &x.ObjectMeta
					yy328.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy329 := &x.ObjectMeta
					yy329.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[3] {
					yy331 := &x.Spec
					yy331.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy332 := &x.Spec
					yy332.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq320[4] {
					yy334 := &x.Status
					yy334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq320[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy335 := &x.Status
					yy335.CodecEncodeSelf(e)
				}
			}
			if yyr320 || yy2arr320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct337 := r.ContainerType()
		if yyct337 == codecSelferValueTypeMap1234 {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if yyct337 == codecSelferValueTypeArray1234 {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv341 := &x.ObjectMeta
				yyv341.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv342 := &x.Spec
				yyv342.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv343 := &x.Status
				yyv343.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj344 int
	var yyb344 bool
	var yyhl344 bool = l >= 0
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv347 := &x.ObjectMeta
		yyv347.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv348 := &x.Spec
		yyv348.CodecDecodeSelf(d)
	}
	yyj344++
	if yyhl344 {
		yyb344 = yyj344 > l
	} else {
		yyb344 = r.CheckBreak()
	}
	if yyb344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv349 := &x.Status
		yyv349.CodecDecodeSelf(d)
	}
	for {
		yyj344++
		if yyhl344 {
			yyb344 = yyj344 > l
		} else {
			yyb344 = r.CheckBreak()
		}
		if yyb344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym350 := z.EncBinary()
		_ = yym350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep351 := !z.EncBinary()
			yy2arr351 := z.EncBasicHandle().StructToArray
			var yyq351 [20]bool
			_, _, _ = yysep351, yyq351, yy2arr351
			const yyr351 bool = false
			yyq351[0] = len(x.Capacity) != 0
			yyq351[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq351[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq351[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq351[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq351[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq351[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq351[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq351[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq351[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq351[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq351[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq351[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq351[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq351[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq351[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq351[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq351[17] = len(x.AccessModes) != 0
			yyq351[18] = x.ClaimRef != nil
			yyq351[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn351 int
			if yyr351 || yy2arr351 {
				r.EncodeArrayStart(20)
			} else {
				yynn351 = 0
				for _, b := range yyq351 {
					if b {
						yynn351++
					}
				}
				r.EncodeMapStart(yynn351)
				yynn351 = 0
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr351 || yy2arr351 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr351 || yy2arr351 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr351 || yy2arr351 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr351 || yy2arr351 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr351 || yy2arr351 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr351 || yy2arr351 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr351 || yy2arr351 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr351 || yy2arr351 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr351 || yy2arr351 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr351 || yy2arr351 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr351 || yy2arr351 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr351 || yy2arr351 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr351 || yy2arr351 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr351 || yy2arr351 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr351 || yy2arr351 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr351 || yy2arr351 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq351[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq351[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq351[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq351[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq351[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr351 || yy2arr351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym374 := z.DecBinary()
	_ = yym374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct375 := r.ContainerType()
		if yyct375 == codecSelferValueTypeMap1234 {
			yyl375 := r.ReadMapStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl375, d)
			}
		} else if yyct375 == codecSelferValueTypeArray1234 {
			yyl375 := r.ReadArrayStart()
			if yyl375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys376Slc
	var yyhl376 bool = l >= 0
	for yyj376 := 0; ; yyj376++ {
		if yyhl376 {
			if yyj376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys376Slc = r.DecodeBytes(yys376Slc, true, true)
		yys376 := string(yys376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys376 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv377 := &x.Capacity
				yyv377.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv394 := &x.AccessModes
				yym395 := z.DecBinary()
				_ = yym395
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv394), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys376)
		} // end switch yys376
	} // end for yyj376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj398 int
	var yyb398 bool
	var yyhl398 bool = l >= 0
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv399 := &x.Capacity
		yyv399.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv416 := &x.AccessModes
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
		}
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj398++
	if yyhl398 {
		yyb398 = yyj398 > l
	} else {
		yyb398 = r.CheckBreak()
	}
	if yyb398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj398++
		if yyhl398 {
			yyb398 = yyj398 > l
		} else {
			yyb398 = r.CheckBreak()
		}
		if yyb398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym420 := z.EncBinary()
	_ = yym420
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [3]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Phase != ""
			yyq423[1] = x.Message != ""
			yyq423[2] = x.Reason != ""
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(3)
			} else {
				yynn423 = 0
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[2] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym441 := z.EncBinary()
		_ = yym441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep442 := !z.EncBinary()
			yy2arr442 := z.EncBasicHandle().StructToArray
			var yyq442 [4]bool
			_, _, _ = yysep442, yyq442, yy2arr442
			const yyr442 bool = false
			yyq442[0] = x.Kind != ""
			yyq442[1] = x.APIVersion != ""
			yyq442[2] = true
			var yynn442 int
			if yyr442 || yy2arr442 {
				r.EncodeArrayStart(4)
			} else {
				yynn442 = 1
				for _, b := range yyq442 {
					if b {
						yynn442++
					}
				}
				r.EncodeMapStart(yynn442)
				yynn442 = 0
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[0] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[1] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq442[2] {
					yy450 := &x.ListMeta
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy450) {
					} else {
						z.EncFallback(yy450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.ListMeta
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy452) {
					} else {
						z.EncFallback(yy452)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym455 := z.EncBinary()
					_ = yym455
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr442 || yy2arr442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym457 := z.DecBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct458 := r.ContainerType()
		if yyct458 == codecSelferValueTypeMap1234 {
			yyl458 := r.ReadMapStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl458, d)
			}
		} else if yyct458 == codecSelferValueTypeArray1234 {
			yyl458 := r.ReadArrayStart()
			if yyl458 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys459Slc
	var yyhl459 bool = l >= 0
	for yyj459 := 0; ; yyj459++ {
		if yyhl459 {
			if yyj459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys459Slc = r.DecodeBytes(yys459Slc, true, true)
		yys459 := string(yys459Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys459 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv462 := &x.ListMeta
				yym463 := z.DecBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv462) {
				} else {
					z.DecFallback(yyv462, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv464 := &x.Items
				yym465 := z.DecBinary()
				_ = yym465
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv464), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys459)
		} // end switch yys459
	} // end for yyj459
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj466 int
	var yyb466 bool
	var yyhl466 bool = l >= 0
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv469 := &x.ListMeta
		yym470 := z.DecBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv469) {
		} else {
			z.DecFallback(yyv469, false)
		}
	}
	yyj466++
	if yyhl466 {
		yyb466 = yyj466 > l
	} else {
		yyb466 = r.CheckBreak()
	}
	if yyb466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv471 := &x.Items
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv471), d)
		}
	}
	for {
		yyj466++
		if yyhl466 {
			yyb466 = yyj466 > l
		} else {
			yyb466 = r.CheckBreak()
		}
		if yyb466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [5]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.Kind != ""
			yyq474[1] = x.APIVersion != ""
			yyq474[2] = true
			yyq474[3] = true
			yyq474[4] = true
			var yynn474 int
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(5)
			} else {
				yynn474 = 0
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
				yynn474 = 0
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[0] {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[1] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[2] {
					yy482 := &x.ObjectMeta
					yy482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy483 := &x.ObjectMeta
					yy483.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[3] {
					yy485 := &x.Spec
					yy485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy486 := &x.Spec
					yy486.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq474[4] {
					yy488 := &x.Status
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Status
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr474 || yy2arr474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym490 := z.DecBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct491 := r.ContainerType()
		if yyct491 == codecSelferValueTypeMap1234 {
			yyl491 := r.ReadMapStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl491, d)
			}
		} else if yyct491 == codecSelferValueTypeArray1234 {
			yyl491 := r.ReadArrayStart()
			if yyl491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys492Slc
	var yyhl492 bool = l >= 0
	for yyj492 := 0; ; yyj492++ {
		if yyhl492 {
			if yyj492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys492Slc = r.DecodeBytes(yys492Slc, true, true)
		yys492 := string(yys492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv495 := &x.ObjectMeta
				yyv495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv496 := &x.Spec
				yyv496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv497 := &x.Status
				yyv497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys492)
		} // end switch yys492
	} // end for yyj492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj498 int
	var yyb498 bool
	var yyhl498 bool = l >= 0
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv501 := &x.ObjectMeta
		yyv501.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv502 := &x.Spec
		yyv502.CodecDecodeSelf(d)
	}
	yyj498++
	if yyhl498 {
		yyb498 = yyj498 > l
	} else {
		yyb498 = r.CheckBreak()
	}
	if yyb498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv503 := &x.Status
		yyv503.CodecDecodeSelf(d)
	}
	for {
		yyj498++
		if yyhl498 {
			yyb498 = yyj498 > l
		} else {
			yyb498 = r.CheckBreak()
		}
		if yyb498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym504 := z.EncBinary()
		_ = yym504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep505 := !z.EncBinary()
			yy2arr505 := z.EncBasicHandle().StructToArray
			var yyq505 [4]bool
			_, _, _ = yysep505, yyq505, yy2arr505
			const yyr505 bool = false
			yyq505[0] = x.Kind != ""
			yyq505[1] = x.APIVersion != ""
			yyq505[2] = true
			var yynn505 int
			if yyr505 || yy2arr505 {
				r.EncodeArrayStart(4)
			} else {
				yynn505 = 1
				for _, b := range yyq505 {
					if b {
						yynn505++
					}
				}
				r.EncodeMapStart(yynn505)
				yynn505 = 0
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[0] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[1] {
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq505[2] {
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy515 := &x.ListMeta
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy515) {
					} else {
						z.EncFallback(yy515)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr505 || yy2arr505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct521 := r.ContainerType()
		if yyct521 == codecSelferValueTypeMap1234 {
			yyl521 := r.ReadMapStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl521, d)
			}
		} else if yyct521 == codecSelferValueTypeArray1234 {
			yyl521 := r.ReadArrayStart()
			if yyl521 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl521, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys522Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys522Slc
	var yyhl522 bool = l >= 0
	for yyj522 := 0; ; yyj522++ {
		if yyhl522 {
			if yyj522 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys522Slc = r.DecodeBytes(yys522Slc, true, true)
		yys522 := string(yys522Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys522 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv525 := &x.ListMeta
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv525) {
				} else {
					z.DecFallback(yyv525, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv527 := &x.Items
				yym528 := z.DecBinary()
				_ = yym528
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv527), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys522)
		} // end switch yys522
	} // end for yyj522
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj529 int
	var yyb529 bool
	var yyhl529 bool = l >= 0
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv532 := &x.ListMeta
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv532) {
		} else {
			z.DecFallback(yyv532, false)
		}
	}
	yyj529++
	if yyhl529 {
		yyb529 = yyj529 > l
	} else {
		yyb529 = r.CheckBreak()
	}
	if yyb529 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv534 := &x.Items
		yym535 := z.DecBinary()
		_ = yym535
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv534), d)
		}
	}
	for {
		yyj529++
		if yyhl529 {
			yyb529 = yyj529 > l
		} else {
			yyb529 = r.CheckBreak()
		}
		if yyb529 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj529-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym536 := z.EncBinary()
		_ = yym536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep537 := !z.EncBinary()
			yy2arr537 := z.EncBasicHandle().StructToArray
			var yyq537 [4]bool
			_, _, _ = yysep537, yyq537, yy2arr537
			const yyr537 bool = false
			yyq537[0] = len(x.AccessModes) != 0
			yyq537[1] = x.Selector != nil
			yyq537[2] = true
			yyq537[3] = x.VolumeName != ""
			var yynn537 int
			if yyr537 || yy2arr537 {
				r.EncodeArrayStart(4)
			} else {
				yynn537 = 0
				for _, b := range yyq537 {
					if b {
						yynn537++
					}
				}
				r.EncodeMapStart(yynn537)
				yynn537 = 0
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym542 := z.EncBinary()
						_ = yym542
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym543 := z.EncBinary()
						_ = yym543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[2] {
					yy545 := &x.Resources
					yy545.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq537[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy546 := &x.Resources
					yy546.CodecEncodeSelf(e)
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq537[3] {
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq537[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym549 := z.EncBinary()
					_ = yym549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv553 := &x.AccessModes
				yym554 := z.DecBinary()
				_ = yym554
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv553), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv557 := &x.Resources
				yyv557.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv560 := &x.AccessModes
		yym561 := z.DecBinary()
		_ = yym561
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym563 := z.DecBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv564 := &x.Resources
		yyv564.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym566 := z.EncBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep567 := !z.EncBinary()
			yy2arr567 := z.EncBasicHandle().StructToArray
			var yyq567 [3]bool
			_, _, _ = yysep567, yyq567, yy2arr567
			const yyr567 bool = false
			yyq567[0] = x.Phase != ""
			yyq567[1] = len(x.AccessModes) != 0
			yyq567[2] = len(x.Capacity) != 0
			var yynn567 int
			if yyr567 || yy2arr567 {
				r.EncodeArrayStart(3)
			} else {
				yynn567 = 0
				for _, b := range yyq567 {
					if b {
						yynn567++
					}
				}
				r.EncodeMapStart(yynn567)
				yynn567 = 0
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq567[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq567[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr567 || yy2arr567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv579 := &x.Capacity
				yyv579.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv582 := &x.AccessModes
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv582), d)
		}
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv584 := &x.Capacity
		yyv584.CodecDecodeSelf(d)
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym585 := z.EncBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym586 := z.DecBinary()
	_ = yym586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym587 := z.EncBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym589 := z.EncBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym591 := z.EncBinary()
		_ = yym591
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep592 := !z.EncBinary()
			yy2arr592 := z.EncBasicHandle().StructToArray
			var yyq592 [1]bool
			_, _, _ = yysep592, yyq592, yy2arr592
			const yyr592 bool = false
			var yynn592 int
			if yyr592 || yy2arr592 {
				r.EncodeArrayStart(1)
			} else {
				yynn592 = 1
				for _, b := range yyq592 {
					if b {
						yynn592++
					}
				}
				r.EncodeMapStart(yynn592)
				yynn592 = 0
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym594 := z.EncBinary()
				_ = yym594
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr592 || yy2arr592 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [1]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Medium != ""
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(1)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj609 int
	var yyb609 bool
	var yyhl609 bool = l >= 0
	yyj609++
	if yyhl609 {
		yyb609 = yyj609 > l
	} else {
		yyb609 = r.CheckBreak()
	}
	if yyb609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj609++
		if yyhl609 {
			yyb609 = yyj609 > l
		} else {
			yyb609 = r.CheckBreak()
		}
		if yyb609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym611 := z.EncBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep612 := !z.EncBinary()
			yy2arr612 := z.EncBasicHandle().StructToArray
			var yyq612 [3]bool
			_, _, _ = yysep612, yyq612, yy2arr612
			const yyr612 bool = false
			yyq612[2] = x.ReadOnly != false
			var yynn612 int
			if yyr612 || yy2arr612 {
				r.EncodeArrayStart(3)
			} else {
				yynn612 = 2
				for _, b := range yyq612 {
					if b {
						yynn612++
					}
				}
				r.EncodeMapStart(yynn612)
				yynn612 = 0
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym617 := z.EncBinary()
				_ = yym617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[2] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq612[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct623 := r.ContainerType()
		if yyct623 == codecSelferValueTypeMap1234 {
			yyl623 := r.ReadMapStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl623, d)
			}
		} else if yyct623 == codecSelferValueTypeArray1234 {
			yyl623 := r.ReadArrayStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys624Slc
	var yyhl624 bool = l >= 0
	for yyj624 := 0; ; yyj624++ {
		if yyhl624 {
			if yyj624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys624Slc = r.DecodeBytes(yys624Slc, true, true)
		yys624 := string(yys624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys624 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys624)
		} // end switch yys624
	} // end for yyj624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj628 int
	var yyb628 bool
	var yyhl628 bool = l >= 0
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj628++
	if yyhl628 {
		yyb628 = yyj628 > l
	} else {
		yyb628 = r.CheckBreak()
	}
	if yyb628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj628++
		if yyhl628 {
			yyb628 = yyj628 > l
		} else {
			yyb628 = r.CheckBreak()
		}
		if yyb628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym632 := z.EncBinary()
		_ = yym632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep633 := !z.EncBinary()
			yy2arr633 := z.EncBasicHandle().StructToArray
			var yyq633 [8]bool
			_, _, _ = yysep633, yyq633, yy2arr633
			const yyr633 bool = false
			yyq633[2] = x.FSType != ""
			yyq633[3] = x.RBDPool != ""
			yyq633[4] = x.RadosUser != ""
			yyq633[5] = x.Keyring != ""
			yyq633[6] = x.SecretRef != nil
			yyq633[7] = x.ReadOnly != false
			var yynn633 int
			if yyr633 || yy2arr633 {
				r.EncodeArrayStart(8)
			} else {
				yynn633 = 2
				for _, b := range yyq633 {
					if b {
						yynn633++
					}
				}
				r.EncodeMapStart(yynn633)
				yynn633 = 0
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym638 := z.EncBinary()
				_ = yym638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym639 := z.EncBinary()
				_ = yym639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[2] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[3] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[4] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[5] {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq633[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[7] {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq633[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct657 := r.ContainerType()
		if yyct657 == codecSelferValueTypeMap1234 {
			yyl657 := r.ReadMapStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl657, d)
			}
		} else if yyct657 == codecSelferValueTypeArray1234 {
			yyl657 := r.ReadArrayStart()
			if yyl657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys658Slc
	var yyhl658 bool = l >= 0
	for yyj658 := 0; ; yyj658++ {
		if yyhl658 {
			if yyj658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys658Slc = r.DecodeBytes(yys658Slc, true, true)
		yys658 := string(yys658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys658 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv659 := &x.CephMonitors
				yym660 := z.DecBinary()
				_ = yym660
				if false {
				} else {
					z.F.DecSliceStringX(yyv659, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys658)
		} // end switch yys658
	} // end for yyj658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv669 := &x.CephMonitors
		yym670 := z.DecBinary()
		_ = yym670
		if false {
		} else {
			z.F.DecSliceStringX(yyv669, false, d)
		}
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym678 := z.EncBinary()
		_ = yym678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep679 := !z.EncBinary()
			yy2arr679 := z.EncBasicHandle().StructToArray
			var yyq679 [3]bool
			_, _, _ = yysep679, yyq679, yy2arr679
			const yyr679 bool = false
			yyq679[1] = x.FSType != ""
			yyq679[2] = x.ReadOnly != false
			var yynn679 int
			if yyr679 || yy2arr679 {
				r.EncodeArrayStart(3)
			} else {
				yynn679 = 1
				for _, b := range yyq679 {
					if b {
						yynn679++
					}
				}
				r.EncodeMapStart(yynn679)
				yynn679 = 0
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq679[1] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq679[2] {
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq679[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr679 || yy2arr679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym689 := z.DecBinary()
	_ = yym689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct690 := r.ContainerType()
		if yyct690 == codecSelferValueTypeMap1234 {
			yyl690 := r.ReadMapStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl690, d)
			}
		} else if yyct690 == codecSelferValueTypeArray1234 {
			yyl690 := r.ReadArrayStart()
			if yyl690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys691Slc
	var yyhl691 bool = l >= 0
	for yyj691 := 0; ; yyj691++ {
		if yyhl691 {
			if yyj691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys691Slc = r.DecodeBytes(yys691Slc, true, true)
		yys691 := string(yys691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys691 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys691)
		} // end switch yys691
	} // end for yyj691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj695 int
	var yyb695 bool
	var yyhl695 bool = l >= 0
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj695++
	if yyhl695 {
		yyb695 = yyj695 > l
	} else {
		yyb695 = r.CheckBreak()
	}
	if yyb695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj695++
		if yyhl695 {
			yyb695 = yyj695 > l
		} else {
			yyb695 = r.CheckBreak()
		}
		if yyb695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym699 := z.EncBinary()
		_ = yym699
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep700 := !z.EncBinary()
			yy2arr700 := z.EncBasicHandle().StructToArray
			var yyq700 [6]bool
			_, _, _ = yysep700, yyq700, yy2arr700
			const yyr700 bool = false
			yyq700[1] = x.Path != ""
			yyq700[2] = x.User != ""
			yyq700[3] = x.SecretFile != ""
			yyq700[4] = x.SecretRef != nil
			yyq700[5] = x.ReadOnly != false
			var yynn700 int
			if yyr700 || yy2arr700 {
				r.EncodeArrayStart(6)
			} else {
				yynn700 = 1
				for _, b := range yyq700 {
					if b {
						yynn700++
					}
				}
				r.EncodeMapStart(yynn700)
				yynn700 = 0
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[1] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[2] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[3] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq700[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[5] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq700[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym717 := z.DecBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct718 := r.ContainerType()
		if yyct718 == codecSelferValueTypeMap1234 {
			yyl718 := r.ReadMapStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl718, d)
			}
		} else if yyct718 == codecSelferValueTypeArray1234 {
			yyl718 := r.ReadArrayStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys719Slc
	var yyhl719 bool = l >= 0
	for yyj719 := 0; ; yyj719++ {
		if yyhl719 {
			if yyj719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys719Slc = r.DecodeBytes(yys719Slc, true, true)
		yys719 := string(yys719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys719 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv720 := &x.Monitors
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else {
					z.F.DecSliceStringX(yyv720, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys719)
		} // end switch yys719
	} // end for yyj719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj727 int
	var yyb727 bool
	var yyhl727 bool = l >= 0
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv728 := &x.Monitors
		yym729 := z.DecBinary()
		_ = yym729
		if false {
		} else {
			z.F.DecSliceStringX(yyv728, false, d)
		}
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj727++
		if yyhl727 {
			yyb727 = yyj727 > l
		} else {
			yyb727 = r.CheckBreak()
		}
		if yyb727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym735 := z.EncBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep736 := !z.EncBinary()
			yy2arr736 := z.EncBasicHandle().StructToArray
			var yyq736 [2]bool
			_, _, _ = yysep736, yyq736, yy2arr736
			const yyr736 bool = false
			yyq736[0] = x.DatasetName != ""
			yyq736[1] = x.DatasetUUID != ""
			var yynn736 int
			if yyr736 || yy2arr736 {
				r.EncodeArrayStart(2)
			} else {
				yynn736 = 0
				for _, b := range yyq736 {
					if b {
						yynn736++
					}
				}
				r.EncodeMapStart(yynn736)
				yynn736 = 0
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[0] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq736[1] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq736[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr736 || yy2arr736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct744 := r.ContainerType()
		if yyct744 == codecSelferValueTypeMap1234 {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if yyct744 == codecSelferValueTypeArray1234 {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys745 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym751 := z.EncBinary()
	_ = yym751
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym752 := z.DecBinary()
	_ = yym752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym753 := z.EncBinary()
	_ = yym753
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym755 := z.EncBinary()
		_ = yym755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep756 := !z.EncBinary()
			yy2arr756 := z.EncBasicHandle().StructToArray
			var yyq756 [4]bool
			_, _, _ = yysep756, yyq756, yy2arr756
			const yyr756 bool = false
			yyq756[1] = x.FSType != ""
			yyq756[2] = x.Partition != 0
			yyq756[3] = x.ReadOnly != false
			var yynn756 int
			if yyr756 || yy2arr756 {
				r.EncodeArrayStart(4)
			} else {
				yynn756 = 1
				for _, b := range yyq756 {
					if b {
						yynn756++
					}
				}
				r.EncodeMapStart(yynn756)
				yynn756 = 0
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[1] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[2] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq756[3] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq756[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr756 || yy2arr756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj776 int
	var yyb776 bool
	var yyhl776 bool = l >= 0
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj776++
		if yyhl776 {
			yyb776 = yyj776 > l
		} else {
			yyb776 = r.CheckBreak()
		}
		if yyb776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym781 := z.EncBinary()
		_ = yym781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep782 := !z.EncBinary()
			yy2arr782 := z.EncBasicHandle().StructToArray
			var yyq782 [5]bool
			_, _, _ = yysep782, yyq782, yy2arr782
			const yyr782 bool = false
			yyq782[2] = x.ReadOnly != false
			yyq782[3] = x.User != ""
			yyq782[4] = x.Group != ""
			var yynn782 int
			if yyr782 || yy2arr782 {
				r.EncodeArrayStart(5)
			} else {
				yynn782 = 2
				for _, b := range yyq782 {
					if b {
						yynn782++
					}
				}
				r.EncodeMapStart(yynn782)
				yynn782 = 0
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym785 := z.EncBinary()
				_ = yym785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[2] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq782[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[3] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[4] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym798 := z.DecBinary()
	_ = yym798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct799 := r.ContainerType()
		if yyct799 == codecSelferValueTypeMap1234 {
			yyl799 := r.ReadMapStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl799, d)
			}
		} else if yyct799 == codecSelferValueTypeArray1234 {
			yyl799 := r.ReadArrayStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys800Slc
	var yyhl800 bool = l >= 0
	for yyj800 := 0; ; yyj800++ {
		if yyhl800 {
			if yyj800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys800Slc = r.DecodeBytes(yys800Slc, true, true)
		yys800 := string(yys800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys800 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys800)
		} // end switch yys800
	} // end for yyj800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj806 int
	var yyb806 bool
	var yyhl806 bool = l >= 0
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj806++
		if yyhl806 {
			yyb806 = yyj806 > l
		} else {
			yyb806 = r.CheckBreak()
		}
		if yyb806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym812 := z.EncBinary()
		_ = yym812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep813 := !z.EncBinary()
			yy2arr813 := z.EncBasicHandle().StructToArray
			var yyq813 [5]bool
			_, _, _ = yysep813, yyq813, yy2arr813
			const yyr813 bool = false
			yyq813[1] = x.FSType != ""
			yyq813[2] = x.SecretRef != nil
			yyq813[3] = x.ReadOnly != false
			yyq813[4] = len(x.Options) != 0
			var yynn813 int
			if yyr813 || yy2arr813 {
				r.EncodeArrayStart(5)
			} else {
				yynn813 = 1
				for _, b := range yyq813 {
					if b {
						yynn813++
					}
				}
				r.EncodeMapStart(yynn813)
				yynn813 = 0
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym815 := z.EncBinary()
				_ = yym815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym816 := z.EncBinary()
				_ = yym816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[1] {
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[3] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq813[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq813[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym825 := z.EncBinary()
						_ = yym825
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq813[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym826 := z.EncBinary()
						_ = yym826
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr813 || yy2arr813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym827 := z.DecBinary()
	_ = yym827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct828 := r.ContainerType()
		if yyct828 == codecSelferValueTypeMap1234 {
			yyl828 := r.ReadMapStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl828, d)
			}
		} else if yyct828 == codecSelferValueTypeArray1234 {
			yyl828 := r.ReadArrayStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys829Slc
	var yyhl829 bool = l >= 0
	for yyj829 := 0; ; yyj829++ {
		if yyhl829 {
			if yyj829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys829Slc = r.DecodeBytes(yys829Slc, true, true)
		yys829 := string(yys829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys829 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv834 := &x.Options
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else {
					z.F.DecMapStringStringX(yyv834, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys829)
		} // end switch yys829
	} // end for yyj829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj836 int
	var yyb836 bool
	var yyhl836 bool = l >= 0
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv841 := &x.Options
		yym842 := z.DecBinary()
		_ = yym842
		if false {
		} else {
			z.F.DecMapStringStringX(yyv841, false, d)
		}
	}
	for {
		yyj836++
		if yyhl836 {
			yyb836 = yyj836 > l
		} else {
			yyb836 = r.CheckBreak()
		}
		if yyb836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym843 := z.EncBinary()
		_ = yym843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep844 := !z.EncBinary()
			yy2arr844 := z.EncBasicHandle().StructToArray
			var yyq844 [4]bool
			_, _, _ = yysep844, yyq844, yy2arr844
			const yyr844 bool = false
			yyq844[1] = x.FSType != ""
			yyq844[2] = x.Partition != 0
			yyq844[3] = x.ReadOnly != false
			var yynn844 int
			if yyr844 || yy2arr844 {
				r.EncodeArrayStart(4)
			} else {
				yynn844 = 1
				for _, b := range yyq844 {
					if b {
						yynn844++
					}
				}
				r.EncodeMapStart(yynn844)
				yynn844 = 0
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym847 := z.EncBinary()
				_ = yym847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[1] {
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[2] {
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq844[3] {
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq844[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr844 || yy2arr844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym857 := z.DecBinary()
	_ = yym857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct858 := r.ContainerType()
		if yyct858 == codecSelferValueTypeMap1234 {
			yyl858 := r.ReadMapStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl858, d)
			}
		} else if yyct858 == codecSelferValueTypeArray1234 {
			yyl858 := r.ReadArrayStart()
			if yyl858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys859Slc
	var yyhl859 bool = l >= 0
	for yyj859 := 0; ; yyj859++ {
		if yyhl859 {
			if yyj859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys859Slc = r.DecodeBytes(yys859Slc, true, true)
		yys859 := string(yys859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys859 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys859)
		} // end switch yys859
	} // end for yyj859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj864 int
	var yyb864 bool
	var yyhl864 bool = l >= 0
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj864++
	if yyhl864 {
		yyb864 = yyj864 > l
	} else {
		yyb864 = r.CheckBreak()
	}
	if yyb864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj864++
		if yyhl864 {
			yyb864 = yyj864 > l
		} else {
			yyb864 = r.CheckBreak()
		}
		if yyb864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym869 := z.EncBinary()
		_ = yym869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep870 := !z.EncBinary()
			yy2arr870 := z.EncBasicHandle().StructToArray
			var yyq870 [3]bool
			_, _, _ = yysep870, yyq870, yy2arr870
			const yyr870 bool = false
			yyq870[1] = x.Revision != ""
			yyq870[2] = x.Directory != ""
			var yynn870 int
			if yyr870 || yy2arr870 {
				r.EncodeArrayStart(3)
			} else {
				yynn870 = 1
				for _, b := range yyq870 {
					if b {
						yynn870++
					}
				}
				r.EncodeMapStart(yynn870)
				yynn870 = 0
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym872 := z.EncBinary()
				_ = yym872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[1] {
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq870[2] {
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq870[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr870 || yy2arr870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym880 := z.DecBinary()
	_ = yym880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct881 := r.ContainerType()
		if yyct881 == codecSelferValueTypeMap1234 {
			yyl881 := r.ReadMapStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl881, d)
			}
		} else if yyct881 == codecSelferValueTypeArray1234 {
			yyl881 := r.ReadArrayStart()
			if yyl881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys882Slc
	var yyhl882 bool = l >= 0
	for yyj882 := 0; ; yyj882++ {
		if yyhl882 {
			if yyj882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys882Slc = r.DecodeBytes(yys882Slc, true, true)
		yys882 := string(yys882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys882 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys882)
		} // end switch yys882
	} // end for yyj882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj886 int
	var yyb886 bool
	var yyhl886 bool = l >= 0
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj886++
	if yyhl886 {
		yyb886 = yyj886 > l
	} else {
		yyb886 = r.CheckBreak()
	}
	if yyb886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj886++
		if yyhl886 {
			yyb886 = yyj886 > l
		} else {
			yyb886 = r.CheckBreak()
		}
		if yyb886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [3]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[0] = x.SecretName != ""
			yyq891[1] = len(x.Items) != 0
			yyq891[2] = x.DefaultMode != nil
			var yynn891 int
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(3)
			} else {
				yynn891 = 0
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
				yynn891 = 0
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[0] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym896 := z.EncBinary()
						_ = yym896
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym897 := z.EncBinary()
						_ = yym897
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy899 := *x.DefaultMode
						yym900 := z.EncBinary()
						_ = yym900
						if false {
						} else {
							r.EncodeInt(int64(yy899))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy901 := *x.DefaultMode
						yym902 := z.EncBinary()
						_ = yym902
						if false {
						} else {
							r.EncodeInt(int64(yy901))
						}
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym903 := z.DecBinary()
	_ = yym903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct904 := r.ContainerType()
		if yyct904 == codecSelferValueTypeMap1234 {
			yyl904 := r.ReadMapStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl904, d)
			}
		} else if yyct904 == codecSelferValueTypeArray1234 {
			yyl904 := r.ReadArrayStart()
			if yyl904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys905Slc
	var yyhl905 bool = l >= 0
	for yyj905 := 0; ; yyj905++ {
		if yyhl905 {
			if yyj905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys905Slc = r.DecodeBytes(yys905Slc, true, true)
		yys905 := string(yys905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys905 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv907 := &x.Items
				yym908 := z.DecBinary()
				_ = yym908
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv907), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym910 := z.DecBinary()
				_ = yym910
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys905)
		} // end switch yys905
	} // end for yyj905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj911 int
	var yyb911 bool
	var yyhl911 bool = l >= 0
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv913 := &x.Items
		yym914 := z.DecBinary()
		_ = yym914
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv913), d)
		}
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym916 := z.DecBinary()
		_ = yym916
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj911++
		if yyhl911 {
			yyb911 = yyj911 > l
		} else {
			yyb911 = r.CheckBreak()
		}
		if yyb911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym917 := z.EncBinary()
		_ = yym917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep918 := !z.EncBinary()
			yy2arr918 := z.EncBasicHandle().StructToArray
			var yyq918 [3]bool
			_, _, _ = yysep918, yyq918, yy2arr918
			const yyr918 bool = false
			yyq918[2] = x.ReadOnly != false
			var yynn918 int
			if yyr918 || yy2arr918 {
				r.EncodeArrayStart(3)
			} else {
				yynn918 = 2
				for _, b := range yyq918 {
					if b {
						yynn918++
					}
				}
				r.EncodeMapStart(yynn918)
				yynn918 = 0
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym920 := z.EncBinary()
				_ = yym920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym921 := z.EncBinary()
				_ = yym921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym923 := z.EncBinary()
				_ = yym923
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym924 := z.EncBinary()
				_ = yym924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq918[2] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq918[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr918 || yy2arr918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym928 := z.DecBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct929 := r.ContainerType()
		if yyct929 == codecSelferValueTypeMap1234 {
			yyl929 := r.ReadMapStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl929, d)
			}
		} else if yyct929 == codecSelferValueTypeArray1234 {
			yyl929 := r.ReadArrayStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys930Slc
	var yyhl930 bool = l >= 0
	for yyj930 := 0; ; yyj930++ {
		if yyhl930 {
			if yyj930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys930Slc = r.DecodeBytes(yys930Slc, true, true)
		yys930 := string(yys930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys930 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys930)
		} // end switch yys930
	} // end for yyj930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj934 int
	var yyb934 bool
	var yyhl934 bool = l >= 0
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj934++
	if yyhl934 {
		yyb934 = yyj934 > l
	} else {
		yyb934 = r.CheckBreak()
	}
	if yyb934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj934++
		if yyhl934 {
			yyb934 = yyj934 > l
		} else {
			yyb934 = r.CheckBreak()
		}
		if yyb934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym938 := z.EncBinary()
		_ = yym938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep939 := !z.EncBinary()
			yy2arr939 := z.EncBasicHandle().StructToArray
			var yyq939 [6]bool
			_, _, _ = yysep939, yyq939, yy2arr939
			const yyr939 bool = false
			yyq939[3] = x.ISCSIInterface != ""
			yyq939[4] = x.FSType != ""
			yyq939[5] = x.ReadOnly != false
			var yynn939 int
			if yyr939 || yy2arr939 {
				r.EncodeArrayStart(6)
			} else {
				yynn939 = 3
				for _, b := range yyq939 {
					if b {
						yynn939++
					}
				}
				r.EncodeMapStart(yynn939)
				yynn939 = 0
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym941 := z.EncBinary()
				_ = yym941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym942 := z.EncBinary()
				_ = yym942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym945 := z.EncBinary()
				_ = yym945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym947 := z.EncBinary()
				_ = yym947
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[3] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq939[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[4] {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq939[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[5] {
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq939[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj967 int
	var yyb967 bool
	var yyhl967 bool = l >= 0
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj967++
	if yyhl967 {
		yyb967 = yyj967 > l
	} else {
		yyb967 = r.CheckBreak()
	}
	if yyb967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj967++
		if yyhl967 {
			yyb967 = yyj967 > l
		} else {
			yyb967 = r.CheckBreak()
		}
		if yyb967 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj967-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym974 := z.EncBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep975 := !z.EncBinary()
			yy2arr975 := z.EncBasicHandle().StructToArray
			var yyq975 [4]bool
			_, _, _ = yysep975, yyq975, yy2arr975
			const yyr975 bool = false
			yyq975[2] = x.FSType != ""
			yyq975[3] = x.ReadOnly != false
			var yynn975 int
			if yyr975 || yy2arr975 {
				r.EncodeArrayStart(4)
			} else {
				yynn975 = 2
				for _, b := range yyq975 {
					if b {
						yynn975++
					}
				}
				r.EncodeMapStart(yynn975)
				yynn975 = 0
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy980 := *x.Lun
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeInt(int64(yy980))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy982 := *x.Lun
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(yy982))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[2] {
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[3] {
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym990 := z.DecBinary()
	_ = yym990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct991 := r.ContainerType()
		if yyct991 == codecSelferValueTypeMap1234 {
			yyl991 := r.ReadMapStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl991, d)
			}
		} else if yyct991 == codecSelferValueTypeArray1234 {
			yyl991 := r.ReadArrayStart()
			if yyl991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys992Slc
	var yyhl992 bool = l >= 0
	for yyj992 := 0; ; yyj992++ {
		if yyhl992 {
			if yyj992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys992Slc = r.DecodeBytes(yys992Slc, true, true)
		yys992 := string(yys992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys992 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv993 := &x.TargetWWNs
				yym994 := z.DecBinary()
				_ = yym994
				if false {
				} else {
					z.F.DecSliceStringX(yyv993, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys992)
		} // end switch yys992
	} // end for yyj992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1000 := &x.TargetWWNs
		yym1001 := z.DecBinary()
		_ = yym1001
		if false {
		} else {
			z.F.DecSliceStringX(yyv1000, false, d)
		}
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1006 := z.EncBinary()
		_ = yym1006
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1007 := !z.EncBinary()
			yy2arr1007 := z.EncBasicHandle().StructToArray
			var yyq1007 [3]bool
			_, _, _ = yysep1007, yyq1007, yy2arr1007
			const yyr1007 bool = false
			yyq1007[2] = x.ReadOnly != false
			var yynn1007 int
			if yyr1007 || yy2arr1007 {
				r.EncodeArrayStart(3)
			} else {
				yynn1007 = 2
				for _, b := range yyq1007 {
					if b {
						yynn1007++
					}
				}
				r.EncodeMapStart(yynn1007)
				yynn1007 = 0
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1009 := z.EncBinary()
				_ = yym1009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1007[2] {
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1007[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1017 := z.DecBinary()
	_ = yym1017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1018 := r.ContainerType()
		if yyct1018 == codecSelferValueTypeMap1234 {
			yyl1018 := r.ReadMapStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1018, d)
			}
		} else if yyct1018 == codecSelferValueTypeArray1234 {
			yyl1018 := r.ReadArrayStart()
			if yyl1018 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1019Slc
	var yyhl1019 bool = l >= 0
	for yyj1019 := 0; ; yyj1019++ {
		if yyhl1019 {
			if yyj1019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1019Slc = r.DecodeBytes(yys1019Slc, true, true)
		yys1019 := string(yys1019Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1019 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1019)
		} // end switch yys1019
	} // end for yyj1019
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1023 int
	var yyb1023 bool
	var yyhl1023 bool = l >= 0
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1023++
	if yyhl1023 {
		yyb1023 = yyj1023 > l
	} else {
		yyb1023 = r.CheckBreak()
	}
	if yyb1023 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1023++
		if yyhl1023 {
			yyb1023 = yyj1023 > l
		} else {
			yyb1023 = r.CheckBreak()
		}
		if yyb1023 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1023-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1027 := z.EncBinary()
		_ = yym1027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1028 := !z.EncBinary()
			yy2arr1028 := z.EncBasicHandle().StructToArray
			var yyq1028 [2]bool
			_, _, _ = yysep1028, yyq1028, yy2arr1028
			const yyr1028 bool = false
			yyq1028[1] = x.FSType != ""
			var yynn1028 int
			if yyr1028 || yy2arr1028 {
				r.EncodeArrayStart(2)
			} else {
				yynn1028 = 1
				for _, b := range yyq1028 {
					if b {
						yynn1028++
					}
				}
				r.EncodeMapStart(yynn1028)
				yynn1028 = 0
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1030 := z.EncBinary()
				_ = yym1030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1031 := z.EncBinary()
				_ = yym1031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1028[1] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1028 || yy2arr1028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1035 := z.DecBinary()
	_ = yym1035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1036 := r.ContainerType()
		if yyct1036 == codecSelferValueTypeMap1234 {
			yyl1036 := r.ReadMapStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1036, d)
			}
		} else if yyct1036 == codecSelferValueTypeArray1234 {
			yyl1036 := r.ReadArrayStart()
			if yyl1036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1037Slc
	var yyhl1037 bool = l >= 0
	for yyj1037 := 0; ; yyj1037++ {
		if yyhl1037 {
			if yyj1037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1037Slc = r.DecodeBytes(yys1037Slc, true, true)
		yys1037 := string(yys1037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1037 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1037)
		} // end switch yys1037
	} // end for yyj1037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1040 int
	var yyb1040 bool
	var yyhl1040 bool = l >= 0
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1040++
		if yyhl1040 {
			yyb1040 = yyj1040 > l
		} else {
			yyb1040 = r.CheckBreak()
		}
		if yyb1040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1043 := z.EncBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [5]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			yyq1046[2] = x.CachingMode != nil
			yyq1046[3] = x.FSType != nil
			yyq1046[4] = x.ReadOnly != nil
			var yynn1046 int
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(5)
			} else {
				yynn1046 = 2
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
				yynn1046 = 0
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1049 := z.EncBinary()
				_ = yym1049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1052 := z.EncBinary()
				_ = yym1052
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1054 := *x.CachingMode
						yy1054.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1055 := *x.CachingMode
						yy1055.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1057 := *x.FSType
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1057))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1059 := *x.FSType
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1059))
						}
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1062 := *x.ReadOnly
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							r.EncodeBool(bool(yy1062))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1046[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1064 := *x.ReadOnly
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							r.EncodeBool(bool(yy1064))
						}
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1066 := z.DecBinary()
	_ = yym1066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1067 := r.ContainerType()
		if yyct1067 == codecSelferValueTypeMap1234 {
			yyl1067 := r.ReadMapStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1067, d)
			}
		} else if yyct1067 == codecSelferValueTypeArray1234 {
			yyl1067 := r.ReadArrayStart()
			if yyl1067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1068Slc
	var yyhl1068 bool = l >= 0
	for yyj1068 := 0; ; yyj1068++ {
		if yyhl1068 {
			if yyj1068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1068Slc = r.DecodeBytes(yys1068Slc, true, true)
		yys1068 := string(yys1068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1068 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1073 := z.DecBinary()
				_ = yym1073
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1075 := z.DecBinary()
				_ = yym1075
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1068)
		} // end switch yys1068
	} // end for yyj1068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1076 int
	var yyb1076 bool
	var yyhl1076 bool = l >= 0
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1081 := z.DecBinary()
		_ = yym1081
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1076++
	if yyhl1076 {
		yyb1076 = yyj1076 > l
	} else {
		yyb1076 = r.CheckBreak()
	}
	if yyb1076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1083 := z.DecBinary()
		_ = yym1083
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1076++
		if yyhl1076 {
			yyb1076 = yyj1076 > l
		} else {
			yyb1076 = r.CheckBreak()
		}
		if yyb1076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1084 := z.EncBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1085 := !z.EncBinary()
			yy2arr1085 := z.EncBasicHandle().StructToArray
			var yyq1085 [3]bool
			_, _, _ = yysep1085, yyq1085, yy2arr1085
			const yyr1085 bool = false
			yyq1085[0] = x.Name != ""
			yyq1085[1] = len(x.Items) != 0
			yyq1085[2] = x.DefaultMode != nil
			var yynn1085 int
			if yyr1085 || yy2arr1085 {
				r.EncodeArrayStart(3)
			} else {
				yynn1085 = 0
				for _, b := range yyq1085 {
					if b {
						yynn1085++
					}
				}
				r.EncodeMapStart(yynn1085)
				yynn1085 = 0
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[0] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1090 := z.EncBinary()
						_ = yym1090
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1093 := *x.DefaultMode
						yym1094 := z.EncBinary()
						_ = yym1094
						if false {
						} else {
							r.EncodeInt(int64(yy1093))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.DefaultMode
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							r.EncodeInt(int64(yy1095))
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1101 := &x.Items
				yym1102 := z.DecBinary()
				_ = yym1102
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1101), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1105 int
	var yyb1105 bool
	var yyhl1105 bool = l >= 0
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1107 := &x.Items
		yym1108 := z.DecBinary()
		_ = yym1108
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1107), d)
		}
	}
	yyj1105++
	if yyhl1105 {
		yyb1105 = yyj1105 > l
	} else {
		yyb1105 = r.CheckBreak()
	}
	if yyb1105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1105++
		if yyhl1105 {
			yyb1105 = yyj1105 > l
		} else {
			yyb1105 = r.CheckBreak()
		}
		if yyb1105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1111 := z.EncBinary()
		_ = yym1111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1112 := !z.EncBinary()
			yy2arr1112 := z.EncBasicHandle().StructToArray
			var yyq1112 [3]bool
			_, _, _ = yysep1112, yyq1112, yy2arr1112
			const yyr1112 bool = false
			yyq1112[2] = x.Mode != nil
			var yynn1112 int
			if yyr1112 || yy2arr1112 {
				r.EncodeArrayStart(3)
			} else {
				yynn1112 = 2
				for _, b := range yyq1112 {
					if b {
						yynn1112++
					}
				}
				r.EncodeMapStart(yynn1112)
				yynn1112 = 0
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1114 := z.EncBinary()
				_ = yym1114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1115 := z.EncBinary()
				_ = yym1115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1117 := z.EncBinary()
				_ = yym1117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1120 := *x.Mode
						yym1121 := z.EncBinary()
						_ = yym1121
						if false {
						} else {
							r.EncodeInt(int64(yy1120))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1122 := *x.Mode
						yym1123 := z.EncBinary()
						_ = yym1123
						if false {
						} else {
							r.EncodeInt(int64(yy1122))
						}
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1124 := z.DecBinary()
	_ = yym1124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1125 := r.ContainerType()
		if yyct1125 == codecSelferValueTypeMap1234 {
			yyl1125 := r.ReadMapStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1125, d)
			}
		} else if yyct1125 == codecSelferValueTypeArray1234 {
			yyl1125 := r.ReadArrayStart()
			if yyl1125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1126Slc
	var yyhl1126 bool = l >= 0
	for yyj1126 := 0; ; yyj1126++ {
		if yyhl1126 {
			if yyj1126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1126Slc = r.DecodeBytes(yys1126Slc, true, true)
		yys1126 := string(yys1126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1126 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1126)
		} // end switch yys1126
	} // end for yyj1126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1136 := z.EncBinary()
		_ = yym1136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1137 := !z.EncBinary()
			yy2arr1137 := z.EncBasicHandle().StructToArray
			var yyq1137 [5]bool
			_, _, _ = yysep1137, yyq1137, yy2arr1137
			const yyr1137 bool = false
			yyq1137[0] = x.Name != ""
			yyq1137[1] = x.HostPort != 0
			yyq1137[3] = x.Protocol != ""
			yyq1137[4] = x.HostIP != ""
			var yynn1137 int
			if yyr1137 || yy2arr1137 {
				r.EncodeArrayStart(5)
			} else {
				yynn1137 = 1
				for _, b := range yyq1137 {
					if b {
						yynn1137++
					}
				}
				r.EncodeMapStart(yynn1137)
				yynn1137 = 0
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[0] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[1] {
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1143 := z.EncBinary()
					_ = yym1143
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1137[4] {
					yym1149 := z.EncBinary()
					_ = yym1149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1137[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1150 := z.EncBinary()
					_ = yym1150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1137 || yy2arr1137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1151 := z.DecBinary()
	_ = yym1151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1152 := r.ContainerType()
		if yyct1152 == codecSelferValueTypeMap1234 {
			yyl1152 := r.ReadMapStart()
			if yyl1152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1152, d)
			}
		} else if yyct1152 == codecSelferValueTypeArray1234 {
			yyl1152 := r.ReadArrayStart()
			if yyl1152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1153Slc
	var yyhl1153 bool = l >= 0
	for yyj1153 := 0; ; yyj1153++ {
		if yyhl1153 {
			if yyj1153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1153Slc = r.DecodeBytes(yys1153Slc, true, true)
		yys1153 := string(yys1153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1153 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1153)
		} // end switch yys1153
	} // end for yyj1153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [4]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[1] = x.ReadOnly != false
			yyq1166[3] = x.SubPath != ""
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(4)
			} else {
				yynn1166 = 2
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1168 := z.EncBinary()
				_ = yym1168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[1] {
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[3] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1166[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1186 int
	var yyb1186 bool
	var yyhl1186 bool = l >= 0
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1186++
	if yyhl1186 {
		yyb1186 = yyj1186 > l
	} else {
		yyb1186 = r.CheckBreak()
	}
	if yyb1186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1186++
		if yyhl1186 {
			yyb1186 = yyj1186 > l
		} else {
			yyb1186 = r.CheckBreak()
		}
		if yyb1186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1191 := z.EncBinary()
		_ = yym1191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1192 := !z.EncBinary()
			yy2arr1192 := z.EncBasicHandle().StructToArray
			var yyq1192 [3]bool
			_, _, _ = yysep1192, yyq1192, yy2arr1192
			const yyr1192 bool = false
			yyq1192[1] = x.Value != ""
			yyq1192[2] = x.ValueFrom != nil
			var yynn1192 int
			if yyr1192 || yy2arr1192 {
				r.EncodeArrayStart(3)
			} else {
				yynn1192 = 1
				for _, b := range yyq1192 {
					if b {
						yynn1192++
					}
				}
				r.EncodeMapStart(yynn1192)
				yynn1192 = 0
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1194 := z.EncBinary()
				_ = yym1194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1192[1] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1192[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1192[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1192 || yy2arr1192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1200 := z.DecBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1201 := r.ContainerType()
		if yyct1201 == codecSelferValueTypeMap1234 {
			yyl1201 := r.ReadMapStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1201, d)
			}
		} else if yyct1201 == codecSelferValueTypeArray1234 {
			yyl1201 := r.ReadArrayStart()
			if yyl1201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1202Slc
	var yyhl1202 bool = l >= 0
	for yyj1202 := 0; ; yyj1202++ {
		if yyhl1202 {
			if yyj1202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1202Slc = r.DecodeBytes(yys1202Slc, true, true)
		yys1202 := string(yys1202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1202 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1202)
		} // end switch yys1202
	} // end for yyj1202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1206 int
	var yyb1206 bool
	var yyhl1206 bool = l >= 0
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1206++
		if yyhl1206 {
			yyb1206 = yyj1206 > l
		} else {
			yyb1206 = r.CheckBreak()
		}
		if yyb1206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [4]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[0] = x.FieldRef != nil
			yyq1211[1] = x.ResourceFieldRef != nil
			yyq1211[2] = x.ConfigMapKeyRef != nil
			yyq1211[3] = x.SecretKeyRef != nil
			var yynn1211 int
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(4)
			} else {
				yynn1211 = 0
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
				yynn1211 = 0
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1223 int
	var yyb1223 bool
	var yyhl1223 bool = l >= 0
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1223++
		if yyhl1223 {
			yyb1223 = yyj1223 > l
		} else {
			yyb1223 = r.CheckBreak()
		}
		if yyb1223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1228 := z.EncBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1229 := !z.EncBinary()
			yy2arr1229 := z.EncBasicHandle().StructToArray
			var yyq1229 [2]bool
			_, _, _ = yysep1229, yyq1229, yy2arr1229
			const yyr1229 bool = false
			yyq1229[0] = x.APIVersion != ""
			var yynn1229 int
			if yyr1229 || yy2arr1229 {
				r.EncodeArrayStart(2)
			} else {
				yynn1229 = 1
				for _, b := range yyq1229 {
					if b {
						yynn1229++
					}
				}
				r.EncodeMapStart(yynn1229)
				yynn1229 = 0
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[0] {
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1229[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1234 := z.EncBinary()
				_ = yym1234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1236 := z.DecBinary()
	_ = yym1236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1237 := r.ContainerType()
		if yyct1237 == codecSelferValueTypeMap1234 {
			yyl1237 := r.ReadMapStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1237, d)
			}
		} else if yyct1237 == codecSelferValueTypeArray1234 {
			yyl1237 := r.ReadArrayStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1238Slc
	var yyhl1238 bool = l >= 0
	for yyj1238 := 0; ; yyj1238++ {
		if yyhl1238 {
			if yyj1238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1238Slc = r.DecodeBytes(yys1238Slc, true, true)
		yys1238 := string(yys1238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1238 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1238)
		} // end switch yys1238
	} // end for yyj1238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1244 := z.EncBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1245 := !z.EncBinary()
			yy2arr1245 := z.EncBasicHandle().StructToArray
			var yyq1245 [3]bool
			_, _, _ = yysep1245, yyq1245, yy2arr1245
			const yyr1245 bool = false
			yyq1245[0] = x.ContainerName != ""
			yyq1245[2] = true
			var yynn1245 int
			if yyr1245 || yy2arr1245 {
				r.EncodeArrayStart(3)
			} else {
				yynn1245 = 1
				for _, b := range yyq1245 {
					if b {
						yynn1245++
					}
				}
				r.EncodeMapStart(yynn1245)
				yynn1245 = 0
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[0] {
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1250 := z.EncBinary()
				_ = yym1250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1251 := z.EncBinary()
				_ = yym1251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[2] {
					yy1253 := &x.Divisor
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1253) {
					} else if !yym1254 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1253)
					} else {
						z.EncFallback(yy1253)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1255 := &x.Divisor
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1255) {
					} else if !yym1256 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1255)
					} else {
						z.EncFallback(yy1255)
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1257 := z.DecBinary()
	_ = yym1257
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1258 := r.ContainerType()
		if yyct1258 == codecSelferValueTypeMap1234 {
			yyl1258 := r.ReadMapStart()
			if yyl1258 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1258, d)
			}
		} else if yyct1258 == codecSelferValueTypeArray1234 {
			yyl1258 := r.ReadArrayStart()
			if yyl1258 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1258, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1259Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1259Slc
	var yyhl1259 bool = l >= 0
	for yyj1259 := 0; ; yyj1259++ {
		if yyhl1259 {
			if yyj1259 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1259Slc = r.DecodeBytes(yys1259Slc, true, true)
		yys1259 := string(yys1259Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1259 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1262 := &x.Divisor
				yym1263 := z.DecBinary()
				_ = yym1263
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1262) {
				} else if !yym1263 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1262)
				} else {
					z.DecFallback(yyv1262, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1259)
		} // end switch yys1259
	} // end for yyj1259
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1264 int
	var yyb1264 bool
	var yyhl1264 bool = l >= 0
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1267 := &x.Divisor
		yym1268 := z.DecBinary()
		_ = yym1268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1267) {
		} else if !yym1268 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1267)
		} else {
			z.DecFallback(yyv1267, false)
		}
	}
	for {
		yyj1264++
		if yyhl1264 {
			yyb1264 = yyj1264 > l
		} else {
			yyb1264 = r.CheckBreak()
		}
		if yyb1264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1269 := z.EncBinary()
		_ = yym1269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1270 := !z.EncBinary()
			yy2arr1270 := z.EncBasicHandle().StructToArray
			var yyq1270 [2]bool
			_, _, _ = yysep1270, yyq1270, yy2arr1270
			const yyr1270 bool = false
			yyq1270[0] = x.Name != ""
			var yynn1270 int
			if yyr1270 || yy2arr1270 {
				r.EncodeArrayStart(2)
			} else {
				yynn1270 = 1
				for _, b := range yyq1270 {
					if b {
						yynn1270++
					}
				}
				r.EncodeMapStart(yynn1270)
				yynn1270 = 0
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1270[0] {
					yym1272 := z.EncBinary()
					_ = yym1272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1270[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1275 := z.EncBinary()
				_ = yym1275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1276 := z.EncBinary()
				_ = yym1276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1282 int
	var yyb1282 bool
	var yyhl1282 bool = l >= 0
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1282++
		if yyhl1282 {
			yyb1282 = yyj1282 > l
		} else {
			yyb1282 = r.CheckBreak()
		}
		if yyb1282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1285 := z.EncBinary()
		_ = yym1285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1286 := !z.EncBinary()
			yy2arr1286 := z.EncBasicHandle().StructToArray
			var yyq1286 [2]bool
			_, _, _ = yysep1286, yyq1286, yy2arr1286
			const yyr1286 bool = false
			yyq1286[0] = x.Name != ""
			var yynn1286 int
			if yyr1286 || yy2arr1286 {
				r.EncodeArrayStart(2)
			} else {
				yynn1286 = 1
				for _, b := range yyq1286 {
					if b {
						yynn1286++
					}
				}
				r.EncodeMapStart(yynn1286)
				yynn1286 = 0
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[0] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1298 int
	var yyb1298 bool
	var yyhl1298 bool = l >= 0
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1298++
	if yyhl1298 {
		yyb1298 = yyj1298 > l
	} else {
		yyb1298 = r.CheckBreak()
	}
	if yyb1298 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1298++
		if yyhl1298 {
			yyb1298 = yyj1298 > l
		} else {
			yyb1298 = r.CheckBreak()
		}
		if yyb1298 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1298-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1301 := z.EncBinary()
		_ = yym1301
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1302 := !z.EncBinary()
			yy2arr1302 := z.EncBasicHandle().StructToArray
			var yyq1302 [2]bool
			_, _, _ = yysep1302, yyq1302, yy2arr1302
			const yyr1302 bool = false
			var yynn1302 int
			if yyr1302 || yy2arr1302 {
				r.EncodeArrayStart(2)
			} else {
				yynn1302 = 2
				for _, b := range yyq1302 {
					if b {
						yynn1302++
					}
				}
				r.EncodeMapStart(yynn1302)
				yynn1302 = 0
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1305 := z.EncBinary()
				_ = yym1305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1308 := z.EncBinary()
				_ = yym1308
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1302 || yy2arr1302 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1314 int
	var yyb1314 bool
	var yyhl1314 bool = l >= 0
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1314++
	if yyhl1314 {
		yyb1314 = yyj1314 > l
	} else {
		yyb1314 = r.CheckBreak()
	}
	if yyb1314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1314++
		if yyhl1314 {
			yyb1314 = yyj1314 > l
		} else {
			yyb1314 = r.CheckBreak()
		}
		if yyb1314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [5]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[0] = x.Path != ""
			yyq1318[2] = x.Host != ""
			yyq1318[3] = x.Scheme != ""
			yyq1318[4] = len(x.HTTPHeaders) != 0
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(5)
			} else {
				yynn1318 = 1
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[0] {
					yym1320 := z.EncBinary()
					_ = yym1320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1323 := &x.Port
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1323) {
				} else if !yym1324 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1323)
				} else {
					z.EncFallback(yy1323)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1325 := &x.Port
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1325) {
				} else if !yym1326 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1325)
				} else {
					z.EncFallback(yy1325)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[2] {
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1332 := z.EncBinary()
						_ = yym1332
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1333 := z.EncBinary()
						_ = yym1333
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1334 := z.DecBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1335 := r.ContainerType()
		if yyct1335 == codecSelferValueTypeMap1234 {
			yyl1335 := r.ReadMapStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1335, d)
			}
		} else if yyct1335 == codecSelferValueTypeArray1234 {
			yyl1335 := r.ReadArrayStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1336Slc
	var yyhl1336 bool = l >= 0
	for yyj1336 := 0; ; yyj1336++ {
		if yyhl1336 {
			if yyj1336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1336Slc = r.DecodeBytes(yys1336Slc, true, true)
		yys1336 := string(yys1336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1336 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1338 := &x.Port
				yym1339 := z.DecBinary()
				_ = yym1339
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1338) {
				} else if !yym1339 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1338)
				} else {
					z.DecFallback(yyv1338, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1342 := &x.HTTPHeaders
				yym1343 := z.DecBinary()
				_ = yym1343
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1342), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1336)
		} // end switch yys1336
	} // end for yyj1336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1344 int
	var yyb1344 bool
	var yyhl1344 bool = l >= 0
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1346 := &x.Port
		yym1347 := z.DecBinary()
		_ = yym1347
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1346) {
		} else if !yym1347 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1346)
		} else {
			z.DecFallback(yyv1346, false)
		}
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1350 := &x.HTTPHeaders
		yym1351 := z.DecBinary()
		_ = yym1351
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1350), d)
		}
	}
	for {
		yyj1344++
		if yyhl1344 {
			yyb1344 = yyj1344 > l
		} else {
			yyb1344 = r.CheckBreak()
		}
		if yyb1344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1352 := z.EncBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1353 := z.DecBinary()
	_ = yym1353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1354 := z.EncBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1355 := !z.EncBinary()
			yy2arr1355 := z.EncBasicHandle().StructToArray
			var yyq1355 [1]bool
			_, _, _ = yysep1355, yyq1355, yy2arr1355
			const yyr1355 bool = false
			var yynn1355 int
			if yyr1355 || yy2arr1355 {
				r.EncodeArrayStart(1)
			} else {
				yynn1355 = 1
				for _, b := range yyq1355 {
					if b {
						yynn1355++
					}
				}
				r.EncodeMapStart(yynn1355)
				yynn1355 = 0
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1357 := &x.Port
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1357) {
				} else if !yym1358 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1357)
				} else {
					z.EncFallback(yy1357)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1359 := &x.Port
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1359) {
				} else if !yym1360 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1359)
				} else {
					z.EncFallback(yy1359)
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1364 := &x.Port
				yym1365 := z.DecBinary()
				_ = yym1365
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1364) {
				} else if !yym1365 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1364)
				} else {
					z.DecFallback(yyv1364, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1366 int
	var yyb1366 bool
	var yyhl1366 bool = l >= 0
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1367 := &x.Port
		yym1368 := z.DecBinary()
		_ = yym1368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1367) {
		} else if !yym1368 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1367)
		} else {
			z.DecFallback(yyv1367, false)
		}
	}
	for {
		yyj1366++
		if yyhl1366 {
			yyb1366 = yyj1366 > l
		} else {
			yyb1366 = r.CheckBreak()
		}
		if yyb1366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1369 := z.EncBinary()
		_ = yym1369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1370 := !z.EncBinary()
			yy2arr1370 := z.EncBasicHandle().StructToArray
			var yyq1370 [1]bool
			_, _, _ = yysep1370, yyq1370, yy2arr1370
			const yyr1370 bool = false
			yyq1370[0] = len(x.Command) != 0
			var yynn1370 int
			if yyr1370 || yy2arr1370 {
				r.EncodeArrayStart(1)
			} else {
				yynn1370 = 0
				for _, b := range yyq1370 {
					if b {
						yynn1370++
					}
				}
				r.EncodeMapStart(yynn1370)
				yynn1370 = 0
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1372 := z.EncBinary()
						_ = yym1372
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1373 := z.EncBinary()
						_ = yym1373
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1377 := &x.Command
				yym1378 := z.DecBinary()
				_ = yym1378
				if false {
				} else {
					z.F.DecSliceStringX(yyv1377, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1380 := &x.Command
		yym1381 := z.DecBinary()
		_ = yym1381
		if false {
		} else {
			z.F.DecSliceStringX(yyv1380, false, d)
		}
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [8]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			yyq1383[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1383[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1383[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1383[3] = x.InitialDelaySeconds != 0
			yyq1383[4] = x.TimeoutSeconds != 0
			yyq1383[5] = x.PeriodSeconds != 0
			yyq1383[6] = x.SuccessThreshold != 0
			yyq1383[7] = x.FailureThreshold != 0
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(8)
			} else {
				yynn1383 = 0
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			var yyn1384 bool
			if x.Handler.Exec == nil {
				yyn1384 = true
				goto LABEL1384
			}
		LABEL1384:
			if yyr1383 || yy2arr1383 {
				if yyn1384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1384 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1385 bool
			if x.Handler.HTTPGet == nil {
				yyn1385 = true
				goto LABEL1385
			}
		LABEL1385:
			if yyr1383 || yy2arr1383 {
				if yyn1385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1385 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1386 bool
			if x.Handler.TCPSocket == nil {
				yyn1386 = true
				goto LABEL1386
			}
		LABEL1386:
			if yyr1383 || yy2arr1383 {
				if yyn1386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1383[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1383[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1386 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[3] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[4] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[5] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[6] {
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1383[7] {
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1383[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1413 int
	var yyb1413 bool
	var yyhl1413 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1413++
	if yyhl1413 {
		yyb1413 = yyj1413 > l
	} else {
		yyb1413 = r.CheckBreak()
	}
	if yyb1413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1413++
		if yyhl1413 {
			yyb1413 = yyj1413 > l
		} else {
			yyb1413 = r.CheckBreak()
		}
		if yyb1413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1422 := z.EncBinary()
	_ = yym1422
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1423 := z.DecBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1424 := z.EncBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1425 := z.DecBinary()
	_ = yym1425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1426 := z.EncBinary()
		_ = yym1426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1427 := !z.EncBinary()
			yy2arr1427 := z.EncBasicHandle().StructToArray
			var yyq1427 [2]bool
			_, _, _ = yysep1427, yyq1427, yy2arr1427
			const yyr1427 bool = false
			yyq1427[0] = len(x.Add) != 0
			yyq1427[1] = len(x.Drop) != 0
			var yynn1427 int
			if yyr1427 || yy2arr1427 {
				r.EncodeArrayStart(2)
			} else {
				yynn1427 = 0
				for _, b := range yyq1427 {
					if b {
						yynn1427++
					}
				}
				r.EncodeMapStart(yynn1427)
				yynn1427 = 0
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1429 := z.EncBinary()
						_ = yym1429
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1427[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1433 := z.EncBinary()
						_ = yym1433
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1427 || yy2arr1427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1434 := z.DecBinary()
	_ = yym1434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1435 := r.ContainerType()
		if yyct1435 == codecSelferValueTypeMap1234 {
			yyl1435 := r.ReadMapStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1435, d)
			}
		} else if yyct1435 == codecSelferValueTypeArray1234 {
			yyl1435 := r.ReadArrayStart()
			if yyl1435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1436Slc
	var yyhl1436 bool = l >= 0
	for yyj1436 := 0; ; yyj1436++ {
		if yyhl1436 {
			if yyj1436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1436Slc = r.DecodeBytes(yys1436Slc, true, true)
		yys1436 := string(yys1436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1436 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1437 := &x.Add
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1437), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1439 := &x.Drop
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1439), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1436)
		} // end switch yys1436
	} // end for yyj1436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1442 := &x.Add
		yym1443 := z.DecBinary()
		_ = yym1443
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1442), d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1444 := &x.Drop
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1444), d)
		}
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1446 := z.EncBinary()
		_ = yym1446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1447 := !z.EncBinary()
			yy2arr1447 := z.EncBasicHandle().StructToArray
			var yyq1447 [2]bool
			_, _, _ = yysep1447, yyq1447, yy2arr1447
			const yyr1447 bool = false
			yyq1447[0] = len(x.Limits) != 0
			yyq1447[1] = len(x.Requests) != 0
			var yynn1447 int
			if yyr1447 || yy2arr1447 {
				r.EncodeArrayStart(2)
			} else {
				yynn1447 = 0
				for _, b := range yyq1447 {
					if b {
						yynn1447++
					}
				}
				r.EncodeMapStart(yynn1447)
				yynn1447 = 0
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1447[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1447[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1447 || yy2arr1447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1450 := z.DecBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1451 := r.ContainerType()
		if yyct1451 == codecSelferValueTypeMap1234 {
			yyl1451 := r.ReadMapStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1451, d)
			}
		} else if yyct1451 == codecSelferValueTypeArray1234 {
			yyl1451 := r.ReadArrayStart()
			if yyl1451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1452Slc
	var yyhl1452 bool = l >= 0
	for yyj1452 := 0; ; yyj1452++ {
		if yyhl1452 {
			if yyj1452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1452Slc = r.DecodeBytes(yys1452Slc, true, true)
		yys1452 := string(yys1452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1452 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1453 := &x.Limits
				yyv1453.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1454 := &x.Requests
				yyv1454.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1452)
		} // end switch yys1452
	} // end for yyj1452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1455 int
	var yyb1455 bool
	var yyhl1455 bool = l >= 0
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1456 := &x.Limits
		yyv1456.CodecDecodeSelf(d)
	}
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1457 := &x.Requests
		yyv1457.CodecDecodeSelf(d)
	}
	for {
		yyj1455++
		if yyhl1455 {
			yyb1455 = yyj1455 > l
		} else {
			yyb1455 = r.CheckBreak()
		}
		if yyb1455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1458 := z.EncBinary()
		_ = yym1458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1459 := !z.EncBinary()
			yy2arr1459 := z.EncBasicHandle().StructToArray
			var yyq1459 [18]bool
			_, _, _ = yysep1459, yyq1459, yy2arr1459
			const yyr1459 bool = false
			yyq1459[1] = x.Image != ""
			yyq1459[2] = len(x.Command) != 0
			yyq1459[3] = len(x.Args) != 0
			yyq1459[4] = x.WorkingDir != ""
			yyq1459[5] = len(x.Ports) != 0
			yyq1459[6] = len(x.Env) != 0
			yyq1459[7] = true
			yyq1459[8] = len(x.VolumeMounts) != 0
			yyq1459[9] = x.LivenessProbe != nil
			yyq1459[10] = x.ReadinessProbe != nil
			yyq1459[11] = x.Lifecycle != nil
			yyq1459[12] = x.TerminationMessagePath != ""
			yyq1459[13] = x.ImagePullPolicy != ""
			yyq1459[14] = x.SecurityContext != nil
			yyq1459[15] = x.Stdin != false
			yyq1459[16] = x.StdinOnce != false
			yyq1459[17] = x.TTY != false
			var yynn1459 int
			if yyr1459 || yy2arr1459 {
				r.EncodeArrayStart(18)
			} else {
				yynn1459 = 1
				for _, b := range yyq1459 {
					if b {
						yynn1459++
					}
				}
				r.EncodeMapStart(yynn1459)
				yynn1459 = 0
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1461 := z.EncBinary()
				_ = yym1461
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1462 := z.EncBinary()
				_ = yym1462
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[1] {
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[4] {
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1477 := z.EncBinary()
						_ = yym1477
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1479 := z.EncBinary()
						_ = yym1479
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1480 := z.EncBinary()
						_ = yym1480
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[7] {
					yy1482 := &x.Resources
					yy1482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1483 := &x.Resources
					yy1483.CodecEncodeSelf(e)
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1485 := z.EncBinary()
						_ = yym1485
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1486 := z.EncBinary()
						_ = yym1486
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[12] {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1459[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1459[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[15] {
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[16] {
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1459[17] {
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1459[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1459 || yy2arr1459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1504 := z.DecBinary()
	_ = yym1504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1505 := r.ContainerType()
		if yyct1505 == codecSelferValueTypeMap1234 {
			yyl1505 := r.ReadMapStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1505, d)
			}
		} else if yyct1505 == codecSelferValueTypeArray1234 {
			yyl1505 := r.ReadArrayStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1506Slc
	var yyhl1506 bool = l >= 0
	for yyj1506 := 0; ; yyj1506++ {
		if yyhl1506 {
			if yyj1506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1506Slc = r.DecodeBytes(yys1506Slc, true, true)
		yys1506 := string(yys1506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1506 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1509 := &x.Command
				yym1510 := z.DecBinary()
				_ = yym1510
				if false {
				} else {
					z.F.DecSliceStringX(yyv1509, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1511 := &x.Args
				yym1512 := z.DecBinary()
				_ = yym1512
				if false {
				} else {
					z.F.DecSliceStringX(yyv1511, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1514 := &x.Ports
				yym1515 := z.DecBinary()
				_ = yym1515
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1514), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1516 := &x.Env
				yym1517 := z.DecBinary()
				_ = yym1517
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1516), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1518 := &x.Resources
				yyv1518.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1519 := &x.VolumeMounts
				yym1520 := z.DecBinary()
				_ = yym1520
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1519), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1506)
		} // end switch yys1506
	} // end for yyj1506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1530 int
	var yyb1530 bool
	var yyhl1530 bool = l >= 0
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1533 := &x.Command
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			z.F.DecSliceStringX(yyv1533, false, d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1535 := &x.Args
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			z.F.DecSliceStringX(yyv1535, false, d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1538 := &x.Ports
		yym1539 := z.DecBinary()
		_ = yym1539
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1538), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1540 := &x.Env
		yym1541 := z.DecBinary()
		_ = yym1541
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1540), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1542 := &x.Resources
		yyv1542.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1543 := &x.VolumeMounts
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1543), d)
		}
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1530++
	if yyhl1530 {
		yyb1530 = yyj1530 > l
	} else {
		yyb1530 = r.CheckBreak()
	}
	if yyb1530 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1530++
		if yyhl1530 {
			yyb1530 = yyj1530 > l
		} else {
			yyb1530 = r.CheckBreak()
		}
		if yyb1530 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1530-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1554 := z.EncBinary()
		_ = yym1554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1555 := !z.EncBinary()
			yy2arr1555 := z.EncBasicHandle().StructToArray
			var yyq1555 [3]bool
			_, _, _ = yysep1555, yyq1555, yy2arr1555
			const yyr1555 bool = false
			yyq1555[0] = x.Exec != nil
			yyq1555[1] = x.HTTPGet != nil
			yyq1555[2] = x.TCPSocket != nil
			var yynn1555 int
			if yyr1555 || yy2arr1555 {
				r.EncodeArrayStart(3)
			} else {
				yynn1555 = 0
				for _, b := range yyq1555 {
					if b {
						yynn1555++
					}
				}
				r.EncodeMapStart(yynn1555)
				yynn1555 = 0
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1559 := z.DecBinary()
	_ = yym1559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1560 := r.ContainerType()
		if yyct1560 == codecSelferValueTypeMap1234 {
			yyl1560 := r.ReadMapStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1560, d)
			}
		} else if yyct1560 == codecSelferValueTypeArray1234 {
			yyl1560 := r.ReadArrayStart()
			if yyl1560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1561Slc
	var yyhl1561 bool = l >= 0
	for yyj1561 := 0; ; yyj1561++ {
		if yyhl1561 {
			if yyj1561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1561Slc = r.DecodeBytes(yys1561Slc, true, true)
		yys1561 := string(yys1561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1561 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1561)
		} // end switch yys1561
	} // end for yyj1561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1569 := z.EncBinary()
		_ = yym1569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1570 := !z.EncBinary()
			yy2arr1570 := z.EncBasicHandle().StructToArray
			var yyq1570 [2]bool
			_, _, _ = yysep1570, yyq1570, yy2arr1570
			const yyr1570 bool = false
			yyq1570[0] = x.PostStart != nil
			yyq1570[1] = x.PreStop != nil
			var yynn1570 int
			if yyr1570 || yy2arr1570 {
				r.EncodeArrayStart(2)
			} else {
				yynn1570 = 0
				for _, b := range yyq1570 {
					if b {
						yynn1570++
					}
				}
				r.EncodeMapStart(yynn1570)
				yynn1570 = 0
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1570[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1570 || yy2arr1570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1573 := z.DecBinary()
	_ = yym1573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1574 := r.ContainerType()
		if yyct1574 == codecSelferValueTypeMap1234 {
			yyl1574 := r.ReadMapStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1574, d)
			}
		} else if yyct1574 == codecSelferValueTypeArray1234 {
			yyl1574 := r.ReadArrayStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1575Slc
	var yyhl1575 bool = l >= 0
	for yyj1575 := 0; ; yyj1575++ {
		if yyhl1575 {
			if yyj1575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1575Slc = r.DecodeBytes(yys1575Slc, true, true)
		yys1575 := string(yys1575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1575 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1575)
		} // end switch yys1575
	} // end for yyj1575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1578 int
	var yyb1578 bool
	var yyhl1578 bool = l >= 0
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1578++
	if yyhl1578 {
		yyb1578 = yyj1578 > l
	} else {
		yyb1578 = r.CheckBreak()
	}
	if yyb1578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1578++
		if yyhl1578 {
			yyb1578 = yyj1578 > l
		} else {
			yyb1578 = r.CheckBreak()
		}
		if yyb1578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1581 := z.EncBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1583 := z.EncBinary()
		_ = yym1583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1584 := !z.EncBinary()
			yy2arr1584 := z.EncBasicHandle().StructToArray
			var yyq1584 [2]bool
			_, _, _ = yysep1584, yyq1584, yy2arr1584
			const yyr1584 bool = false
			yyq1584[0] = x.Reason != ""
			yyq1584[1] = x.Message != ""
			var yynn1584 int
			if yyr1584 || yy2arr1584 {
				r.EncodeArrayStart(2)
			} else {
				yynn1584 = 0
				for _, b := range yyq1584 {
					if b {
						yynn1584++
					}
				}
				r.EncodeMapStart(yynn1584)
				yynn1584 = 0
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[0] {
					yym1586 := z.EncBinary()
					_ = yym1586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[1] {
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1592 := r.ContainerType()
		if yyct1592 == codecSelferValueTypeMap1234 {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if yyct1592 == codecSelferValueTypeArray1234 {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1593 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1599 := z.EncBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1600 := !z.EncBinary()
			yy2arr1600 := z.EncBasicHandle().StructToArray
			var yyq1600 [1]bool
			_, _, _ = yysep1600, yyq1600, yy2arr1600
			const yyr1600 bool = false
			yyq1600[0] = true
			var yynn1600 int
			if yyr1600 || yy2arr1600 {
				r.EncodeArrayStart(1)
			} else {
				yynn1600 = 0
				for _, b := range yyq1600 {
					if b {
						yynn1600++
					}
				}
				r.EncodeMapStart(yynn1600)
				yynn1600 = 0
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[0] {
					yy1602 := &x.StartedAt
					yym1603 := z.EncBinary()
					_ = yym1603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1602) {
					} else if yym1603 {
						z.EncBinaryMarshal(yy1602)
					} else if !yym1603 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1602)
					} else {
						z.EncFallback(yy1602)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1604 := &x.StartedAt
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1604) {
					} else if yym1605 {
						z.EncBinaryMarshal(yy1604)
					} else if !yym1605 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1604)
					} else {
						z.EncFallback(yy1604)
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1607 := r.ContainerType()
		if yyct1607 == codecSelferValueTypeMap1234 {
			yyl1607 := r.ReadMapStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1607, d)
			}
		} else if yyct1607 == codecSelferValueTypeArray1234 {
			yyl1607 := r.ReadArrayStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1608Slc
	var yyhl1608 bool = l >= 0
	for yyj1608 := 0; ; yyj1608++ {
		if yyhl1608 {
			if yyj1608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1608Slc = r.DecodeBytes(yys1608Slc, true, true)
		yys1608 := string(yys1608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1608 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1609 := &x.StartedAt
				yym1610 := z.DecBinary()
				_ = yym1610
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1609) {
				} else if yym1610 {
					z.DecBinaryUnmarshal(yyv1609)
				} else if !yym1610 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1609)
				} else {
					z.DecFallback(yyv1609, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1608)
		} // end switch yys1608
	} // end for yyj1608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1612 := &x.StartedAt
		yym1613 := z.DecBinary()
		_ = yym1613
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1612) {
		} else if yym1613 {
			z.DecBinaryUnmarshal(yyv1612)
		} else if !yym1613 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1612)
		} else {
			z.DecFallback(yyv1612, false)
		}
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1614 := z.EncBinary()
		_ = yym1614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1615 := !z.EncBinary()
			yy2arr1615 := z.EncBasicHandle().StructToArray
			var yyq1615 [7]bool
			_, _, _ = yysep1615, yyq1615, yy2arr1615
			const yyr1615 bool = false
			yyq1615[1] = x.Signal != 0
			yyq1615[2] = x.Reason != ""
			yyq1615[3] = x.Message != ""
			yyq1615[4] = true
			yyq1615[5] = true
			yyq1615[6] = x.ContainerID != ""
			var yynn1615 int
			if yyr1615 || yy2arr1615 {
				r.EncodeArrayStart(7)
			} else {
				yynn1615 = 1
				for _, b := range yyq1615 {
					if b {
						yynn1615++
					}
				}
				r.EncodeMapStart(yynn1615)
				yynn1615 = 0
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1617 := z.EncBinary()
				_ = yym1617
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1618 := z.EncBinary()
				_ = yym1618
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[1] {
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[2] {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[3] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[4] {
					yy1629 := &x.StartedAt
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1629) {
					} else if yym1630 {
						z.EncBinaryMarshal(yy1629)
					} else if !yym1630 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1629)
					} else {
						z.EncFallback(yy1629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1631 := &x.StartedAt
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1631) {
					} else if yym1632 {
						z.EncBinaryMarshal(yy1631)
					} else if !yym1632 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1631)
					} else {
						z.EncFallback(yy1631)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[5] {
					yy1634 := &x.FinishedAt
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1634) {
					} else if yym1635 {
						z.EncBinaryMarshal(yy1634)
					} else if !yym1635 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1634)
					} else {
						z.EncFallback(yy1634)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1636 := &x.FinishedAt
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1636) {
					} else if yym1637 {
						z.EncBinaryMarshal(yy1636)
					} else if !yym1637 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1636)
					} else {
						z.EncFallback(yy1636)
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[6] {
					yym1639 := z.EncBinary()
					_ = yym1639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1615[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1641 := z.DecBinary()
	_ = yym1641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1642 := r.ContainerType()
		if yyct1642 == codecSelferValueTypeMap1234 {
			yyl1642 := r.ReadMapStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1642, d)
			}
		} else if yyct1642 == codecSelferValueTypeArray1234 {
			yyl1642 := r.ReadArrayStart()
			if yyl1642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1643Slc
	var yyhl1643 bool = l >= 0
	for yyj1643 := 0; ; yyj1643++ {
		if yyhl1643 {
			if yyj1643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1643Slc = r.DecodeBytes(yys1643Slc, true, true)
		yys1643 := string(yys1643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1643 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1648 := &x.StartedAt
				yym1649 := z.DecBinary()
				_ = yym1649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1648) {
				} else if yym1649 {
					z.DecBinaryUnmarshal(yyv1648)
				} else if !yym1649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1648)
				} else {
					z.DecFallback(yyv1648, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1650 := &x.FinishedAt
				yym1651 := z.DecBinary()
				_ = yym1651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1650) {
				} else if yym1651 {
					z.DecBinaryUnmarshal(yyv1650)
				} else if !yym1651 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1650)
				} else {
					z.DecFallback(yyv1650, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1643)
		} // end switch yys1643
	} // end for yyj1643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1653 int
	var yyb1653 bool
	var yyhl1653 bool = l >= 0
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1658 := &x.StartedAt
		yym1659 := z.DecBinary()
		_ = yym1659
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1658) {
		} else if yym1659 {
			z.DecBinaryUnmarshal(yyv1658)
		} else if !yym1659 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1658)
		} else {
			z.DecFallback(yyv1658, false)
		}
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1660 := &x.FinishedAt
		yym1661 := z.DecBinary()
		_ = yym1661
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1660) {
		} else if yym1661 {
			z.DecBinaryUnmarshal(yyv1660)
		} else if !yym1661 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1660)
		} else {
			z.DecFallback(yyv1660, false)
		}
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1653++
		if yyhl1653 {
			yyb1653 = yyj1653 > l
		} else {
			yyb1653 = r.CheckBreak()
		}
		if yyb1653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1663 := z.EncBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1664 := !z.EncBinary()
			yy2arr1664 := z.EncBasicHandle().StructToArray
			var yyq1664 [3]bool
			_, _, _ = yysep1664, yyq1664, yy2arr1664
			const yyr1664 bool = false
			yyq1664[0] = x.Waiting != nil
			yyq1664[1] = x.Running != nil
			yyq1664[2] = x.Terminated != nil
			var yynn1664 int
			if yyr1664 || yy2arr1664 {
				r.EncodeArrayStart(3)
			} else {
				yynn1664 = 0
				for _, b := range yyq1664 {
					if b {
						yynn1664++
					}
				}
				r.EncodeMapStart(yynn1664)
				yynn1664 = 0
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1674 int
	var yyb1674 bool
	var yyhl1674 bool = l >= 0
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1674++
		if yyhl1674 {
			yyb1674 = yyj1674 > l
		} else {
			yyb1674 = r.CheckBreak()
		}
		if yyb1674 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1674-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [8]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[1] = true
			yyq1679[2] = true
			yyq1679[7] = x.ContainerID != ""
			var yynn1679 int
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(8)
			} else {
				yynn1679 = 5
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
				yynn1679 = 0
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1682 := z.EncBinary()
				_ = yym1682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[1] {
					yy1684 := &x.State
					yy1684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1685 := &x.State
					yy1685.CodecEncodeSelf(e)
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[2] {
					yy1687 := &x.LastTerminationState
					yy1687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1688 := &x.LastTerminationState
					yy1688.CodecEncodeSelf(e)
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1690 := z.EncBinary()
				_ = yym1690
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1691 := z.EncBinary()
				_ = yym1691
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1693 := z.EncBinary()
				_ = yym1693
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1694 := z.EncBinary()
				_ = yym1694
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1696 := z.EncBinary()
				_ = yym1696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1697 := z.EncBinary()
				_ = yym1697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1699 := z.EncBinary()
				_ = yym1699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1700 := z.EncBinary()
				_ = yym1700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[7] {
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1704 := z.DecBinary()
	_ = yym1704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1705 := r.ContainerType()
		if yyct1705 == codecSelferValueTypeMap1234 {
			yyl1705 := r.ReadMapStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1705, d)
			}
		} else if yyct1705 == codecSelferValueTypeArray1234 {
			yyl1705 := r.ReadArrayStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1706Slc
	var yyhl1706 bool = l >= 0
	for yyj1706 := 0; ; yyj1706++ {
		if yyhl1706 {
			if yyj1706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1706Slc = r.DecodeBytes(yys1706Slc, true, true)
		yys1706 := string(yys1706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1706 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1708 := &x.State
				yyv1708.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1709 := &x.LastTerminationState
				yyv1709.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1706)
		} // end switch yys1706
	} // end for yyj1706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1715 int
	var yyb1715 bool
	var yyhl1715 bool = l >= 0
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1717 := &x.State
		yyv1717.CodecDecodeSelf(d)
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1718 := &x.LastTerminationState
		yyv1718.CodecDecodeSelf(d)
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1715++
		if yyhl1715 {
			yyb1715 = yyj1715 > l
		} else {
			yyb1715 = r.CheckBreak()
		}
		if yyb1715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1724 := z.EncBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1725 := z.DecBinary()
	_ = yym1725
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1726 := z.EncBinary()
	_ = yym1726
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1727 := z.DecBinary()
	_ = yym1727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1728 := z.EncBinary()
		_ = yym1728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1729 := !z.EncBinary()
			yy2arr1729 := z.EncBasicHandle().StructToArray
			var yyq1729 [6]bool
			_, _, _ = yysep1729, yyq1729, yy2arr1729
			const yyr1729 bool = false
			yyq1729[2] = true
			yyq1729[3] = true
			yyq1729[4] = x.Reason != ""
			yyq1729[5] = x.Message != ""
			var yynn1729 int
			if yyr1729 || yy2arr1729 {
				r.EncodeArrayStart(6)
			} else {
				yynn1729 = 2
				for _, b := range yyq1729 {
					if b {
						yynn1729++
					}
				}
				r.EncodeMapStart(yynn1729)
				yynn1729 = 0
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[2] {
					yy1733 := &x.LastProbeTime
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1733) {
					} else if yym1734 {
						z.EncBinaryMarshal(yy1733)
					} else if !yym1734 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1733)
					} else {
						z.EncFallback(yy1733)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1735 := &x.LastProbeTime
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1735) {
					} else if yym1736 {
						z.EncBinaryMarshal(yy1735)
					} else if !yym1736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1735)
					} else {
						z.EncFallback(yy1735)
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[3] {
					yy1738 := &x.LastTransitionTime
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1738) {
					} else if yym1739 {
						z.EncBinaryMarshal(yy1738)
					} else if !yym1739 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1738)
					} else {
						z.EncFallback(yy1738)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1729[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1740 := &x.LastTransitionTime
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1740) {
					} else if yym1741 {
						z.EncBinaryMarshal(yy1740)
					} else if !yym1741 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1740)
					} else {
						z.EncFallback(yy1740)
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[4] {
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1729[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1729[5] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1729[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1753 := &x.LastProbeTime
				yym1754 := z.DecBinary()
				_ = yym1754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1753) {
				} else if yym1754 {
					z.DecBinaryUnmarshal(yyv1753)
				} else if !yym1754 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1753)
				} else {
					z.DecFallback(yyv1753, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1755 := &x.LastTransitionTime
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1755) {
				} else if yym1756 {
					z.DecBinaryUnmarshal(yyv1755)
				} else if !yym1756 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1755)
				} else {
					z.DecFallback(yyv1755, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1759 int
	var yyb1759 bool
	var yyhl1759 bool = l >= 0
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1762 := &x.LastProbeTime
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1762) {
		} else if yym1763 {
			z.DecBinaryUnmarshal(yyv1762)
		} else if !yym1763 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1762)
		} else {
			z.DecFallback(yyv1762, false)
		}
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1764 := &x.LastTransitionTime
		yym1765 := z.DecBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1764) {
		} else if yym1765 {
			z.DecBinaryUnmarshal(yyv1764)
		} else if !yym1765 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1764)
		} else {
			z.DecFallback(yyv1764, false)
		}
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1759++
	if yyhl1759 {
		yyb1759 = yyj1759 > l
	} else {
		yyb1759 = r.CheckBreak()
	}
	if yyb1759 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1759++
		if yyhl1759 {
			yyb1759 = yyj1759 > l
		} else {
			yyb1759 = r.CheckBreak()
		}
		if yyb1759 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1759-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1768 := z.EncBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1769 := z.DecBinary()
	_ = yym1769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1770 := z.EncBinary()
	_ = yym1770
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1771 := z.DecBinary()
	_ = yym1771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1772 := z.EncBinary()
		_ = yym1772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1773 := !z.EncBinary()
			yy2arr1773 := z.EncBasicHandle().StructToArray
			var yyq1773 [1]bool
			_, _, _ = yysep1773, yyq1773, yy2arr1773
			const yyr1773 bool = false
			var yynn1773 int
			if yyr1773 || yy2arr1773 {
				r.EncodeArrayStart(1)
			} else {
				yynn1773 = 1
				for _, b := range yyq1773 {
					if b {
						yynn1773++
					}
				}
				r.EncodeMapStart(yynn1773)
				yynn1773 = 0
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1775 := z.EncBinary()
					_ = yym1775
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1773 || yy2arr1773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1777 := z.DecBinary()
	_ = yym1777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1778 := r.ContainerType()
		if yyct1778 == codecSelferValueTypeMap1234 {
			yyl1778 := r.ReadMapStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1778, d)
			}
		} else if yyct1778 == codecSelferValueTypeArray1234 {
			yyl1778 := r.ReadArrayStart()
			if yyl1778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1779Slc
	var yyhl1779 bool = l >= 0
	for yyj1779 := 0; ; yyj1779++ {
		if yyhl1779 {
			if yyj1779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1779Slc = r.DecodeBytes(yys1779Slc, true, true)
		yys1779 := string(yys1779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1779 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1780 := &x.NodeSelectorTerms
				yym1781 := z.DecBinary()
				_ = yym1781
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1780), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1779)
		} // end switch yys1779
	} // end for yyj1779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1782 int
	var yyb1782 bool
	var yyhl1782 bool = l >= 0
	yyj1782++
	if yyhl1782 {
		yyb1782 = yyj1782 > l
	} else {
		yyb1782 = r.CheckBreak()
	}
	if yyb1782 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1783 := &x.NodeSelectorTerms
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1783), d)
		}
	}
	for {
		yyj1782++
		if yyhl1782 {
			yyb1782 = yyj1782 > l
		} else {
			yyb1782 = r.CheckBreak()
		}
		if yyb1782 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1782-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1785 := z.EncBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1786 := !z.EncBinary()
			yy2arr1786 := z.EncBasicHandle().StructToArray
			var yyq1786 [1]bool
			_, _, _ = yysep1786, yyq1786, yy2arr1786
			const yyr1786 bool = false
			var yynn1786 int
			if yyr1786 || yy2arr1786 {
				r.EncodeArrayStart(1)
			} else {
				yynn1786 = 1
				for _, b := range yyq1786 {
					if b {
						yynn1786++
					}
				}
				r.EncodeMapStart(yynn1786)
				yynn1786 = 0
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1786 || yy2arr1786 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1790 := z.DecBinary()
	_ = yym1790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1791 := r.ContainerType()
		if yyct1791 == codecSelferValueTypeMap1234 {
			yyl1791 := r.ReadMapStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1791, d)
			}
		} else if yyct1791 == codecSelferValueTypeArray1234 {
			yyl1791 := r.ReadArrayStart()
			if yyl1791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1792Slc
	var yyhl1792 bool = l >= 0
	for yyj1792 := 0; ; yyj1792++ {
		if yyhl1792 {
			if yyj1792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1792Slc = r.DecodeBytes(yys1792Slc, true, true)
		yys1792 := string(yys1792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1792 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1793 := &x.MatchExpressions
				yym1794 := z.DecBinary()
				_ = yym1794
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1793), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1792)
		} // end switch yys1792
	} // end for yyj1792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1795 int
	var yyb1795 bool
	var yyhl1795 bool = l >= 0
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1796 := &x.MatchExpressions
		yym1797 := z.DecBinary()
		_ = yym1797
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1796), d)
		}
	}
	for {
		yyj1795++
		if yyhl1795 {
			yyb1795 = yyj1795 > l
		} else {
			yyb1795 = r.CheckBreak()
		}
		if yyb1795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1798 := z.EncBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1799 := !z.EncBinary()
			yy2arr1799 := z.EncBasicHandle().StructToArray
			var yyq1799 [3]bool
			_, _, _ = yysep1799, yyq1799, yy2arr1799
			const yyr1799 bool = false
			yyq1799[2] = len(x.Values) != 0
			var yynn1799 int
			if yyr1799 || yy2arr1799 {
				r.EncodeArrayStart(3)
			} else {
				yynn1799 = 2
				for _, b := range yyq1799 {
					if b {
						yynn1799++
					}
				}
				r.EncodeMapStart(yynn1799)
				yynn1799 = 0
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1801 := z.EncBinary()
				_ = yym1801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1802 := z.EncBinary()
				_ = yym1802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1799[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1805 := z.EncBinary()
						_ = yym1805
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1799[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1806 := z.EncBinary()
						_ = yym1806
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1799 || yy2arr1799 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1807 := z.DecBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1808 := r.ContainerType()
		if yyct1808 == codecSelferValueTypeMap1234 {
			yyl1808 := r.ReadMapStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1808, d)
			}
		} else if yyct1808 == codecSelferValueTypeArray1234 {
			yyl1808 := r.ReadArrayStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1809Slc
	var yyhl1809 bool = l >= 0
	for yyj1809 := 0; ; yyj1809++ {
		if yyhl1809 {
			if yyj1809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1809Slc = r.DecodeBytes(yys1809Slc, true, true)
		yys1809 := string(yys1809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1809 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1812 := &x.Values
				yym1813 := z.DecBinary()
				_ = yym1813
				if false {
				} else {
					z.F.DecSliceStringX(yyv1812, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1809)
		} // end switch yys1809
	} // end for yyj1809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1814 int
	var yyb1814 bool
	var yyhl1814 bool = l >= 0
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1817 := &x.Values
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			z.F.DecSliceStringX(yyv1817, false, d)
		}
	}
	for {
		yyj1814++
		if yyhl1814 {
			yyb1814 = yyj1814 > l
		} else {
			yyb1814 = r.CheckBreak()
		}
		if yyb1814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1819 := z.EncBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1820 := z.DecBinary()
	_ = yym1820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1821 := z.EncBinary()
		_ = yym1821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1822 := !z.EncBinary()
			yy2arr1822 := z.EncBasicHandle().StructToArray
			var yyq1822 [3]bool
			_, _, _ = yysep1822, yyq1822, yy2arr1822
			const yyr1822 bool = false
			yyq1822[0] = x.NodeAffinity != nil
			yyq1822[1] = x.PodAffinity != nil
			yyq1822[2] = x.PodAntiAffinity != nil
			var yynn1822 int
			if yyr1822 || yy2arr1822 {
				r.EncodeArrayStart(3)
			} else {
				yynn1822 = 0
				for _, b := range yyq1822 {
					if b {
						yynn1822++
					}
				}
				r.EncodeMapStart(yynn1822)
				yynn1822 = 0
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1826 := z.DecBinary()
	_ = yym1826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1827 := r.ContainerType()
		if yyct1827 == codecSelferValueTypeMap1234 {
			yyl1827 := r.ReadMapStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1827, d)
			}
		} else if yyct1827 == codecSelferValueTypeArray1234 {
			yyl1827 := r.ReadArrayStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1828Slc
	var yyhl1828 bool = l >= 0
	for yyj1828 := 0; ; yyj1828++ {
		if yyhl1828 {
			if yyj1828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1828Slc = r.DecodeBytes(yys1828Slc, true, true)
		yys1828 := string(yys1828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1828 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1828)
		} // end switch yys1828
	} // end for yyj1828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1836 := z.EncBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1837 := !z.EncBinary()
			yy2arr1837 := z.EncBasicHandle().StructToArray
			var yyq1837 [2]bool
			_, _, _ = yysep1837, yyq1837, yy2arr1837
			const yyr1837 bool = false
			yyq1837[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1837[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1837 int
			if yyr1837 || yy2arr1837 {
				r.EncodeArrayStart(2)
			} else {
				yynn1837 = 0
				for _, b := range yyq1837 {
					if b {
						yynn1837++
					}
				}
				r.EncodeMapStart(yynn1837)
				yynn1837 = 0
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1837[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1840 := z.EncBinary()
						_ = yym1840
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1837[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1837[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1843 := z.EncBinary()
						_ = yym1843
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1837 || yy2arr1837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1844 := z.DecBinary()
	_ = yym1844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1845 := r.ContainerType()
		if yyct1845 == codecSelferValueTypeMap1234 {
			yyl1845 := r.ReadMapStart()
			if yyl1845 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1845, d)
			}
		} else if yyct1845 == codecSelferValueTypeArray1234 {
			yyl1845 := r.ReadArrayStart()
			if yyl1845 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1845, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1846Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1846Slc
	var yyhl1846 bool = l >= 0
	for yyj1846 := 0; ; yyj1846++ {
		if yyhl1846 {
			if yyj1846 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1846Slc = r.DecodeBytes(yys1846Slc, true, true)
		yys1846 := string(yys1846Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1846 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1847 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1847), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1849 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1850 := z.DecBinary()
				_ = yym1850
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1849), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1846)
		} // end switch yys1846
	} // end for yyj1846
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1851 int
	var yyb1851 bool
	var yyhl1851 bool = l >= 0
	yyj1851++
	if yyhl1851 {
		yyb1851 = yyj1851 > l
	} else {
		yyb1851 = r.CheckBreak()
	}
	if yyb1851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1852 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1853 := z.DecBinary()
		_ = yym1853
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1852), d)
		}
	}
	yyj1851++
	if yyhl1851 {
		yyb1851 = yyj1851 > l
	} else {
		yyb1851 = r.CheckBreak()
	}
	if yyb1851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1854 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1855 := z.DecBinary()
		_ = yym1855
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1854), d)
		}
	}
	for {
		yyj1851++
		if yyhl1851 {
			yyb1851 = yyj1851 > l
		} else {
			yyb1851 = r.CheckBreak()
		}
		if yyb1851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1856 := z.EncBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1857 := !z.EncBinary()
			yy2arr1857 := z.EncBasicHandle().StructToArray
			var yyq1857 [2]bool
			_, _, _ = yysep1857, yyq1857, yy2arr1857
			const yyr1857 bool = false
			yyq1857[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1857[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1857 int
			if yyr1857 || yy2arr1857 {
				r.EncodeArrayStart(2)
			} else {
				yynn1857 = 0
				for _, b := range yyq1857 {
					if b {
						yynn1857++
					}
				}
				r.EncodeMapStart(yynn1857)
				yynn1857 = 0
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1859 := z.EncBinary()
						_ = yym1859
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1860 := z.EncBinary()
						_ = yym1860
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1857[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1862 := z.EncBinary()
						_ = yym1862
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1857[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1863 := z.EncBinary()
						_ = yym1863
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1857 || yy2arr1857 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1864 := z.DecBinary()
	_ = yym1864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1865 := r.ContainerType()
		if yyct1865 == codecSelferValueTypeMap1234 {
			yyl1865 := r.ReadMapStart()
			if yyl1865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1865, d)
			}
		} else if yyct1865 == codecSelferValueTypeArray1234 {
			yyl1865 := r.ReadArrayStart()
			if yyl1865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1866Slc
	var yyhl1866 bool = l >= 0
	for yyj1866 := 0; ; yyj1866++ {
		if yyhl1866 {
			if yyj1866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1866Slc = r.DecodeBytes(yys1866Slc, true, true)
		yys1866 := string(yys1866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1866 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1867 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1868 := z.DecBinary()
				_ = yym1868
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1867), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1869 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1866)
		} // end switch yys1866
	} // end for yyj1866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1871 int
	var yyb1871 bool
	var yyhl1871 bool = l >= 0
	yyj1871++
	if yyhl1871 {
		yyb1871 = yyj1871 > l
	} else {
		yyb1871 = r.CheckBreak()
	}
	if yyb1871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1872 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1873 := z.DecBinary()
		_ = yym1873
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1872), d)
		}
	}
	yyj1871++
	if yyhl1871 {
		yyb1871 = yyj1871 > l
	} else {
		yyb1871 = r.CheckBreak()
	}
	if yyb1871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1874), d)
		}
	}
	for {
		yyj1871++
		if yyhl1871 {
			yyb1871 = yyj1871 > l
		} else {
			yyb1871 = r.CheckBreak()
		}
		if yyb1871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1876 := z.EncBinary()
		_ = yym1876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1877 := !z.EncBinary()
			yy2arr1877 := z.EncBasicHandle().StructToArray
			var yyq1877 [2]bool
			_, _, _ = yysep1877, yyq1877, yy2arr1877
			const yyr1877 bool = false
			var yynn1877 int
			if yyr1877 || yy2arr1877 {
				r.EncodeArrayStart(2)
			} else {
				yynn1877 = 2
				for _, b := range yyq1877 {
					if b {
						yynn1877++
					}
				}
				r.EncodeMapStart(yynn1877)
				yynn1877 = 0
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1879 := z.EncBinary()
				_ = yym1879
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1880 := z.EncBinary()
				_ = yym1880
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1882 := &x.PodAffinityTerm
				yy1882.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1883 := &x.PodAffinityTerm
				yy1883.CodecEncodeSelf(e)
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1884 := z.DecBinary()
	_ = yym1884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1885 := r.ContainerType()
		if yyct1885 == codecSelferValueTypeMap1234 {
			yyl1885 := r.ReadMapStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1885, d)
			}
		} else if yyct1885 == codecSelferValueTypeArray1234 {
			yyl1885 := r.ReadArrayStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1886Slc
	var yyhl1886 bool = l >= 0
	for yyj1886 := 0; ; yyj1886++ {
		if yyhl1886 {
			if yyj1886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1886Slc = r.DecodeBytes(yys1886Slc, true, true)
		yys1886 := string(yys1886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1886 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1888 := &x.PodAffinityTerm
				yyv1888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1886)
		} // end switch yys1886
	} // end for yyj1886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1889 int
	var yyb1889 bool
	var yyhl1889 bool = l >= 0
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1891 := &x.PodAffinityTerm
		yyv1891.CodecDecodeSelf(d)
	}
	for {
		yyj1889++
		if yyhl1889 {
			yyb1889 = yyj1889 > l
		} else {
			yyb1889 = r.CheckBreak()
		}
		if yyb1889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1892 := z.EncBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1893 := !z.EncBinary()
			yy2arr1893 := z.EncBasicHandle().StructToArray
			var yyq1893 [3]bool
			_, _, _ = yysep1893, yyq1893, yy2arr1893
			const yyr1893 bool = false
			yyq1893[0] = x.LabelSelector != nil
			yyq1893[2] = x.TopologyKey != ""
			var yynn1893 int
			if yyr1893 || yy2arr1893 {
				r.EncodeArrayStart(3)
			} else {
				yynn1893 = 1
				for _, b := range yyq1893 {
					if b {
						yynn1893++
					}
				}
				r.EncodeMapStart(yynn1893)
				yynn1893 = 0
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1893[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[2] {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1893[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1903 := z.DecBinary()
	_ = yym1903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1904 := r.ContainerType()
		if yyct1904 == codecSelferValueTypeMap1234 {
			yyl1904 := r.ReadMapStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1904, d)
			}
		} else if yyct1904 == codecSelferValueTypeArray1234 {
			yyl1904 := r.ReadArrayStart()
			if yyl1904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1905Slc
	var yyhl1905 bool = l >= 0
	for yyj1905 := 0; ; yyj1905++ {
		if yyhl1905 {
			if yyj1905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1905Slc = r.DecodeBytes(yys1905Slc, true, true)
		yys1905 := string(yys1905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1905 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1907 := z.DecBinary()
				_ = yym1907
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1908 := &x.Namespaces
				yym1909 := z.DecBinary()
				_ = yym1909
				if false {
				} else {
					z.F.DecSliceStringX(yyv1908, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1905)
		} // end switch yys1905
	} // end for yyj1905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1911 int
	var yyb1911 bool
	var yyhl1911 bool = l >= 0
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1913 := z.DecBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1914 := &x.Namespaces
		yym1915 := z.DecBinary()
		_ = yym1915
		if false {
		} else {
			z.F.DecSliceStringX(yyv1914, false, d)
		}
	}
	yyj1911++
	if yyhl1911 {
		yyb1911 = yyj1911 > l
	} else {
		yyb1911 = r.CheckBreak()
	}
	if yyb1911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1911++
		if yyhl1911 {
			yyb1911 = yyj1911 > l
		} else {
			yyb1911 = r.CheckBreak()
		}
		if yyb1911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1917 := z.EncBinary()
		_ = yym1917
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1918 := !z.EncBinary()
			yy2arr1918 := z.EncBasicHandle().StructToArray
			var yyq1918 [2]bool
			_, _, _ = yysep1918, yyq1918, yy2arr1918
			const yyr1918 bool = false
			yyq1918[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1918[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1918 int
			if yyr1918 || yy2arr1918 {
				r.EncodeArrayStart(2)
			} else {
				yynn1918 = 0
				for _, b := range yyq1918 {
					if b {
						yynn1918++
					}
				}
				r.EncodeMapStart(yynn1918)
				yynn1918 = 0
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1918[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1921 := z.EncBinary()
						_ = yym1921
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1918[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1922 := z.EncBinary()
						_ = yym1922
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1918 || yy2arr1918 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1923 := z.DecBinary()
	_ = yym1923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1924 := r.ContainerType()
		if yyct1924 == codecSelferValueTypeMap1234 {
			yyl1924 := r.ReadMapStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1924, d)
			}
		} else if yyct1924 == codecSelferValueTypeArray1234 {
			yyl1924 := r.ReadArrayStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1925Slc
	var yyhl1925 bool = l >= 0
	for yyj1925 := 0; ; yyj1925++ {
		if yyhl1925 {
			if yyj1925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1925Slc = r.DecodeBytes(yys1925Slc, true, true)
		yys1925 := string(yys1925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1925 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1927 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1928 := z.DecBinary()
				_ = yym1928
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1927), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1925)
		} // end switch yys1925
	} // end for yyj1925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1929 int
	var yyb1929 bool
	var yyhl1929 bool = l >= 0
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1931 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1932 := z.DecBinary()
		_ = yym1932
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1931), d)
		}
	}
	for {
		yyj1929++
		if yyhl1929 {
			yyb1929 = yyj1929 > l
		} else {
			yyb1929 = r.CheckBreak()
		}
		if yyb1929 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1929-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1933 := z.EncBinary()
		_ = yym1933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1934 := !z.EncBinary()
			yy2arr1934 := z.EncBasicHandle().StructToArray
			var yyq1934 [2]bool
			_, _, _ = yysep1934, yyq1934, yy2arr1934
			const yyr1934 bool = false
			var yynn1934 int
			if yyr1934 || yy2arr1934 {
				r.EncodeArrayStart(2)
			} else {
				yynn1934 = 2
				for _, b := range yyq1934 {
					if b {
						yynn1934++
					}
				}
				r.EncodeMapStart(yynn1934)
				yynn1934 = 0
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1936 := z.EncBinary()
				_ = yym1936
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1937 := z.EncBinary()
				_ = yym1937
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1939 := &x.Preference
				yy1939.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1940 := &x.Preference
				yy1940.CodecEncodeSelf(e)
			}
			if yyr1934 || yy2arr1934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1941 := z.DecBinary()
	_ = yym1941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1942 := r.ContainerType()
		if yyct1942 == codecSelferValueTypeMap1234 {
			yyl1942 := r.ReadMapStart()
			if yyl1942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1942, d)
			}
		} else if yyct1942 == codecSelferValueTypeArray1234 {
			yyl1942 := r.ReadArrayStart()
			if yyl1942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1943Slc
	var yyhl1943 bool = l >= 0
	for yyj1943 := 0; ; yyj1943++ {
		if yyhl1943 {
			if yyj1943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1943Slc = r.DecodeBytes(yys1943Slc, true, true)
		yys1943 := string(yys1943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1943 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1945 := &x.Preference
				yyv1945.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1943)
		} // end switch yys1943
	} // end for yyj1943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1946 int
	var yyb1946 bool
	var yyhl1946 bool = l >= 0
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1948 := &x.Preference
		yyv1948.CodecDecodeSelf(d)
	}
	for {
		yyj1946++
		if yyhl1946 {
			yyb1946 = yyj1946 > l
		} else {
			yyb1946 = r.CheckBreak()
		}
		if yyb1946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1949 := z.EncBinary()
		_ = yym1949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1950 := !z.EncBinary()
			yy2arr1950 := z.EncBasicHandle().StructToArray
			var yyq1950 [3]bool
			_, _, _ = yysep1950, yyq1950, yy2arr1950
			const yyr1950 bool = false
			yyq1950[1] = x.Value != ""
			var yynn1950 int
			if yyr1950 || yy2arr1950 {
				r.EncodeArrayStart(3)
			} else {
				yynn1950 = 2
				for _, b := range yyq1950 {
					if b {
						yynn1950++
					}
				}
				r.EncodeMapStart(yynn1950)
				yynn1950 = 0
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1952 := z.EncBinary()
				_ = yym1952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1953 := z.EncBinary()
				_ = yym1953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1950[1] {
					yym1955 := z.EncBinary()
					_ = yym1955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1956 := z.EncBinary()
					_ = yym1956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1950 || yy2arr1950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1959 := r.ContainerType()
		if yyct1959 == codecSelferValueTypeMap1234 {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if yyct1959 == codecSelferValueTypeArray1234 {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1960 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1964 int
	var yyb1964 bool
	var yyhl1964 bool = l >= 0
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1964++
	if yyhl1964 {
		yyb1964 = yyj1964 > l
	} else {
		yyb1964 = r.CheckBreak()
	}
	if yyb1964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1964++
		if yyhl1964 {
			yyb1964 = yyj1964 > l
		} else {
			yyb1964 = r.CheckBreak()
		}
		if yyb1964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1968 := z.EncBinary()
	_ = yym1968
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1969 := z.DecBinary()
	_ = yym1969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1970 := z.EncBinary()
		_ = yym1970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1971 := !z.EncBinary()
			yy2arr1971 := z.EncBasicHandle().StructToArray
			var yyq1971 [4]bool
			_, _, _ = yysep1971, yyq1971, yy2arr1971
			const yyr1971 bool = false
			yyq1971[0] = x.Key != ""
			yyq1971[1] = x.Operator != ""
			yyq1971[2] = x.Value != ""
			yyq1971[3] = x.Effect != ""
			var yynn1971 int
			if yyr1971 || yy2arr1971 {
				r.EncodeArrayStart(4)
			} else {
				yynn1971 = 0
				for _, b := range yyq1971 {
					if b {
						yynn1971++
					}
				}
				r.EncodeMapStart(yynn1971)
				yynn1971 = 0
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[0] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[2] {
					yym1977 := z.EncBinary()
					_ = yym1977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1971[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1971[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1971 || yy2arr1971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1980 := z.DecBinary()
	_ = yym1980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1981 := r.ContainerType()
		if yyct1981 == codecSelferValueTypeMap1234 {
			yyl1981 := r.ReadMapStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1981, d)
			}
		} else if yyct1981 == codecSelferValueTypeArray1234 {
			yyl1981 := r.ReadArrayStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1982Slc
	var yyhl1982 bool = l >= 0
	for yyj1982 := 0; ; yyj1982++ {
		if yyhl1982 {
			if yyj1982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1982Slc = r.DecodeBytes(yys1982Slc, true, true)
		yys1982 := string(yys1982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1982 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1982)
		} // end switch yys1982
	} // end for yyj1982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1987 int
	var yyb1987 bool
	var yyhl1987 bool = l >= 0
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1987++
		if yyhl1987 {
			yyb1987 = yyj1987 > l
		} else {
			yyb1987 = r.CheckBreak()
		}
		if yyb1987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1992 := z.EncBinary()
	_ = yym1992
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1994 := z.EncBinary()
		_ = yym1994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1995 := !z.EncBinary()
			yy2arr1995 := z.EncBasicHandle().StructToArray
			var yyq1995 [17]bool
			_, _, _ = yysep1995, yyq1995, yy2arr1995
			const yyr1995 bool = false
			yyq1995[0] = len(x.Volumes) != 0
			yyq1995[2] = x.RestartPolicy != ""
			yyq1995[3] = x.TerminationGracePeriodSeconds != nil
			yyq1995[4] = x.ActiveDeadlineSeconds != nil
			yyq1995[5] = x.DNSPolicy != ""
			yyq1995[6] = len(x.NodeSelector) != 0
			yyq1995[7] = x.ServiceAccountName != ""
			yyq1995[8] = x.DeprecatedServiceAccount != ""
			yyq1995[9] = x.NodeName != ""
			yyq1995[10] = x.HostNetwork != false
			yyq1995[11] = x.HostPID != false
			yyq1995[12] = x.HostIPC != false
			yyq1995[13] = x.SecurityContext != nil
			yyq1995[14] = len(x.ImagePullSecrets) != 0
			yyq1995[15] = x.Hostname != ""
			yyq1995[16] = x.Subdomain != ""
			var yynn1995 int
			if yyr1995 || yy2arr1995 {
				r.EncodeArrayStart(17)
			} else {
				yynn1995 = 1
				for _, b := range yyq1995 {
					if b {
						yynn1995++
					}
				}
				r.EncodeMapStart(yynn1995)
				yynn1995 = 0
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1997 := z.EncBinary()
						_ = yym1997
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2001 := z.EncBinary()
					_ = yym2001
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2004 := *x.TerminationGracePeriodSeconds
						yym2005 := z.EncBinary()
						_ = yym2005
						if false {
						} else {
							r.EncodeInt(int64(yy2004))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2006 := *x.TerminationGracePeriodSeconds
						yym2007 := z.EncBinary()
						_ = yym2007
						if false {
						} else {
							r.EncodeInt(int64(yy2006))
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2009 := *x.ActiveDeadlineSeconds
						yym2010 := z.EncBinary()
						_ = yym2010
						if false {
						} else {
							r.EncodeInt(int64(yy2009))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2011 := *x.ActiveDeadlineSeconds
						yym2012 := z.EncBinary()
						_ = yym2012
						if false {
						} else {
							r.EncodeInt(int64(yy2011))
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2015 := z.EncBinary()
						_ = yym2015
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2016 := z.EncBinary()
						_ = yym2016
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[7] {
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[8] {
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[9] {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[10] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1995[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[11] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1995[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[12] {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1995[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[15] {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2041 := z.EncBinary()
					_ = yym2041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[16] {
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1995[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2044 := z.EncBinary()
					_ = yym2044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2045 := z.DecBinary()
	_ = yym2045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2046 := r.ContainerType()
		if yyct2046 == codecSelferValueTypeMap1234 {
			yyl2046 := r.ReadMapStart()
			if yyl2046 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2046, d)
			}
		} else if yyct2046 == codecSelferValueTypeArray1234 {
			yyl2046 := r.ReadArrayStart()
			if yyl2046 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2047Slc
	var yyhl2047 bool = l >= 0
	for yyj2047 := 0; ; yyj2047++ {
		if yyhl2047 {
			if yyj2047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2047Slc = r.DecodeBytes(yys2047Slc, true, true)
		yys2047 := string(yys2047Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2047 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2048 := &x.Volumes
				yym2049 := z.DecBinary()
				_ = yym2049
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2048), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2050 := &x.Containers
				yym2051 := z.DecBinary()
				_ = yym2051
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2050), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2058 := &x.NodeSelector
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2058, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2067 := &x.ImagePullSecrets
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2067), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2047)
		} // end switch yys2047
	} // end for yyj2047
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2071 int
	var yyb2071 bool
	var yyhl2071 bool = l >= 0
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2072 := &x.Volumes
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2072), d)
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2074 := &x.Containers
		yym2075 := z.DecBinary()
		_ = yym2075
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2074), d)
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2078 := z.DecBinary()
		_ = yym2078
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2080 := z.DecBinary()
		_ = yym2080
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2082 := &x.NodeSelector
		yym2083 := z.DecBinary()
		_ = yym2083
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2082, false, d)
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2091 := &x.ImagePullSecrets
		yym2092 := z.DecBinary()
		_ = yym2092
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2091), d)
		}
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2071++
		if yyhl2071 {
			yyb2071 = yyj2071 > l
		} else {
			yyb2071 = r.CheckBreak()
		}
		if yyb2071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2095 := z.EncBinary()
		_ = yym2095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2096 := !z.EncBinary()
			yy2arr2096 := z.EncBasicHandle().StructToArray
			var yyq2096 [5]bool
			_, _, _ = yysep2096, yyq2096, yy2arr2096
			const yyr2096 bool = false
			yyq2096[0] = x.SELinuxOptions != nil
			yyq2096[1] = x.RunAsUser != nil
			yyq2096[2] = x.RunAsNonRoot != nil
			yyq2096[3] = len(x.SupplementalGroups) != 0
			yyq2096[4] = x.FSGroup != nil
			var yynn2096 int
			if yyr2096 || yy2arr2096 {
				r.EncodeArrayStart(5)
			} else {
				yynn2096 = 0
				for _, b := range yyq2096 {
					if b {
						yynn2096++
					}
				}
				r.EncodeMapStart(yynn2096)
				yynn2096 = 0
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2099 := *x.RunAsUser
						yym2100 := z.EncBinary()
						_ = yym2100
						if false {
						} else {
							r.EncodeInt(int64(yy2099))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2101 := *x.RunAsUser
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							r.EncodeInt(int64(yy2101))
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2104 := *x.RunAsNonRoot
						yym2105 := z.EncBinary()
						_ = yym2105
						if false {
						} else {
							r.EncodeBool(bool(yy2104))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2106 := *x.RunAsNonRoot
						yym2107 := z.EncBinary()
						_ = yym2107
						if false {
						} else {
							r.EncodeBool(bool(yy2106))
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2110 := z.EncBinary()
						_ = yym2110
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2112 := *x.FSGroup
						yym2113 := z.EncBinary()
						_ = yym2113
						if false {
						} else {
							r.EncodeInt(int64(yy2112))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2096[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2114 := *x.FSGroup
						yym2115 := z.EncBinary()
						_ = yym2115
						if false {
						} else {
							r.EncodeInt(int64(yy2114))
						}
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2116 := z.DecBinary()
	_ = yym2116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2117 := r.ContainerType()
		if yyct2117 == codecSelferValueTypeMap1234 {
			yyl2117 := r.ReadMapStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2117, d)
			}
		} else if yyct2117 == codecSelferValueTypeArray1234 {
			yyl2117 := r.ReadArrayStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2118Slc
	var yyhl2118 bool = l >= 0
	for yyj2118 := 0; ; yyj2118++ {
		if yyhl2118 {
			if yyj2118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2118Slc = r.DecodeBytes(yys2118Slc, true, true)
		yys2118 := string(yys2118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2118 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2123 := z.DecBinary()
				_ = yym2123
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2124 := &x.SupplementalGroups
				yym2125 := z.DecBinary()
				_ = yym2125
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2124, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2127 := z.DecBinary()
				_ = yym2127
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2118)
		} // end switch yys2118
	} // end for yyj2118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2128 int
	var yyb2128 bool
	var yyhl2128 bool = l >= 0
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2131 := z.DecBinary()
		_ = yym2131
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2133 := z.DecBinary()
		_ = yym2133
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2134 := &x.SupplementalGroups
		yym2135 := z.DecBinary()
		_ = yym2135
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2134, false, d)
		}
	}
	yyj2128++
	if yyhl2128 {
		yyb2128 = yyj2128 > l
	} else {
		yyb2128 = r.CheckBreak()
	}
	if yyb2128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2137 := z.DecBinary()
		_ = yym2137
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2128++
		if yyhl2128 {
			yyb2128 = yyj2128 > l
		} else {
			yyb2128 = r.CheckBreak()
		}
		if yyb2128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [8]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			yyq2139[0] = x.Phase != ""
			yyq2139[1] = len(x.Conditions) != 0
			yyq2139[2] = x.Message != ""
			yyq2139[3] = x.Reason != ""
			yyq2139[4] = x.HostIP != ""
			yyq2139[5] = x.PodIP != ""
			yyq2139[6] = x.StartTime != nil
			yyq2139[7] = len(x.ContainerStatuses) != 0
			var yynn2139 int
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(8)
			} else {
				yynn2139 = 0
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
				yynn2139 = 0
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2142 := z.EncBinary()
						_ = yym2142
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2143 := z.EncBinary()
						_ = yym2143
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[2] {
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[3] {
					yym2148 := z.EncBinary()
					_ = yym2148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2149 := z.EncBinary()
					_ = yym2149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[4] {
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2152 := z.EncBinary()
					_ = yym2152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[5] {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2139[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2157 := z.EncBinary()
						_ = yym2157
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2157 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2157 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2158 := z.EncBinary()
						_ = yym2158
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2158 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2158 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2139[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2160 := z.EncBinary()
						_ = yym2160
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2139[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2139 || yy2arr2139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2162 := z.DecBinary()
	_ = yym2162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2163 := r.ContainerType()
		if yyct2163 == codecSelferValueTypeMap1234 {
			yyl2163 := r.ReadMapStart()
			if yyl2163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2163, d)
			}
		} else if yyct2163 == codecSelferValueTypeArray1234 {
			yyl2163 := r.ReadArrayStart()
			if yyl2163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2164Slc
	var yyhl2164 bool = l >= 0
	for yyj2164 := 0; ; yyj2164++ {
		if yyhl2164 {
			if yyj2164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2164Slc = r.DecodeBytes(yys2164Slc, true, true)
		yys2164 := string(yys2164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2164 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2166 := &x.Conditions
				yym2167 := z.DecBinary()
				_ = yym2167
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2166), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2173 := z.DecBinary()
				_ = yym2173
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2173 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2173 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2174 := &x.ContainerStatuses
				yym2175 := z.DecBinary()
				_ = yym2175
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2174), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2164)
		} // end switch yys2164
	} // end for yyj2164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2176 int
	var yyb2176 bool
	var yyhl2176 bool = l >= 0
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2178 := &x.Conditions
		yym2179 := z.DecBinary()
		_ = yym2179
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2178), d)
		}
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2185 := z.DecBinary()
		_ = yym2185
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2185 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2185 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2176++
	if yyhl2176 {
		yyb2176 = yyj2176 > l
	} else {
		yyb2176 = r.CheckBreak()
	}
	if yyb2176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2186 := &x.ContainerStatuses
		yym2187 := z.DecBinary()
		_ = yym2187
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2186), d)
		}
	}
	for {
		yyj2176++
		if yyhl2176 {
			yyb2176 = yyj2176 > l
		} else {
			yyb2176 = r.CheckBreak()
		}
		if yyb2176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2188 := z.EncBinary()
		_ = yym2188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2189 := !z.EncBinary()
			yy2arr2189 := z.EncBasicHandle().StructToArray
			var yyq2189 [4]bool
			_, _, _ = yysep2189, yyq2189, yy2arr2189
			const yyr2189 bool = false
			yyq2189[0] = x.Kind != ""
			yyq2189[1] = x.APIVersion != ""
			yyq2189[2] = true
			yyq2189[3] = true
			var yynn2189 int
			if yyr2189 || yy2arr2189 {
				r.EncodeArrayStart(4)
			} else {
				yynn2189 = 0
				for _, b := range yyq2189 {
					if b {
						yynn2189++
					}
				}
				r.EncodeMapStart(yynn2189)
				yynn2189 = 0
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2189[0] {
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2189[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2189[1] {
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2189[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2195 := z.EncBinary()
					_ = yym2195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2189[2] {
					yy2197 := &x.ObjectMeta
					yy2197.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2189[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2198 := &x.ObjectMeta
					yy2198.CodecEncodeSelf(e)
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2189[3] {
					yy2200 := &x.Status
					yy2200.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2189[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2201 := &x.Status
					yy2201.CodecEncodeSelf(e)
				}
			}
			if yyr2189 || yy2arr2189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2202 := z.DecBinary()
	_ = yym2202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2203 := r.ContainerType()
		if yyct2203 == codecSelferValueTypeMap1234 {
			yyl2203 := r.ReadMapStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2203, d)
			}
		} else if yyct2203 == codecSelferValueTypeArray1234 {
			yyl2203 := r.ReadArrayStart()
			if yyl2203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2204Slc
	var yyhl2204 bool = l >= 0
	for yyj2204 := 0; ; yyj2204++ {
		if yyhl2204 {
			if yyj2204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2204Slc = r.DecodeBytes(yys2204Slc, true, true)
		yys2204 := string(yys2204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2207 := &x.ObjectMeta
				yyv2207.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2208 := &x.Status
				yyv2208.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2204)
		} // end switch yys2204
	} // end for yyj2204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2209 int
	var yyb2209 bool
	var yyhl2209 bool = l >= 0
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2212 := &x.ObjectMeta
		yyv2212.CodecDecodeSelf(d)
	}
	yyj2209++
	if yyhl2209 {
		yyb2209 = yyj2209 > l
	} else {
		yyb2209 = r.CheckBreak()
	}
	if yyb2209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2213 := &x.Status
		yyv2213.CodecDecodeSelf(d)
	}
	for {
		yyj2209++
		if yyhl2209 {
			yyb2209 = yyj2209 > l
		} else {
			yyb2209 = r.CheckBreak()
		}
		if yyb2209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2214 := z.EncBinary()
		_ = yym2214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2215 := !z.EncBinary()
			yy2arr2215 := z.EncBasicHandle().StructToArray
			var yyq2215 [5]bool
			_, _, _ = yysep2215, yyq2215, yy2arr2215
			const yyr2215 bool = false
			yyq2215[0] = x.Kind != ""
			yyq2215[1] = x.APIVersion != ""
			yyq2215[2] = true
			yyq2215[3] = true
			yyq2215[4] = true
			var yynn2215 int
			if yyr2215 || yy2arr2215 {
				r.EncodeArrayStart(5)
			} else {
				yynn2215 = 0
				for _, b := range yyq2215 {
					if b {
						yynn2215++
					}
				}
				r.EncodeMapStart(yynn2215)
				yynn2215 = 0
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[0] {
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[1] {
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[2] {
					yy2223 := &x.ObjectMeta
					yy2223.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2224 := &x.ObjectMeta
					yy2224.CodecEncodeSelf(e)
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[3] {
					yy2226 := &x.Spec
					yy2226.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2215[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2227 := &x.Spec
					yy2227.CodecEncodeSelf(e)
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[4] {
					yy2229 := &x.Status
					yy2229.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2215[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2230 := &x.Status
					yy2230.CodecEncodeSelf(e)
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2231 := z.DecBinary()
	_ = yym2231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2232 := r.ContainerType()
		if yyct2232 == codecSelferValueTypeMap1234 {
			yyl2232 := r.ReadMapStart()
			if yyl2232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2232, d)
			}
		} else if yyct2232 == codecSelferValueTypeArray1234 {
			yyl2232 := r.ReadArrayStart()
			if yyl2232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2233Slc
	var yyhl2233 bool = l >= 0
	for yyj2233 := 0; ; yyj2233++ {
		if yyhl2233 {
			if yyj2233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2233Slc = r.DecodeBytes(yys2233Slc, true, true)
		yys2233 := string(yys2233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2233 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2236 := &x.ObjectMeta
				yyv2236.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2237 := &x.Spec
				yyv2237.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2238 := &x.Status
				yyv2238.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2233)
		} // end switch yys2233
	} // end for yyj2233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2239 int
	var yyb2239 bool
	var yyhl2239 bool = l >= 0
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2242 := &x.ObjectMeta
		yyv2242.CodecDecodeSelf(d)
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2243 := &x.Spec
		yyv2243.CodecDecodeSelf(d)
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2244 := &x.Status
		yyv2244.CodecDecodeSelf(d)
	}
	for {
		yyj2239++
		if yyhl2239 {
			yyb2239 = yyj2239 > l
		} else {
			yyb2239 = r.CheckBreak()
		}
		if yyb2239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2245 := z.EncBinary()
		_ = yym2245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2246 := !z.EncBinary()
			yy2arr2246 := z.EncBasicHandle().StructToArray
			var yyq2246 [4]bool
			_, _, _ = yysep2246, yyq2246, yy2arr2246
			const yyr2246 bool = false
			yyq2246[0] = x.Kind != ""
			yyq2246[1] = x.APIVersion != ""
			yyq2246[2] = true
			var yynn2246 int
			if yyr2246 || yy2arr2246 {
				r.EncodeArrayStart(4)
			} else {
				yynn2246 = 1
				for _, b := range yyq2246 {
					if b {
						yynn2246++
					}
				}
				r.EncodeMapStart(yynn2246)
				yynn2246 = 0
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[0] {
					yym2248 := z.EncBinary()
					_ = yym2248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[1] {
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2246[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2246[2] {
					yy2254 := &x.ListMeta
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2254) {
					} else {
						z.EncFallback(yy2254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2246[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2256 := &x.ListMeta
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2256) {
					} else {
						z.EncFallback(yy2256)
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2260 := z.EncBinary()
					_ = yym2260
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2246 || yy2arr2246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2261 := z.DecBinary()
	_ = yym2261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2262 := r.ContainerType()
		if yyct2262 == codecSelferValueTypeMap1234 {
			yyl2262 := r.ReadMapStart()
			if yyl2262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2262, d)
			}
		} else if yyct2262 == codecSelferValueTypeArray1234 {
			yyl2262 := r.ReadArrayStart()
			if yyl2262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2263Slc
	var yyhl2263 bool = l >= 0
	for yyj2263 := 0; ; yyj2263++ {
		if yyhl2263 {
			if yyj2263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2263Slc = r.DecodeBytes(yys2263Slc, true, true)
		yys2263 := string(yys2263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2263 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2266 := &x.ListMeta
				yym2267 := z.DecBinary()
				_ = yym2267
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2266) {
				} else {
					z.DecFallback(yyv2266, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2268 := &x.Items
				yym2269 := z.DecBinary()
				_ = yym2269
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2268), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2263)
		} // end switch yys2263
	} // end for yyj2263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2270 int
	var yyb2270 bool
	var yyhl2270 bool = l >= 0
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2273 := &x.ListMeta
		yym2274 := z.DecBinary()
		_ = yym2274
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2273) {
		} else {
			z.DecFallback(yyv2273, false)
		}
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2275 := &x.Items
		yym2276 := z.DecBinary()
		_ = yym2276
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2275), d)
		}
	}
	for {
		yyj2270++
		if yyhl2270 {
			yyb2270 = yyj2270 > l
		} else {
			yyb2270 = r.CheckBreak()
		}
		if yyb2270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2277 := z.EncBinary()
		_ = yym2277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2278 := !z.EncBinary()
			yy2arr2278 := z.EncBasicHandle().StructToArray
			var yyq2278 [2]bool
			_, _, _ = yysep2278, yyq2278, yy2arr2278
			const yyr2278 bool = false
			yyq2278[0] = true
			yyq2278[1] = true
			var yynn2278 int
			if yyr2278 || yy2arr2278 {
				r.EncodeArrayStart(2)
			} else {
				yynn2278 = 0
				for _, b := range yyq2278 {
					if b {
						yynn2278++
					}
				}
				r.EncodeMapStart(yynn2278)
				yynn2278 = 0
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[0] {
					yy2280 := &x.ObjectMeta
					yy2280.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2281 := &x.ObjectMeta
					yy2281.CodecEncodeSelf(e)
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[1] {
					yy2283 := &x.Spec
					yy2283.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2284 := &x.Spec
					yy2284.CodecEncodeSelf(e)
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2285 := z.DecBinary()
	_ = yym2285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2286 := r.ContainerType()
		if yyct2286 == codecSelferValueTypeMap1234 {
			yyl2286 := r.ReadMapStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2286, d)
			}
		} else if yyct2286 == codecSelferValueTypeArray1234 {
			yyl2286 := r.ReadArrayStart()
			if yyl2286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2287Slc
	var yyhl2287 bool = l >= 0
	for yyj2287 := 0; ; yyj2287++ {
		if yyhl2287 {
			if yyj2287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2287Slc = r.DecodeBytes(yys2287Slc, true, true)
		yys2287 := string(yys2287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2287 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2288 := &x.ObjectMeta
				yyv2288.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2289 := &x.Spec
				yyv2289.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2287)
		} // end switch yys2287
	} // end for yyj2287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2290 int
	var yyb2290 bool
	var yyhl2290 bool = l >= 0
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2291 := &x.ObjectMeta
		yyv2291.CodecDecodeSelf(d)
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2292 := &x.Spec
		yyv2292.CodecDecodeSelf(d)
	}
	for {
		yyj2290++
		if yyhl2290 {
			yyb2290 = yyj2290 > l
		} else {
			yyb2290 = r.CheckBreak()
		}
		if yyb2290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2293 := z.EncBinary()
		_ = yym2293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2294 := !z.EncBinary()
			yy2arr2294 := z.EncBasicHandle().StructToArray
			var yyq2294 [4]bool
			_, _, _ = yysep2294, yyq2294, yy2arr2294
			const yyr2294 bool = false
			yyq2294[0] = x.Kind != ""
			yyq2294[1] = x.APIVersion != ""
			yyq2294[2] = true
			yyq2294[3] = true
			var yynn2294 int
			if yyr2294 || yy2arr2294 {
				r.EncodeArrayStart(4)
			} else {
				yynn2294 = 0
				for _, b := range yyq2294 {
					if b {
						yynn2294++
					}
				}
				r.EncodeMapStart(yynn2294)
				yynn2294 = 0
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[0] {
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[1] {
					yym2299 := z.EncBinary()
					_ = yym2299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[2] {
					yy2302 := &x.ObjectMeta
					yy2302.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2303 := &x.ObjectMeta
					yy2303.CodecEncodeSelf(e)
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2294[3] {
					yy2305 := &x.Template
					yy2305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2294[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2306 := &x.Template
					yy2306.CodecEncodeSelf(e)
				}
			}
			if yyr2294 || yy2arr2294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2307 := z.DecBinary()
	_ = yym2307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2308 := r.ContainerType()
		if yyct2308 == codecSelferValueTypeMap1234 {
			yyl2308 := r.ReadMapStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2308, d)
			}
		} else if yyct2308 == codecSelferValueTypeArray1234 {
			yyl2308 := r.ReadArrayStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2309Slc
	var yyhl2309 bool = l >= 0
	for yyj2309 := 0; ; yyj2309++ {
		if yyhl2309 {
			if yyj2309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2309Slc = r.DecodeBytes(yys2309Slc, true, true)
		yys2309 := string(yys2309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2312 := &x.ObjectMeta
				yyv2312.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2313 := &x.Template
				yyv2313.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2309)
		} // end switch yys2309
	} // end for yyj2309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2314 int
	var yyb2314 bool
	var yyhl2314 bool = l >= 0
	yyj2314++
	if yyhl2314 {
		yyb2314 = yyj2314 > l
	} else {
		yyb2314 = r.CheckBreak()
	}
	if yyb2314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2314++
	if yyhl2314 {
		yyb2314 = yyj2314 > l
	} else {
		yyb2314 = r.CheckBreak()
	}
	if yyb2314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2314++
	if yyhl2314 {
		yyb2314 = yyj2314 > l
	} else {
		yyb2314 = r.CheckBreak()
	}
	if yyb2314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2317 := &x.ObjectMeta
		yyv2317.CodecDecodeSelf(d)
	}
	yyj2314++
	if yyhl2314 {
		yyb2314 = yyj2314 > l
	} else {
		yyb2314 = r.CheckBreak()
	}
	if yyb2314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2318 := &x.Template
		yyv2318.CodecDecodeSelf(d)
	}
	for {
		yyj2314++
		if yyhl2314 {
			yyb2314 = yyj2314 > l
		} else {
			yyb2314 = r.CheckBreak()
		}
		if yyb2314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2319 := z.EncBinary()
		_ = yym2319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2320 := !z.EncBinary()
			yy2arr2320 := z.EncBasicHandle().StructToArray
			var yyq2320 [4]bool
			_, _, _ = yysep2320, yyq2320, yy2arr2320
			const yyr2320 bool = false
			yyq2320[0] = x.Kind != ""
			yyq2320[1] = x.APIVersion != ""
			yyq2320[2] = true
			var yynn2320 int
			if yyr2320 || yy2arr2320 {
				r.EncodeArrayStart(4)
			} else {
				yynn2320 = 1
				for _, b := range yyq2320 {
					if b {
						yynn2320++
					}
				}
				r.EncodeMapStart(yynn2320)
				yynn2320 = 0
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[0] {
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[1] {
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2320[2] {
					yy2328 := &x.ListMeta
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2328) {
					} else {
						z.EncFallback(yy2328)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2330 := &x.ListMeta
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else {
						z.EncFallback(yy2330)
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2320 || yy2arr2320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2335 := z.DecBinary()
	_ = yym2335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2336 := r.ContainerType()
		if yyct2336 == codecSelferValueTypeMap1234 {
			yyl2336 := r.ReadMapStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2336, d)
			}
		} else if yyct2336 == codecSelferValueTypeArray1234 {
			yyl2336 := r.ReadArrayStart()
			if yyl2336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2337Slc
	var yyhl2337 bool = l >= 0
	for yyj2337 := 0; ; yyj2337++ {
		if yyhl2337 {
			if yyj2337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2337Slc = r.DecodeBytes(yys2337Slc, true, true)
		yys2337 := string(yys2337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2337 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2340 := &x.ListMeta
				yym2341 := z.DecBinary()
				_ = yym2341
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2340) {
				} else {
					z.DecFallback(yyv2340, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2342 := &x.Items
				yym2343 := z.DecBinary()
				_ = yym2343
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2342), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2337)
		} // end switch yys2337
	} // end for yyj2337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2344 int
	var yyb2344 bool
	var yyhl2344 bool = l >= 0
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2347 := &x.ListMeta
		yym2348 := z.DecBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2347) {
		} else {
			z.DecFallback(yyv2347, false)
		}
	}
	yyj2344++
	if yyhl2344 {
		yyb2344 = yyj2344 > l
	} else {
		yyb2344 = r.CheckBreak()
	}
	if yyb2344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2349 := &x.Items
		yym2350 := z.DecBinary()
		_ = yym2350
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2349), d)
		}
	}
	for {
		yyj2344++
		if yyhl2344 {
			yyb2344 = yyj2344 > l
		} else {
			yyb2344 = r.CheckBreak()
		}
		if yyb2344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2351 := z.EncBinary()
		_ = yym2351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2352 := !z.EncBinary()
			yy2arr2352 := z.EncBasicHandle().StructToArray
			var yyq2352 [4]bool
			_, _, _ = yysep2352, yyq2352, yy2arr2352
			const yyr2352 bool = false
			yyq2352[0] = x.Replicas != nil
			yyq2352[1] = x.MinReadySeconds != 0
			yyq2352[2] = len(x.Selector) != 0
			yyq2352[3] = x.Template != nil
			var yynn2352 int
			if yyr2352 || yy2arr2352 {
				r.EncodeArrayStart(4)
			} else {
				yynn2352 = 0
				for _, b := range yyq2352 {
					if b {
						yynn2352++
					}
				}
				r.EncodeMapStart(yynn2352)
				yynn2352 = 0
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2354 := *x.Replicas
						yym2355 := z.EncBinary()
						_ = yym2355
						if false {
						} else {
							r.EncodeInt(int64(yy2354))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2356 := *x.Replicas
						yym2357 := z.EncBinary()
						_ = yym2357
						if false {
						} else {
							r.EncodeInt(int64(yy2356))
						}
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[1] {
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2362 := z.EncBinary()
						_ = yym2362
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2363 := z.EncBinary()
						_ = yym2363
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2352[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2352[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2352 || yy2arr2352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2365 := z.DecBinary()
	_ = yym2365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2366 := r.ContainerType()
		if yyct2366 == codecSelferValueTypeMap1234 {
			yyl2366 := r.ReadMapStart()
			if yyl2366 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2366, d)
			}
		} else if yyct2366 == codecSelferValueTypeArray1234 {
			yyl2366 := r.ReadArrayStart()
			if yyl2366 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2367Slc
	var yyhl2367 bool = l >= 0
	for yyj2367 := 0; ; yyj2367++ {
		if yyhl2367 {
			if yyj2367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2367Slc = r.DecodeBytes(yys2367Slc, true, true)
		yys2367 := string(yys2367Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2367 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2369 := z.DecBinary()
				_ = yym2369
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2371 := &x.Selector
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2371, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2367)
		} // end switch yys2367
	} // end for yyj2367
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2374 int
	var yyb2374 bool
	var yyhl2374 bool = l >= 0
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2376 := z.DecBinary()
		_ = yym2376
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2378 := &x.Selector
		yym2379 := z.DecBinary()
		_ = yym2379
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2378, false, d)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2374++
		if yyhl2374 {
			yyb2374 = yyj2374 > l
		} else {
			yyb2374 = r.CheckBreak()
		}
		if yyb2374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2381 := z.EncBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2382 := !z.EncBinary()
			yy2arr2382 := z.EncBasicHandle().StructToArray
			var yyq2382 [5]bool
			_, _, _ = yysep2382, yyq2382, yy2arr2382
			const yyr2382 bool = false
			yyq2382[1] = x.FullyLabeledReplicas != 0
			yyq2382[2] = x.ReadyReplicas != 0
			yyq2382[3] = x.AvailableReplicas != 0
			yyq2382[4] = x.ObservedGeneration != 0
			var yynn2382 int
			if yyr2382 || yy2arr2382 {
				r.EncodeArrayStart(5)
			} else {
				yynn2382 = 1
				for _, b := range yyq2382 {
					if b {
						yynn2382++
					}
				}
				r.EncodeMapStart(yynn2382)
				yynn2382 = 0
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2384 := z.EncBinary()
				_ = yym2384
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2385 := z.EncBinary()
				_ = yym2385
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[1] {
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[2] {
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2382[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[3] {
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2382[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[4] {
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2382[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2398 := z.DecBinary()
	_ = yym2398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2399 := r.ContainerType()
		if yyct2399 == codecSelferValueTypeMap1234 {
			yyl2399 := r.ReadMapStart()
			if yyl2399 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2399, d)
			}
		} else if yyct2399 == codecSelferValueTypeArray1234 {
			yyl2399 := r.ReadArrayStart()
			if yyl2399 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2399, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2400Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2400Slc
	var yyhl2400 bool = l >= 0
	for yyj2400 := 0; ; yyj2400++ {
		if yyhl2400 {
			if yyj2400 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2400Slc = r.DecodeBytes(yys2400Slc, true, true)
		yys2400 := string(yys2400Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2400 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2400)
		} // end switch yys2400
	} // end for yyj2400
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2406 int
	var yyb2406 bool
	var yyhl2406 bool = l >= 0
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2406++
		if yyhl2406 {
			yyb2406 = yyj2406 > l
		} else {
			yyb2406 = r.CheckBreak()
		}
		if yyb2406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [5]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[0] = x.Kind != ""
			yyq2413[1] = x.APIVersion != ""
			yyq2413[2] = true
			yyq2413[3] = true
			yyq2413[4] = true
			var yynn2413 int
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(5)
			} else {
				yynn2413 = 0
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
				yynn2413 = 0
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[0] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[1] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[2] {
					yy2421 := &x.ObjectMeta
					yy2421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2422 := &x.ObjectMeta
					yy2422.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[3] {
					yy2424 := &x.Spec
					yy2424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2425 := &x.Spec
					yy2425.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[4] {
					yy2427 := &x.Status
					yy2427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2428 := &x.Status
					yy2428.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2430 := r.ContainerType()
		if yyct2430 == codecSelferValueTypeMap1234 {
			yyl2430 := r.ReadMapStart()
			if yyl2430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2430, d)
			}
		} else if yyct2430 == codecSelferValueTypeArray1234 {
			yyl2430 := r.ReadArrayStart()
			if yyl2430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2431Slc
	var yyhl2431 bool = l >= 0
	for yyj2431 := 0; ; yyj2431++ {
		if yyhl2431 {
			if yyj2431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2431Slc = r.DecodeBytes(yys2431Slc, true, true)
		yys2431 := string(yys2431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2434 := &x.ObjectMeta
				yyv2434.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2435 := &x.Spec
				yyv2435.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2436 := &x.Status
				yyv2436.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2431)
		} // end switch yys2431
	} // end for yyj2431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2437 int
	var yyb2437 bool
	var yyhl2437 bool = l >= 0
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2440 := &x.ObjectMeta
		yyv2440.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2441 := &x.Spec
		yyv2441.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2442 := &x.Status
		yyv2442.CodecDecodeSelf(d)
	}
	for {
		yyj2437++
		if yyhl2437 {
			yyb2437 = yyj2437 > l
		} else {
			yyb2437 = r.CheckBreak()
		}
		if yyb2437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [4]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[0] = x.Kind != ""
			yyq2444[1] = x.APIVersion != ""
			yyq2444[2] = true
			var yynn2444 int
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(4)
			} else {
				yynn2444 = 1
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
				yynn2444 = 0
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[0] {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[1] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[2] {
					yy2452 := &x.ListMeta
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2452) {
					} else {
						z.EncFallback(yy2452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2454 := &x.ListMeta
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else {
						z.EncFallback(yy2454)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2460 := r.ContainerType()
		if yyct2460 == codecSelferValueTypeMap1234 {
			yyl2460 := r.ReadMapStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2460, d)
			}
		} else if yyct2460 == codecSelferValueTypeArray1234 {
			yyl2460 := r.ReadArrayStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2461Slc
	var yyhl2461 bool = l >= 0
	for yyj2461 := 0; ; yyj2461++ {
		if yyhl2461 {
			if yyj2461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2461Slc = r.DecodeBytes(yys2461Slc, true, true)
		yys2461 := string(yys2461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2464 := &x.ListMeta
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2464) {
				} else {
					z.DecFallback(yyv2464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2466 := &x.Items
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2461)
		} // end switch yys2461
	} // end for yyj2461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2471 := &x.ListMeta
		yym2472 := z.DecBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2471) {
		} else {
			z.DecFallback(yyv2471, false)
		}
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2473 := &x.Items
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2473), d)
		}
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2475 := z.EncBinary()
	_ = yym2475
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2476 := z.DecBinary()
	_ = yym2476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2477 := z.EncBinary()
	_ = yym2477
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2478 := z.DecBinary()
	_ = yym2478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2479 := z.EncBinary()
		_ = yym2479
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2480 := !z.EncBinary()
			yy2arr2480 := z.EncBasicHandle().StructToArray
			var yyq2480 [1]bool
			_, _, _ = yysep2480, yyq2480, yy2arr2480
			const yyr2480 bool = false
			yyq2480[0] = true
			var yynn2480 int
			if yyr2480 || yy2arr2480 {
				r.EncodeArrayStart(1)
			} else {
				yynn2480 = 0
				for _, b := range yyq2480 {
					if b {
						yynn2480++
					}
				}
				r.EncodeMapStart(yynn2480)
				yynn2480 = 0
			}
			if yyr2480 || yy2arr2480 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2480[0] {
					yy2482 := &x.LoadBalancer
					yy2482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2480[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2483 := &x.LoadBalancer
					yy2483.CodecEncodeSelf(e)
				}
			}
			if yyr2480 || yy2arr2480 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2484 := z.DecBinary()
	_ = yym2484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2485 := r.ContainerType()
		if yyct2485 == codecSelferValueTypeMap1234 {
			yyl2485 := r.ReadMapStart()
			if yyl2485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2485, d)
			}
		} else if yyct2485 == codecSelferValueTypeArray1234 {
			yyl2485 := r.ReadArrayStart()
			if yyl2485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2486Slc
	var yyhl2486 bool = l >= 0
	for yyj2486 := 0; ; yyj2486++ {
		if yyhl2486 {
			if yyj2486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2486Slc = r.DecodeBytes(yys2486Slc, true, true)
		yys2486 := string(yys2486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2486 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2487 := &x.LoadBalancer
				yyv2487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2486)
		} // end switch yys2486
	} // end for yyj2486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2488 int
	var yyb2488 bool
	var yyhl2488 bool = l >= 0
	yyj2488++
	if yyhl2488 {
		yyb2488 = yyj2488 > l
	} else {
		yyb2488 = r.CheckBreak()
	}
	if yyb2488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2489 := &x.LoadBalancer
		yyv2489.CodecDecodeSelf(d)
	}
	for {
		yyj2488++
		if yyhl2488 {
			yyb2488 = yyj2488 > l
		} else {
			yyb2488 = r.CheckBreak()
		}
		if yyb2488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2490 := z.EncBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2491 := !z.EncBinary()
			yy2arr2491 := z.EncBasicHandle().StructToArray
			var yyq2491 [1]bool
			_, _, _ = yysep2491, yyq2491, yy2arr2491
			const yyr2491 bool = false
			yyq2491[0] = len(x.Ingress) != 0
			var yynn2491 int
			if yyr2491 || yy2arr2491 {
				r.EncodeArrayStart(1)
			} else {
				yynn2491 = 0
				for _, b := range yyq2491 {
					if b {
						yynn2491++
					}
				}
				r.EncodeMapStart(yynn2491)
				yynn2491 = 0
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2493 := z.EncBinary()
						_ = yym2493
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2494 := z.EncBinary()
						_ = yym2494
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2495 := z.DecBinary()
	_ = yym2495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2496 := r.ContainerType()
		if yyct2496 == codecSelferValueTypeMap1234 {
			yyl2496 := r.ReadMapStart()
			if yyl2496 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2496, d)
			}
		} else if yyct2496 == codecSelferValueTypeArray1234 {
			yyl2496 := r.ReadArrayStart()
			if yyl2496 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2497Slc
	var yyhl2497 bool = l >= 0
	for yyj2497 := 0; ; yyj2497++ {
		if yyhl2497 {
			if yyj2497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2497Slc = r.DecodeBytes(yys2497Slc, true, true)
		yys2497 := string(yys2497Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2497 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2498 := &x.Ingress
				yym2499 := z.DecBinary()
				_ = yym2499
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2498), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2497)
		} // end switch yys2497
	} // end for yyj2497
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2500 int
	var yyb2500 bool
	var yyhl2500 bool = l >= 0
	yyj2500++
	if yyhl2500 {
		yyb2500 = yyj2500 > l
	} else {
		yyb2500 = r.CheckBreak()
	}
	if yyb2500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2501 := &x.Ingress
		yym2502 := z.DecBinary()
		_ = yym2502
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2501), d)
		}
	}
	for {
		yyj2500++
		if yyhl2500 {
			yyb2500 = yyj2500 > l
		} else {
			yyb2500 = r.CheckBreak()
		}
		if yyb2500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2503 := z.EncBinary()
		_ = yym2503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2504 := !z.EncBinary()
			yy2arr2504 := z.EncBasicHandle().StructToArray
			var yyq2504 [2]bool
			_, _, _ = yysep2504, yyq2504, yy2arr2504
			const yyr2504 bool = false
			yyq2504[0] = x.IP != ""
			yyq2504[1] = x.Hostname != ""
			var yynn2504 int
			if yyr2504 || yy2arr2504 {
				r.EncodeArrayStart(2)
			} else {
				yynn2504 = 0
				for _, b := range yyq2504 {
					if b {
						yynn2504++
					}
				}
				r.EncodeMapStart(yynn2504)
				yynn2504 = 0
			}
			if yyr2504 || yy2arr2504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2504[0] {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2504[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2504 || yy2arr2504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2504[1] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2504[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2504 || yy2arr2504 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2511 := z.DecBinary()
	_ = yym2511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2512 := r.ContainerType()
		if yyct2512 == codecSelferValueTypeMap1234 {
			yyl2512 := r.ReadMapStart()
			if yyl2512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2512, d)
			}
		} else if yyct2512 == codecSelferValueTypeArray1234 {
			yyl2512 := r.ReadArrayStart()
			if yyl2512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2513Slc
	var yyhl2513 bool = l >= 0
	for yyj2513 := 0; ; yyj2513++ {
		if yyhl2513 {
			if yyj2513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2513Slc = r.DecodeBytes(yys2513Slc, true, true)
		yys2513 := string(yys2513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2513 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2513)
		} // end switch yys2513
	} // end for yyj2513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2516 int
	var yyb2516 bool
	var yyhl2516 bool = l >= 0
	yyj2516++
	if yyhl2516 {
		yyb2516 = yyj2516 > l
	} else {
		yyb2516 = r.CheckBreak()
	}
	if yyb2516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2516++
	if yyhl2516 {
		yyb2516 = yyj2516 > l
	} else {
		yyb2516 = r.CheckBreak()
	}
	if yyb2516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2516++
		if yyhl2516 {
			yyb2516 = yyj2516 > l
		} else {
			yyb2516 = r.CheckBreak()
		}
		if yyb2516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2519 := z.EncBinary()
		_ = yym2519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2520 := !z.EncBinary()
			yy2arr2520 := z.EncBasicHandle().StructToArray
			var yyq2520 [10]bool
			_, _, _ = yysep2520, yyq2520, yy2arr2520
			const yyr2520 bool = false
			yyq2520[1] = len(x.Selector) != 0
			yyq2520[2] = x.ClusterIP != ""
			yyq2520[3] = x.Type != ""
			yyq2520[4] = len(x.ExternalIPs) != 0
			yyq2520[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2520[6] = x.SessionAffinity != ""
			yyq2520[7] = x.LoadBalancerIP != ""
			yyq2520[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2520[9] = x.ExternalName != ""
			var yynn2520 int
			if yyr2520 || yy2arr2520 {
				r.EncodeArrayStart(10)
			} else {
				yynn2520 = 1
				for _, b := range yyq2520 {
					if b {
						yynn2520++
					}
				}
				r.EncodeMapStart(yynn2520)
				yynn2520 = 0
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2525 := z.EncBinary()
						_ = yym2525
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2526 := z.EncBinary()
						_ = yym2526
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[2] {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2532 := z.EncBinary()
						_ = yym2532
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2520[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2533 := z.EncBinary()
						_ = yym2533
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2535 := z.EncBinary()
						_ = yym2535
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2520[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2536 := z.EncBinary()
						_ = yym2536
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[7] {
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2542 := z.EncBinary()
						_ = yym2542
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2520[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2543 := z.EncBinary()
						_ = yym2543
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2520[9] {
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2520[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2520 || yy2arr2520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2547 := z.DecBinary()
	_ = yym2547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2548 := r.ContainerType()
		if yyct2548 == codecSelferValueTypeMap1234 {
			yyl2548 := r.ReadMapStart()
			if yyl2548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2548, d)
			}
		} else if yyct2548 == codecSelferValueTypeArray1234 {
			yyl2548 := r.ReadArrayStart()
			if yyl2548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2549Slc
	var yyhl2549 bool = l >= 0
	for yyj2549 := 0; ; yyj2549++ {
		if yyhl2549 {
			if yyj2549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2549Slc = r.DecodeBytes(yys2549Slc, true, true)
		yys2549 := string(yys2549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2549 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2550 := &x.Ports
				yym2551 := z.DecBinary()
				_ = yym2551
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2550), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2552 := &x.Selector
				yym2553 := z.DecBinary()
				_ = yym2553
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2552, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2556 := &x.ExternalIPs
				yym2557 := z.DecBinary()
				_ = yym2557
				if false {
				} else {
					z.F.DecSliceStringX(yyv2556, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2558 := &x.DeprecatedPublicIPs
				yym2559 := z.DecBinary()
				_ = yym2559
				if false {
				} else {
					z.F.DecSliceStringX(yyv2558, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2562 := &x.LoadBalancerSourceRanges
				yym2563 := z.DecBinary()
				_ = yym2563
				if false {
				} else {
					z.F.DecSliceStringX(yyv2562, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2549)
		} // end switch yys2549
	} // end for yyj2549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2565 int
	var yyb2565 bool
	var yyhl2565 bool = l >= 0
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2566 := &x.Ports
		yym2567 := z.DecBinary()
		_ = yym2567
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2566), d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2568 := &x.Selector
		yym2569 := z.DecBinary()
		_ = yym2569
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2568, false, d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2572 := &x.ExternalIPs
		yym2573 := z.DecBinary()
		_ = yym2573
		if false {
		} else {
			z.F.DecSliceStringX(yyv2572, false, d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2574 := &x.DeprecatedPublicIPs
		yym2575 := z.DecBinary()
		_ = yym2575
		if false {
		} else {
			z.F.DecSliceStringX(yyv2574, false, d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2578 := &x.LoadBalancerSourceRanges
		yym2579 := z.DecBinary()
		_ = yym2579
		if false {
		} else {
			z.F.DecSliceStringX(yyv2578, false, d)
		}
	}
	yyj2565++
	if yyhl2565 {
		yyb2565 = yyj2565 > l
	} else {
		yyb2565 = r.CheckBreak()
	}
	if yyb2565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2565++
		if yyhl2565 {
			yyb2565 = yyj2565 > l
		} else {
			yyb2565 = r.CheckBreak()
		}
		if yyb2565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2581 := z.EncBinary()
		_ = yym2581
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2582 := !z.EncBinary()
			yy2arr2582 := z.EncBasicHandle().StructToArray
			var yyq2582 [5]bool
			_, _, _ = yysep2582, yyq2582, yy2arr2582
			const yyr2582 bool = false
			yyq2582[0] = x.Name != ""
			yyq2582[1] = x.Protocol != ""
			yyq2582[3] = true
			yyq2582[4] = x.NodePort != 0
			var yynn2582 int
			if yyr2582 || yy2arr2582 {
				r.EncodeArrayStart(5)
			} else {
				yynn2582 = 1
				for _, b := range yyq2582 {
					if b {
						yynn2582++
					}
				}
				r.EncodeMapStart(yynn2582)
				yynn2582 = 0
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2582[0] {
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2582[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2582[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2582[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2588 := z.EncBinary()
				_ = yym2588
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2589 := z.EncBinary()
				_ = yym2589
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2582[3] {
					yy2591 := &x.TargetPort
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2591) {
					} else if !yym2592 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2591)
					} else {
						z.EncFallback(yy2591)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2582[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2593 := &x.TargetPort
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2593) {
					} else if !yym2594 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2593)
					} else {
						z.EncFallback(yy2593)
					}
				}
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2582[4] {
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2582[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2582 || yy2arr2582 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2598 := z.DecBinary()
	_ = yym2598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2599 := r.ContainerType()
		if yyct2599 == codecSelferValueTypeMap1234 {
			yyl2599 := r.ReadMapStart()
			if yyl2599 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2599, d)
			}
		} else if yyct2599 == codecSelferValueTypeArray1234 {
			yyl2599 := r.ReadArrayStart()
			if yyl2599 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2599, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2600Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2600Slc
	var yyhl2600 bool = l >= 0
	for yyj2600 := 0; ; yyj2600++ {
		if yyhl2600 {
			if yyj2600 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2600Slc = r.DecodeBytes(yys2600Slc, true, true)
		yys2600 := string(yys2600Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2600 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2604 := &x.TargetPort
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2604) {
				} else if !yym2605 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2604)
				} else {
					z.DecFallback(yyv2604, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2600)
		} // end switch yys2600
	} // end for yyj2600
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2607 int
	var yyb2607 bool
	var yyhl2607 bool = l >= 0
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2611 := &x.TargetPort
		yym2612 := z.DecBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2611) {
		} else if !yym2612 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2611)
		} else {
			z.DecFallback(yyv2611, false)
		}
	}
	yyj2607++
	if yyhl2607 {
		yyb2607 = yyj2607 > l
	} else {
		yyb2607 = r.CheckBreak()
	}
	if yyb2607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2607++
		if yyhl2607 {
			yyb2607 = yyj2607 > l
		} else {
			yyb2607 = r.CheckBreak()
		}
		if yyb2607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2614 := z.EncBinary()
		_ = yym2614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2615 := !z.EncBinary()
			yy2arr2615 := z.EncBasicHandle().StructToArray
			var yyq2615 [5]bool
			_, _, _ = yysep2615, yyq2615, yy2arr2615
			const yyr2615 bool = false
			yyq2615[0] = x.Kind != ""
			yyq2615[1] = x.APIVersion != ""
			yyq2615[2] = true
			yyq2615[3] = true
			yyq2615[4] = true
			var yynn2615 int
			if yyr2615 || yy2arr2615 {
				r.EncodeArrayStart(5)
			} else {
				yynn2615 = 0
				for _, b := range yyq2615 {
					if b {
						yynn2615++
					}
				}
				r.EncodeMapStart(yynn2615)
				yynn2615 = 0
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[0] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[1] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[2] {
					yy2623 := &x.ObjectMeta
					yy2623.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2624 := &x.ObjectMeta
					yy2624.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[3] {
					yy2626 := &x.Spec
					yy2626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.Spec
					yy2627.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[4] {
					yy2629 := &x.Status
					yy2629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2630 := &x.Status
					yy2630.CodecEncodeSelf(e)
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2631 := z.DecBinary()
	_ = yym2631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2632 := r.ContainerType()
		if yyct2632 == codecSelferValueTypeMap1234 {
			yyl2632 := r.ReadMapStart()
			if yyl2632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2632, d)
			}
		} else if yyct2632 == codecSelferValueTypeArray1234 {
			yyl2632 := r.ReadArrayStart()
			if yyl2632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2633Slc
	var yyhl2633 bool = l >= 0
	for yyj2633 := 0; ; yyj2633++ {
		if yyhl2633 {
			if yyj2633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2633Slc = r.DecodeBytes(yys2633Slc, true, true)
		yys2633 := string(yys2633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2633 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2636 := &x.ObjectMeta
				yyv2636.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2637 := &x.Spec
				yyv2637.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2638 := &x.Status
				yyv2638.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2633)
		} // end switch yys2633
	} // end for yyj2633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2642 := &x.ObjectMeta
		yyv2642.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2643 := &x.Spec
		yyv2643.CodecDecodeSelf(d)
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2644 := &x.Status
		yyv2644.CodecDecodeSelf(d)
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2645 := z.EncBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2646 := !z.EncBinary()
			yy2arr2646 := z.EncBasicHandle().StructToArray
			var yyq2646 [4]bool
			_, _, _ = yysep2646, yyq2646, yy2arr2646
			const yyr2646 bool = false
			yyq2646[0] = x.Kind != ""
			yyq2646[1] = x.APIVersion != ""
			yyq2646[2] = true
			var yynn2646 int
			if yyr2646 || yy2arr2646 {
				r.EncodeArrayStart(4)
			} else {
				yynn2646 = 1
				for _, b := range yyq2646 {
					if b {
						yynn2646++
					}
				}
				r.EncodeMapStart(yynn2646)
				yynn2646 = 0
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[0] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[1] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2646[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2646[2] {
					yy2654 := &x.ListMeta
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2654) {
					} else {
						z.EncFallback(yy2654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2646[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2656 := &x.ListMeta
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2656) {
					} else {
						z.EncFallback(yy2656)
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2646 || yy2arr2646 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2661 := z.DecBinary()
	_ = yym2661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2662 := r.ContainerType()
		if yyct2662 == codecSelferValueTypeMap1234 {
			yyl2662 := r.ReadMapStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2662, d)
			}
		} else if yyct2662 == codecSelferValueTypeArray1234 {
			yyl2662 := r.ReadArrayStart()
			if yyl2662 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2663Slc
	var yyhl2663 bool = l >= 0
	for yyj2663 := 0; ; yyj2663++ {
		if yyhl2663 {
			if yyj2663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2663Slc = r.DecodeBytes(yys2663Slc, true, true)
		yys2663 := string(yys2663Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2666 := &x.ListMeta
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2666) {
				} else {
					z.DecFallback(yyv2666, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2668 := &x.Items
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2668), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2663)
		} // end switch yys2663
	} // end for yyj2663
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2673 := &x.ListMeta
		yym2674 := z.DecBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2673) {
		} else {
			z.DecFallback(yyv2673, false)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2675 := &x.Items
		yym2676 := z.DecBinary()
		_ = yym2676
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2675), d)
		}
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2677 := z.EncBinary()
		_ = yym2677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2678 := !z.EncBinary()
			yy2arr2678 := z.EncBasicHandle().StructToArray
			var yyq2678 [5]bool
			_, _, _ = yysep2678, yyq2678, yy2arr2678
			const yyr2678 bool = false
			yyq2678[0] = x.Kind != ""
			yyq2678[1] = x.APIVersion != ""
			yyq2678[2] = true
			yyq2678[3] = len(x.Secrets) != 0
			yyq2678[4] = len(x.ImagePullSecrets) != 0
			var yynn2678 int
			if yyr2678 || yy2arr2678 {
				r.EncodeArrayStart(5)
			} else {
				yynn2678 = 0
				for _, b := range yyq2678 {
					if b {
						yynn2678++
					}
				}
				r.EncodeMapStart(yynn2678)
				yynn2678 = 0
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2678[0] {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2678[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2678[1] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2678[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2678[2] {
					yy2686 := &x.ObjectMeta
					yy2686.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2678[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2687 := &x.ObjectMeta
					yy2687.CodecEncodeSelf(e)
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2678[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2689 := z.EncBinary()
						_ = yym2689
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2678[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2690 := z.EncBinary()
						_ = yym2690
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2678[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2692 := z.EncBinary()
						_ = yym2692
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2678[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2693 := z.EncBinary()
						_ = yym2693
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2678 || yy2arr2678 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2694 := z.DecBinary()
	_ = yym2694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2695 := r.ContainerType()
		if yyct2695 == codecSelferValueTypeMap1234 {
			yyl2695 := r.ReadMapStart()
			if yyl2695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2695, d)
			}
		} else if yyct2695 == codecSelferValueTypeArray1234 {
			yyl2695 := r.ReadArrayStart()
			if yyl2695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2696Slc
	var yyhl2696 bool = l >= 0
	for yyj2696 := 0; ; yyj2696++ {
		if yyhl2696 {
			if yyj2696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2696Slc = r.DecodeBytes(yys2696Slc, true, true)
		yys2696 := string(yys2696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2696 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2699 := &x.ObjectMeta
				yyv2699.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2700 := &x.Secrets
				yym2701 := z.DecBinary()
				_ = yym2701
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2700), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2702 := &x.ImagePullSecrets
				yym2703 := z.DecBinary()
				_ = yym2703
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2702), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2696)
		} // end switch yys2696
	} // end for yyj2696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2704 int
	var yyb2704 bool
	var yyhl2704 bool = l >= 0
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2707 := &x.ObjectMeta
		yyv2707.CodecDecodeSelf(d)
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2708 := &x.Secrets
		yym2709 := z.DecBinary()
		_ = yym2709
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2708), d)
		}
	}
	yyj2704++
	if yyhl2704 {
		yyb2704 = yyj2704 > l
	} else {
		yyb2704 = r.CheckBreak()
	}
	if yyb2704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2710 := &x.ImagePullSecrets
		yym2711 := z.DecBinary()
		_ = yym2711
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2710), d)
		}
	}
	for {
		yyj2704++
		if yyhl2704 {
			yyb2704 = yyj2704 > l
		} else {
			yyb2704 = r.CheckBreak()
		}
		if yyb2704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2712 := z.EncBinary()
		_ = yym2712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2713 := !z.EncBinary()
			yy2arr2713 := z.EncBasicHandle().StructToArray
			var yyq2713 [4]bool
			_, _, _ = yysep2713, yyq2713, yy2arr2713
			const yyr2713 bool = false
			yyq2713[0] = x.Kind != ""
			yyq2713[1] = x.APIVersion != ""
			yyq2713[2] = true
			var yynn2713 int
			if yyr2713 || yy2arr2713 {
				r.EncodeArrayStart(4)
			} else {
				yynn2713 = 1
				for _, b := range yyq2713 {
					if b {
						yynn2713++
					}
				}
				r.EncodeMapStart(yynn2713)
				yynn2713 = 0
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[0] {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[1] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[2] {
					yy2721 := &x.ListMeta
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2721) {
					} else {
						z.EncFallback(yy2721)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2723 := &x.ListMeta
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2723) {
					} else {
						z.EncFallback(yy2723)
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2728 := z.DecBinary()
	_ = yym2728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2729 := r.ContainerType()
		if yyct2729 == codecSelferValueTypeMap1234 {
			yyl2729 := r.ReadMapStart()
			if yyl2729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2729, d)
			}
		} else if yyct2729 == codecSelferValueTypeArray1234 {
			yyl2729 := r.ReadArrayStart()
			if yyl2729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2730Slc
	var yyhl2730 bool = l >= 0
	for yyj2730 := 0; ; yyj2730++ {
		if yyhl2730 {
			if yyj2730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2730Slc = r.DecodeBytes(yys2730Slc, true, true)
		yys2730 := string(yys2730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2730 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2733 := &x.ListMeta
				yym2734 := z.DecBinary()
				_ = yym2734
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2733) {
				} else {
					z.DecFallback(yyv2733, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2735 := &x.Items
				yym2736 := z.DecBinary()
				_ = yym2736
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2735), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2730)
		} // end switch yys2730
	} // end for yyj2730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2737 int
	var yyb2737 bool
	var yyhl2737 bool = l >= 0
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2740 := &x.ListMeta
		yym2741 := z.DecBinary()
		_ = yym2741
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2740) {
		} else {
			z.DecFallback(yyv2740, false)
		}
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2742 := &x.Items
		yym2743 := z.DecBinary()
		_ = yym2743
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2742), d)
		}
	}
	for {
		yyj2737++
		if yyhl2737 {
			yyb2737 = yyj2737 > l
		} else {
			yyb2737 = r.CheckBreak()
		}
		if yyb2737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2744 := z.EncBinary()
		_ = yym2744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2745 := !z.EncBinary()
			yy2arr2745 := z.EncBasicHandle().StructToArray
			var yyq2745 [4]bool
			_, _, _ = yysep2745, yyq2745, yy2arr2745
			const yyr2745 bool = false
			yyq2745[0] = x.Kind != ""
			yyq2745[1] = x.APIVersion != ""
			yyq2745[2] = true
			var yynn2745 int
			if yyr2745 || yy2arr2745 {
				r.EncodeArrayStart(4)
			} else {
				yynn2745 = 1
				for _, b := range yyq2745 {
					if b {
						yynn2745++
					}
				}
				r.EncodeMapStart(yynn2745)
				yynn2745 = 0
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[0] {
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[1] {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[2] {
					yy2753 := &x.ObjectMeta
					yy2753.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2754 := &x.ObjectMeta
					yy2754.CodecEncodeSelf(e)
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2758 := z.DecBinary()
	_ = yym2758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2759 := r.ContainerType()
		if yyct2759 == codecSelferValueTypeMap1234 {
			yyl2759 := r.ReadMapStart()
			if yyl2759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2759, d)
			}
		} else if yyct2759 == codecSelferValueTypeArray1234 {
			yyl2759 := r.ReadArrayStart()
			if yyl2759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2760Slc
	var yyhl2760 bool = l >= 0
	for yyj2760 := 0; ; yyj2760++ {
		if yyhl2760 {
			if yyj2760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2760Slc = r.DecodeBytes(yys2760Slc, true, true)
		yys2760 := string(yys2760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2760 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2763 := &x.ObjectMeta
				yyv2763.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2764 := &x.Subsets
				yym2765 := z.DecBinary()
				_ = yym2765
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2764), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2760)
		} // end switch yys2760
	} // end for yyj2760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2766 int
	var yyb2766 bool
	var yyhl2766 bool = l >= 0
	yyj2766++
	if yyhl2766 {
		yyb2766 = yyj2766 > l
	} else {
		yyb2766 = r.CheckBreak()
	}
	if yyb2766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2766++
	if yyhl2766 {
		yyb2766 = yyj2766 > l
	} else {
		yyb2766 = r.CheckBreak()
	}
	if yyb2766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2766++
	if yyhl2766 {
		yyb2766 = yyj2766 > l
	} else {
		yyb2766 = r.CheckBreak()
	}
	if yyb2766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2769 := &x.ObjectMeta
		yyv2769.CodecDecodeSelf(d)
	}
	yyj2766++
	if yyhl2766 {
		yyb2766 = yyj2766 > l
	} else {
		yyb2766 = r.CheckBreak()
	}
	if yyb2766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2770 := &x.Subsets
		yym2771 := z.DecBinary()
		_ = yym2771
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2770), d)
		}
	}
	for {
		yyj2766++
		if yyhl2766 {
			yyb2766 = yyj2766 > l
		} else {
			yyb2766 = r.CheckBreak()
		}
		if yyb2766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2772 := z.EncBinary()
		_ = yym2772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2773 := !z.EncBinary()
			yy2arr2773 := z.EncBasicHandle().StructToArray
			var yyq2773 [3]bool
			_, _, _ = yysep2773, yyq2773, yy2arr2773
			const yyr2773 bool = false
			yyq2773[0] = len(x.Addresses) != 0
			yyq2773[1] = len(x.NotReadyAddresses) != 0
			yyq2773[2] = len(x.Ports) != 0
			var yynn2773 int
			if yyr2773 || yy2arr2773 {
				r.EncodeArrayStart(3)
			} else {
				yynn2773 = 0
				for _, b := range yyq2773 {
					if b {
						yynn2773++
					}
				}
				r.EncodeMapStart(yynn2773)
				yynn2773 = 0
			}
			if yyr2773 || yy2arr2773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2773[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2775 := z.EncBinary()
						_ = yym2775
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2773[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2776 := z.EncBinary()
						_ = yym2776
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2773 || yy2arr2773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2773[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2778 := z.EncBinary()
						_ = yym2778
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2773[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2779 := z.EncBinary()
						_ = yym2779
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2773 || yy2arr2773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2773[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2781 := z.EncBinary()
						_ = yym2781
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2773[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2782 := z.EncBinary()
						_ = yym2782
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2773 || yy2arr2773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2783 := z.DecBinary()
	_ = yym2783
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2784 := r.ContainerType()
		if yyct2784 == codecSelferValueTypeMap1234 {
			yyl2784 := r.ReadMapStart()
			if yyl2784 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2784, d)
			}
		} else if yyct2784 == codecSelferValueTypeArray1234 {
			yyl2784 := r.ReadArrayStart()
			if yyl2784 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2784, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2785Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2785Slc
	var yyhl2785 bool = l >= 0
	for yyj2785 := 0; ; yyj2785++ {
		if yyhl2785 {
			if yyj2785 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2785Slc = r.DecodeBytes(yys2785Slc, true, true)
		yys2785 := string(yys2785Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2785 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2786 := &x.Addresses
				yym2787 := z.DecBinary()
				_ = yym2787
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2786), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2788 := &x.NotReadyAddresses
				yym2789 := z.DecBinary()
				_ = yym2789
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2788), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2790 := &x.Ports
				yym2791 := z.DecBinary()
				_ = yym2791
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2790), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2785)
		} // end switch yys2785
	} // end for yyj2785
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2792 int
	var yyb2792 bool
	var yyhl2792 bool = l >= 0
	yyj2792++
	if yyhl2792 {
		yyb2792 = yyj2792 > l
	} else {
		yyb2792 = r.CheckBreak()
	}
	if yyb2792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2793 := &x.Addresses
		yym2794 := z.DecBinary()
		_ = yym2794
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2793), d)
		}
	}
	yyj2792++
	if yyhl2792 {
		yyb2792 = yyj2792 > l
	} else {
		yyb2792 = r.CheckBreak()
	}
	if yyb2792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2795 := &x.NotReadyAddresses
		yym2796 := z.DecBinary()
		_ = yym2796
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2795), d)
		}
	}
	yyj2792++
	if yyhl2792 {
		yyb2792 = yyj2792 > l
	} else {
		yyb2792 = r.CheckBreak()
	}
	if yyb2792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2797 := &x.Ports
		yym2798 := z.DecBinary()
		_ = yym2798
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2797), d)
		}
	}
	for {
		yyj2792++
		if yyhl2792 {
			yyb2792 = yyj2792 > l
		} else {
			yyb2792 = r.CheckBreak()
		}
		if yyb2792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2799 := z.EncBinary()
		_ = yym2799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2800 := !z.EncBinary()
			yy2arr2800 := z.EncBasicHandle().StructToArray
			var yyq2800 [4]bool
			_, _, _ = yysep2800, yyq2800, yy2arr2800
			const yyr2800 bool = false
			yyq2800[1] = x.Hostname != ""
			yyq2800[2] = x.NodeName != nil
			yyq2800[3] = x.TargetRef != nil
			var yynn2800 int
			if yyr2800 || yy2arr2800 {
				r.EncodeArrayStart(4)
			} else {
				yynn2800 = 1
				for _, b := range yyq2800 {
					if b {
						yynn2800++
					}
				}
				r.EncodeMapStart(yynn2800)
				yynn2800 = 0
			}
			if yyr2800 || yy2arr2800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2802 := z.EncBinary()
				_ = yym2802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2803 := z.EncBinary()
				_ = yym2803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2800 || yy2arr2800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2800[1] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2800[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2808 := *x.NodeName
						yym2809 := z.EncBinary()
						_ = yym2809
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2808))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2810 := *x.NodeName
						yym2811 := z.EncBinary()
						_ = yym2811
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2810))
						}
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2800[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2800[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2813 := z.DecBinary()
	_ = yym2813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2814 := r.ContainerType()
		if yyct2814 == codecSelferValueTypeMap1234 {
			yyl2814 := r.ReadMapStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2814, d)
			}
		} else if yyct2814 == codecSelferValueTypeArray1234 {
			yyl2814 := r.ReadArrayStart()
			if yyl2814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2815Slc
	var yyhl2815 bool = l >= 0
	for yyj2815 := 0; ; yyj2815++ {
		if yyhl2815 {
			if yyj2815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2815Slc = r.DecodeBytes(yys2815Slc, true, true)
		yys2815 := string(yys2815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2815 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2819 := z.DecBinary()
				_ = yym2819
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2815)
		} // end switch yys2815
	} // end for yyj2815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2821 int
	var yyb2821 bool
	var yyhl2821 bool = l >= 0
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2825 := z.DecBinary()
		_ = yym2825
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2821++
	if yyhl2821 {
		yyb2821 = yyj2821 > l
	} else {
		yyb2821 = r.CheckBreak()
	}
	if yyb2821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2821++
		if yyhl2821 {
			yyb2821 = yyj2821 > l
		} else {
			yyb2821 = r.CheckBreak()
		}
		if yyb2821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2827 := z.EncBinary()
		_ = yym2827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2828 := !z.EncBinary()
			yy2arr2828 := z.EncBasicHandle().StructToArray
			var yyq2828 [3]bool
			_, _, _ = yysep2828, yyq2828, yy2arr2828
			const yyr2828 bool = false
			yyq2828[0] = x.Name != ""
			yyq2828[2] = x.Protocol != ""
			var yynn2828 int
			if yyr2828 || yy2arr2828 {
				r.EncodeArrayStart(3)
			} else {
				yynn2828 = 1
				for _, b := range yyq2828 {
					if b {
						yynn2828++
					}
				}
				r.EncodeMapStart(yynn2828)
				yynn2828 = 0
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[0] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2834 := z.EncBinary()
				_ = yym2834
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2836 := z.DecBinary()
	_ = yym2836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2837 := r.ContainerType()
		if yyct2837 == codecSelferValueTypeMap1234 {
			yyl2837 := r.ReadMapStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2837, d)
			}
		} else if yyct2837 == codecSelferValueTypeArray1234 {
			yyl2837 := r.ReadArrayStart()
			if yyl2837 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2838Slc
	var yyhl2838 bool = l >= 0
	for yyj2838 := 0; ; yyj2838++ {
		if yyhl2838 {
			if yyj2838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2838Slc = r.DecodeBytes(yys2838Slc, true, true)
		yys2838 := string(yys2838Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2838 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2838)
		} // end switch yys2838
	} // end for yyj2838
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2842 int
	var yyb2842 bool
	var yyhl2842 bool = l >= 0
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2842++
	if yyhl2842 {
		yyb2842 = yyj2842 > l
	} else {
		yyb2842 = r.CheckBreak()
	}
	if yyb2842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2842++
		if yyhl2842 {
			yyb2842 = yyj2842 > l
		} else {
			yyb2842 = r.CheckBreak()
		}
		if yyb2842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2846 := z.EncBinary()
		_ = yym2846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2847 := !z.EncBinary()
			yy2arr2847 := z.EncBasicHandle().StructToArray
			var yyq2847 [4]bool
			_, _, _ = yysep2847, yyq2847, yy2arr2847
			const yyr2847 bool = false
			yyq2847[0] = x.Kind != ""
			yyq2847[1] = x.APIVersion != ""
			yyq2847[2] = true
			var yynn2847 int
			if yyr2847 || yy2arr2847 {
				r.EncodeArrayStart(4)
			} else {
				yynn2847 = 1
				for _, b := range yyq2847 {
					if b {
						yynn2847++
					}
				}
				r.EncodeMapStart(yynn2847)
				yynn2847 = 0
			}
			if yyr2847 || yy2arr2847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2847[0] {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2847[1] {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2847[2] {
					yy2855 := &x.ListMeta
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2855) {
					} else {
						z.EncFallback(yy2855)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2847[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2857 := &x.ListMeta
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2857) {
					} else {
						z.EncFallback(yy2857)
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2862 := z.DecBinary()
	_ = yym2862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2863 := r.ContainerType()
		if yyct2863 == codecSelferValueTypeMap1234 {
			yyl2863 := r.ReadMapStart()
			if yyl2863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2863, d)
			}
		} else if yyct2863 == codecSelferValueTypeArray1234 {
			yyl2863 := r.ReadArrayStart()
			if yyl2863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2864Slc
	var yyhl2864 bool = l >= 0
	for yyj2864 := 0; ; yyj2864++ {
		if yyhl2864 {
			if yyj2864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2864Slc = r.DecodeBytes(yys2864Slc, true, true)
		yys2864 := string(yys2864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2864 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2867 := &x.ListMeta
				yym2868 := z.DecBinary()
				_ = yym2868
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2867) {
				} else {
					z.DecFallback(yyv2867, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2869 := &x.Items
				yym2870 := z.DecBinary()
				_ = yym2870
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2864)
		} // end switch yys2864
	} // end for yyj2864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2871 int
	var yyb2871 bool
	var yyhl2871 bool = l >= 0
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2874 := &x.ListMeta
		yym2875 := z.DecBinary()
		_ = yym2875
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2874) {
		} else {
			z.DecFallback(yyv2874, false)
		}
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2876 := &x.Items
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2876), d)
		}
	}
	for {
		yyj2871++
		if yyhl2871 {
			yyb2871 = yyj2871 > l
		} else {
			yyb2871 = r.CheckBreak()
		}
		if yyb2871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2878 := z.EncBinary()
		_ = yym2878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2879 := !z.EncBinary()
			yy2arr2879 := z.EncBasicHandle().StructToArray
			var yyq2879 [4]bool
			_, _, _ = yysep2879, yyq2879, yy2arr2879
			const yyr2879 bool = false
			yyq2879[0] = x.PodCIDR != ""
			yyq2879[1] = x.ExternalID != ""
			yyq2879[2] = x.ProviderID != ""
			yyq2879[3] = x.Unschedulable != false
			var yynn2879 int
			if yyr2879 || yy2arr2879 {
				r.EncodeArrayStart(4)
			} else {
				yynn2879 = 0
				for _, b := range yyq2879 {
					if b {
						yynn2879++
					}
				}
				r.EncodeMapStart(yynn2879)
				yynn2879 = 0
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[0] {
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[1] {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[2] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[3] {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2879[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2892 := z.DecBinary()
	_ = yym2892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2893 := r.ContainerType()
		if yyct2893 == codecSelferValueTypeMap1234 {
			yyl2893 := r.ReadMapStart()
			if yyl2893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2893, d)
			}
		} else if yyct2893 == codecSelferValueTypeArray1234 {
			yyl2893 := r.ReadArrayStart()
			if yyl2893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2894Slc
	var yyhl2894 bool = l >= 0
	for yyj2894 := 0; ; yyj2894++ {
		if yyhl2894 {
			if yyj2894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2894Slc = r.DecodeBytes(yys2894Slc, true, true)
		yys2894 := string(yys2894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2894 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2894)
		} // end switch yys2894
	} // end for yyj2894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2899 int
	var yyb2899 bool
	var yyhl2899 bool = l >= 0
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2899++
		if yyhl2899 {
			yyb2899 = yyj2899 > l
		} else {
			yyb2899 = r.CheckBreak()
		}
		if yyb2899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2904 := z.EncBinary()
		_ = yym2904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2905 := !z.EncBinary()
			yy2arr2905 := z.EncBasicHandle().StructToArray
			var yyq2905 [1]bool
			_, _, _ = yysep2905, yyq2905, yy2arr2905
			const yyr2905 bool = false
			var yynn2905 int
			if yyr2905 || yy2arr2905 {
				r.EncodeArrayStart(1)
			} else {
				yynn2905 = 1
				for _, b := range yyq2905 {
					if b {
						yynn2905++
					}
				}
				r.EncodeMapStart(yynn2905)
				yynn2905 = 0
			}
			if yyr2905 || yy2arr2905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2907 := z.EncBinary()
				_ = yym2907
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2908 := z.EncBinary()
				_ = yym2908
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2905 || yy2arr2905 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2909 := z.DecBinary()
	_ = yym2909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2910 := r.ContainerType()
		if yyct2910 == codecSelferValueTypeMap1234 {
			yyl2910 := r.ReadMapStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2910, d)
			}
		} else if yyct2910 == codecSelferValueTypeArray1234 {
			yyl2910 := r.ReadArrayStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2911Slc
	var yyhl2911 bool = l >= 0
	for yyj2911 := 0; ; yyj2911++ {
		if yyhl2911 {
			if yyj2911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2911Slc = r.DecodeBytes(yys2911Slc, true, true)
		yys2911 := string(yys2911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2911 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2911)
		} // end switch yys2911
	} // end for yyj2911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2913 int
	var yyb2913 bool
	var yyhl2913 bool = l >= 0
	yyj2913++
	if yyhl2913 {
		yyb2913 = yyj2913 > l
	} else {
		yyb2913 = r.CheckBreak()
	}
	if yyb2913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2913++
		if yyhl2913 {
			yyb2913 = yyj2913 > l
		} else {
			yyb2913 = r.CheckBreak()
		}
		if yyb2913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2915 := z.EncBinary()
		_ = yym2915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2916 := !z.EncBinary()
			yy2arr2916 := z.EncBasicHandle().StructToArray
			var yyq2916 [1]bool
			_, _, _ = yysep2916, yyq2916, yy2arr2916
			const yyr2916 bool = false
			yyq2916[0] = true
			var yynn2916 int
			if yyr2916 || yy2arr2916 {
				r.EncodeArrayStart(1)
			} else {
				yynn2916 = 0
				for _, b := range yyq2916 {
					if b {
						yynn2916++
					}
				}
				r.EncodeMapStart(yynn2916)
				yynn2916 = 0
			}
			if yyr2916 || yy2arr2916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2916[0] {
					yy2918 := &x.KubeletEndpoint
					yy2918.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2916[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2919 := &x.KubeletEndpoint
					yy2919.CodecEncodeSelf(e)
				}
			}
			if yyr2916 || yy2arr2916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2920 := z.DecBinary()
	_ = yym2920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2921 := r.ContainerType()
		if yyct2921 == codecSelferValueTypeMap1234 {
			yyl2921 := r.ReadMapStart()
			if yyl2921 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2921, d)
			}
		} else if yyct2921 == codecSelferValueTypeArray1234 {
			yyl2921 := r.ReadArrayStart()
			if yyl2921 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2922Slc
	var yyhl2922 bool = l >= 0
	for yyj2922 := 0; ; yyj2922++ {
		if yyhl2922 {
			if yyj2922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2922Slc = r.DecodeBytes(yys2922Slc, true, true)
		yys2922 := string(yys2922Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2922 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2923 := &x.KubeletEndpoint
				yyv2923.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2922)
		} // end switch yys2922
	} // end for yyj2922
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2924 int
	var yyb2924 bool
	var yyhl2924 bool = l >= 0
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2925 := &x.KubeletEndpoint
		yyv2925.CodecDecodeSelf(d)
	}
	for {
		yyj2924++
		if yyhl2924 {
			yyb2924 = yyj2924 > l
		} else {
			yyb2924 = r.CheckBreak()
		}
		if yyb2924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2926 := z.EncBinary()
		_ = yym2926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2927 := !z.EncBinary()
			yy2arr2927 := z.EncBasicHandle().StructToArray
			var yyq2927 [10]bool
			_, _, _ = yysep2927, yyq2927, yy2arr2927
			const yyr2927 bool = false
			var yynn2927 int
			if yyr2927 || yy2arr2927 {
				r.EncodeArrayStart(10)
			} else {
				yynn2927 = 10
				for _, b := range yyq2927 {
					if b {
						yynn2927++
					}
				}
				r.EncodeMapStart(yynn2927)
				yynn2927 = 0
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2929 := z.EncBinary()
				_ = yym2929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2932 := z.EncBinary()
				_ = yym2932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2935 := z.EncBinary()
				_ = yym2935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2936 := z.EncBinary()
				_ = yym2936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2938 := z.EncBinary()
				_ = yym2938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2939 := z.EncBinary()
				_ = yym2939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2941 := z.EncBinary()
				_ = yym2941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2942 := z.EncBinary()
				_ = yym2942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2944 := z.EncBinary()
				_ = yym2944
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2945 := z.EncBinary()
				_ = yym2945
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2947 := z.EncBinary()
				_ = yym2947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2950 := z.EncBinary()
				_ = yym2950
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2951 := z.EncBinary()
				_ = yym2951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2953 := z.EncBinary()
				_ = yym2953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2954 := z.EncBinary()
				_ = yym2954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2956 := z.EncBinary()
				_ = yym2956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2957 := z.EncBinary()
				_ = yym2957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2927 || yy2arr2927 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2958 := z.DecBinary()
	_ = yym2958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2959 := r.ContainerType()
		if yyct2959 == codecSelferValueTypeMap1234 {
			yyl2959 := r.ReadMapStart()
			if yyl2959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2959, d)
			}
		} else if yyct2959 == codecSelferValueTypeArray1234 {
			yyl2959 := r.ReadArrayStart()
			if yyl2959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2960Slc
	var yyhl2960 bool = l >= 0
	for yyj2960 := 0; ; yyj2960++ {
		if yyhl2960 {
			if yyj2960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2960Slc = r.DecodeBytes(yys2960Slc, true, true)
		yys2960 := string(yys2960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2960 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2960)
		} // end switch yys2960
	} // end for yyj2960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2971 int
	var yyb2971 bool
	var yyhl2971 bool = l >= 0
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2971++
	if yyhl2971 {
		yyb2971 = yyj2971 > l
	} else {
		yyb2971 = r.CheckBreak()
	}
	if yyb2971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2971++
		if yyhl2971 {
			yyb2971 = yyj2971 > l
		} else {
			yyb2971 = r.CheckBreak()
		}
		if yyb2971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2982 := z.EncBinary()
		_ = yym2982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2983 := !z.EncBinary()
			yy2arr2983 := z.EncBasicHandle().StructToArray
			var yyq2983 [10]bool
			_, _, _ = yysep2983, yyq2983, yy2arr2983
			const yyr2983 bool = false
			yyq2983[0] = len(x.Capacity) != 0
			yyq2983[1] = len(x.Allocatable) != 0
			yyq2983[2] = x.Phase != ""
			yyq2983[3] = len(x.Conditions) != 0
			yyq2983[4] = len(x.Addresses) != 0
			yyq2983[5] = true
			yyq2983[6] = true
			yyq2983[7] = len(x.Images) != 0
			yyq2983[8] = len(x.VolumesInUse) != 0
			yyq2983[9] = len(x.VolumesAttached) != 0
			var yynn2983 int
			if yyr2983 || yy2arr2983 {
				r.EncodeArrayStart(10)
			} else {
				yynn2983 = 0
				for _, b := range yyq2983 {
					if b {
						yynn2983++
					}
				}
				r.EncodeMapStart(yynn2983)
				yynn2983 = 0
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2983[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2988 := z.EncBinary()
						_ = yym2988
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2989 := z.EncBinary()
						_ = yym2989
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2991 := z.EncBinary()
						_ = yym2991
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2992 := z.EncBinary()
						_ = yym2992
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[5] {
					yy2994 := &x.DaemonEndpoints
					yy2994.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2995 := &x.DaemonEndpoints
					yy2995.CodecEncodeSelf(e)
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[6] {
					yy2997 := &x.NodeInfo
					yy2997.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2998 := &x.NodeInfo
					yy2998.CodecEncodeSelf(e)
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3000 := z.EncBinary()
						_ = yym3000
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3001 := z.EncBinary()
						_ = yym3001
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3003 := z.EncBinary()
						_ = yym3003
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3004 := z.EncBinary()
						_ = yym3004
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2983[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3006 := z.EncBinary()
						_ = yym3006
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2983[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3007 := z.EncBinary()
						_ = yym3007
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2983 || yy2arr2983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3008 := z.DecBinary()
	_ = yym3008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3009 := r.ContainerType()
		if yyct3009 == codecSelferValueTypeMap1234 {
			yyl3009 := r.ReadMapStart()
			if yyl3009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3009, d)
			}
		} else if yyct3009 == codecSelferValueTypeArray1234 {
			yyl3009 := r.ReadArrayStart()
			if yyl3009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3010Slc
	var yyhl3010 bool = l >= 0
	for yyj3010 := 0; ; yyj3010++ {
		if yyhl3010 {
			if yyj3010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3010Slc = r.DecodeBytes(yys3010Slc, true, true)
		yys3010 := string(yys3010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3010 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3011 := &x.Capacity
				yyv3011.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3012 := &x.Allocatable
				yyv3012.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3014 := &x.Conditions
				yym3015 := z.DecBinary()
				_ = yym3015
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3014), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3016 := &x.Addresses
				yym3017 := z.DecBinary()
				_ = yym3017
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3016), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3018 := &x.DaemonEndpoints
				yyv3018.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3019 := &x.NodeInfo
				yyv3019.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3020 := &x.Images
				yym3021 := z.DecBinary()
				_ = yym3021
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3020), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3022 := &x.VolumesInUse
				yym3023 := z.DecBinary()
				_ = yym3023
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3022), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3024 := &x.VolumesAttached
				yym3025 := z.DecBinary()
				_ = yym3025
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3024), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3010)
		} // end switch yys3010
	} // end for yyj3010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3026 int
	var yyb3026 bool
	var yyhl3026 bool = l >= 0
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3027 := &x.Capacity
		yyv3027.CodecDecodeSelf(d)
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3028 := &x.Allocatable
		yyv3028.CodecDecodeSelf(d)
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3030 := &x.Conditions
		yym3031 := z.DecBinary()
		_ = yym3031
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3030), d)
		}
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3032 := &x.Addresses
		yym3033 := z.DecBinary()
		_ = yym3033
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3032), d)
		}
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3034 := &x.DaemonEndpoints
		yyv3034.CodecDecodeSelf(d)
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3035 := &x.NodeInfo
		yyv3035.CodecDecodeSelf(d)
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3036 := &x.Images
		yym3037 := z.DecBinary()
		_ = yym3037
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3036), d)
		}
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3038 := &x.VolumesInUse
		yym3039 := z.DecBinary()
		_ = yym3039
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3038), d)
		}
	}
	yyj3026++
	if yyhl3026 {
		yyb3026 = yyj3026 > l
	} else {
		yyb3026 = r.CheckBreak()
	}
	if yyb3026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3040 := &x.VolumesAttached
		yym3041 := z.DecBinary()
		_ = yym3041
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3040), d)
		}
	}
	for {
		yyj3026++
		if yyhl3026 {
			yyb3026 = yyj3026 > l
		} else {
			yyb3026 = r.CheckBreak()
		}
		if yyb3026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3042 := z.EncBinary()
	_ = yym3042
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3043 := z.DecBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3044 := z.EncBinary()
		_ = yym3044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3045 := !z.EncBinary()
			yy2arr3045 := z.EncBasicHandle().StructToArray
			var yyq3045 [2]bool
			_, _, _ = yysep3045, yyq3045, yy2arr3045
			const yyr3045 bool = false
			var yynn3045 int
			if yyr3045 || yy2arr3045 {
				r.EncodeArrayStart(2)
			} else {
				yynn3045 = 2
				for _, b := range yyq3045 {
					if b {
						yynn3045++
					}
				}
				r.EncodeMapStart(yynn3045)
				yynn3045 = 0
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3048 := z.EncBinary()
				_ = yym3048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3049 := z.EncBinary()
				_ = yym3049
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3050 := z.DecBinary()
	_ = yym3050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3051 := r.ContainerType()
		if yyct3051 == codecSelferValueTypeMap1234 {
			yyl3051 := r.ReadMapStart()
			if yyl3051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3051, d)
			}
		} else if yyct3051 == codecSelferValueTypeArray1234 {
			yyl3051 := r.ReadArrayStart()
			if yyl3051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3052Slc
	var yyhl3052 bool = l >= 0
	for yyj3052 := 0; ; yyj3052++ {
		if yyhl3052 {
			if yyj3052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3052Slc = r.DecodeBytes(yys3052Slc, true, true)
		yys3052 := string(yys3052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3052 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3052)
		} // end switch yys3052
	} // end for yyj3052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3055 int
	var yyb3055 bool
	var yyhl3055 bool = l >= 0
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3055++
	if yyhl3055 {
		yyb3055 = yyj3055 > l
	} else {
		yyb3055 = r.CheckBreak()
	}
	if yyb3055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3055++
		if yyhl3055 {
			yyb3055 = yyj3055 > l
		} else {
			yyb3055 = r.CheckBreak()
		}
		if yyb3055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3058 := z.EncBinary()
		_ = yym3058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3059 := !z.EncBinary()
			yy2arr3059 := z.EncBasicHandle().StructToArray
			var yyq3059 [1]bool
			_, _, _ = yysep3059, yyq3059, yy2arr3059
			const yyr3059 bool = false
			yyq3059[0] = len(x.PreferAvoidPods) != 0
			var yynn3059 int
			if yyr3059 || yy2arr3059 {
				r.EncodeArrayStart(1)
			} else {
				yynn3059 = 0
				for _, b := range yyq3059 {
					if b {
						yynn3059++
					}
				}
				r.EncodeMapStart(yynn3059)
				yynn3059 = 0
			}
			if yyr3059 || yy2arr3059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3059[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3061 := z.EncBinary()
						_ = yym3061
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3059[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3062 := z.EncBinary()
						_ = yym3062
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3059 || yy2arr3059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3063 := z.DecBinary()
	_ = yym3063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3064 := r.ContainerType()
		if yyct3064 == codecSelferValueTypeMap1234 {
			yyl3064 := r.ReadMapStart()
			if yyl3064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3064, d)
			}
		} else if yyct3064 == codecSelferValueTypeArray1234 {
			yyl3064 := r.ReadArrayStart()
			if yyl3064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3065Slc
	var yyhl3065 bool = l >= 0
	for yyj3065 := 0; ; yyj3065++ {
		if yyhl3065 {
			if yyj3065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3065Slc = r.DecodeBytes(yys3065Slc, true, true)
		yys3065 := string(yys3065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3065 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3066 := &x.PreferAvoidPods
				yym3067 := z.DecBinary()
				_ = yym3067
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3066), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3065)
		} // end switch yys3065
	} // end for yyj3065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3068 int
	var yyb3068 bool
	var yyhl3068 bool = l >= 0
	yyj3068++
	if yyhl3068 {
		yyb3068 = yyj3068 > l
	} else {
		yyb3068 = r.CheckBreak()
	}
	if yyb3068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3069 := &x.PreferAvoidPods
		yym3070 := z.DecBinary()
		_ = yym3070
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3069), d)
		}
	}
	for {
		yyj3068++
		if yyhl3068 {
			yyb3068 = yyj3068 > l
		} else {
			yyb3068 = r.CheckBreak()
		}
		if yyb3068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3071 := z.EncBinary()
		_ = yym3071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3072 := !z.EncBinary()
			yy2arr3072 := z.EncBasicHandle().StructToArray
			var yyq3072 [4]bool
			_, _, _ = yysep3072, yyq3072, yy2arr3072
			const yyr3072 bool = false
			yyq3072[1] = true
			yyq3072[2] = x.Reason != ""
			yyq3072[3] = x.Message != ""
			var yynn3072 int
			if yyr3072 || yy2arr3072 {
				r.EncodeArrayStart(4)
			} else {
				yynn3072 = 1
				for _, b := range yyq3072 {
					if b {
						yynn3072++
					}
				}
				r.EncodeMapStart(yynn3072)
				yynn3072 = 0
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3074 := &x.PodSignature
				yy3074.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3075 := &x.PodSignature
				yy3075.CodecEncodeSelf(e)
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[1] {
					yy3077 := &x.EvictionTime
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3077) {
					} else if yym3078 {
						z.EncBinaryMarshal(yy3077)
					} else if !yym3078 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3077)
					} else {
						z.EncFallback(yy3077)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3079 := &x.EvictionTime
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3079) {
					} else if yym3080 {
						z.EncBinaryMarshal(yy3079)
					} else if !yym3080 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3079)
					} else {
						z.EncFallback(yy3079)
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[2] {
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3072[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3072[3] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3072[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3072 || yy2arr3072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3087 := z.DecBinary()
	_ = yym3087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3088 := r.ContainerType()
		if yyct3088 == codecSelferValueTypeMap1234 {
			yyl3088 := r.ReadMapStart()
			if yyl3088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3088, d)
			}
		} else if yyct3088 == codecSelferValueTypeArray1234 {
			yyl3088 := r.ReadArrayStart()
			if yyl3088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3089Slc
	var yyhl3089 bool = l >= 0
	for yyj3089 := 0; ; yyj3089++ {
		if yyhl3089 {
			if yyj3089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3089Slc = r.DecodeBytes(yys3089Slc, true, true)
		yys3089 := string(yys3089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3089 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3090 := &x.PodSignature
				yyv3090.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3091 := &x.EvictionTime
				yym3092 := z.DecBinary()
				_ = yym3092
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3091) {
				} else if yym3092 {
					z.DecBinaryUnmarshal(yyv3091)
				} else if !yym3092 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3091)
				} else {
					z.DecFallback(yyv3091, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3089)
		} // end switch yys3089
	} // end for yyj3089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3095 int
	var yyb3095 bool
	var yyhl3095 bool = l >= 0
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3096 := &x.PodSignature
		yyv3096.CodecDecodeSelf(d)
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3097 := &x.EvictionTime
		yym3098 := z.DecBinary()
		_ = yym3098
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3097) {
		} else if yym3098 {
			z.DecBinaryUnmarshal(yyv3097)
		} else if !yym3098 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3097)
		} else {
			z.DecFallback(yyv3097, false)
		}
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3095++
		if yyhl3095 {
			yyb3095 = yyj3095 > l
		} else {
			yyb3095 = r.CheckBreak()
		}
		if yyb3095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3101 := z.EncBinary()
		_ = yym3101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3102 := !z.EncBinary()
			yy2arr3102 := z.EncBasicHandle().StructToArray
			var yyq3102 [1]bool
			_, _, _ = yysep3102, yyq3102, yy2arr3102
			const yyr3102 bool = false
			yyq3102[0] = x.PodController != nil
			var yynn3102 int
			if yyr3102 || yy2arr3102 {
				r.EncodeArrayStart(1)
			} else {
				yynn3102 = 0
				for _, b := range yyq3102 {
					if b {
						yynn3102++
					}
				}
				r.EncodeMapStart(yynn3102)
				yynn3102 = 0
			}
			if yyr3102 || yy2arr3102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3102[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3102[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3102 || yy2arr3102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3104 := z.DecBinary()
	_ = yym3104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3105 := r.ContainerType()
		if yyct3105 == codecSelferValueTypeMap1234 {
			yyl3105 := r.ReadMapStart()
			if yyl3105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3105, d)
			}
		} else if yyct3105 == codecSelferValueTypeArray1234 {
			yyl3105 := r.ReadArrayStart()
			if yyl3105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3106Slc
	var yyhl3106 bool = l >= 0
	for yyj3106 := 0; ; yyj3106++ {
		if yyhl3106 {
			if yyj3106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3106Slc = r.DecodeBytes(yys3106Slc, true, true)
		yys3106 := string(yys3106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3106 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3106)
		} // end switch yys3106
	} // end for yyj3106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3108 int
	var yyb3108 bool
	var yyhl3108 bool = l >= 0
	yyj3108++
	if yyhl3108 {
		yyb3108 = yyj3108 > l
	} else {
		yyb3108 = r.CheckBreak()
	}
	if yyb3108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3108++
		if yyhl3108 {
			yyb3108 = yyj3108 > l
		} else {
			yyb3108 = r.CheckBreak()
		}
		if yyb3108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3110 := z.EncBinary()
		_ = yym3110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3111 := !z.EncBinary()
			yy2arr3111 := z.EncBasicHandle().StructToArray
			var yyq3111 [2]bool
			_, _, _ = yysep3111, yyq3111, yy2arr3111
			const yyr3111 bool = false
			yyq3111[1] = x.SizeBytes != 0
			var yynn3111 int
			if yyr3111 || yy2arr3111 {
				r.EncodeArrayStart(2)
			} else {
				yynn3111 = 1
				for _, b := range yyq3111 {
					if b {
						yynn3111++
					}
				}
				r.EncodeMapStart(yynn3111)
				yynn3111 = 0
			}
			if yyr3111 || yy2arr3111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3111 || yy2arr3111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3111[1] {
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3111[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3117 := z.EncBinary()
					_ = yym3117
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3111 || yy2arr3111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3118 := z.DecBinary()
	_ = yym3118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3119 := r.ContainerType()
		if yyct3119 == codecSelferValueTypeMap1234 {
			yyl3119 := r.ReadMapStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3119, d)
			}
		} else if yyct3119 == codecSelferValueTypeArray1234 {
			yyl3119 := r.ReadArrayStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3120Slc
	var yyhl3120 bool = l >= 0
	for yyj3120 := 0; ; yyj3120++ {
		if yyhl3120 {
			if yyj3120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3120Slc = r.DecodeBytes(yys3120Slc, true, true)
		yys3120 := string(yys3120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3120 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3121 := &x.Names
				yym3122 := z.DecBinary()
				_ = yym3122
				if false {
				} else {
					z.F.DecSliceStringX(yyv3121, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3120)
		} // end switch yys3120
	} // end for yyj3120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3124 int
	var yyb3124 bool
	var yyhl3124 bool = l >= 0
	yyj3124++
	if yyhl3124 {
		yyb3124 = yyj3124 > l
	} else {
		yyb3124 = r.CheckBreak()
	}
	if yyb3124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3125 := &x.Names
		yym3126 := z.DecBinary()
		_ = yym3126
		if false {
		} else {
			z.F.DecSliceStringX(yyv3125, false, d)
		}
	}
	yyj3124++
	if yyhl3124 {
		yyb3124 = yyj3124 > l
	} else {
		yyb3124 = r.CheckBreak()
	}
	if yyb3124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3124++
		if yyhl3124 {
			yyb3124 = yyj3124 > l
		} else {
			yyb3124 = r.CheckBreak()
		}
		if yyb3124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3128 := z.EncBinary()
	_ = yym3128
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3129 := z.DecBinary()
	_ = yym3129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3130 := z.EncBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3131 := z.DecBinary()
	_ = yym3131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3132 := z.EncBinary()
		_ = yym3132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3133 := !z.EncBinary()
			yy2arr3133 := z.EncBasicHandle().StructToArray
			var yyq3133 [6]bool
			_, _, _ = yysep3133, yyq3133, yy2arr3133
			const yyr3133 bool = false
			yyq3133[2] = true
			yyq3133[3] = true
			yyq3133[4] = x.Reason != ""
			yyq3133[5] = x.Message != ""
			var yynn3133 int
			if yyr3133 || yy2arr3133 {
				r.EncodeArrayStart(6)
			} else {
				yynn3133 = 2
				for _, b := range yyq3133 {
					if b {
						yynn3133++
					}
				}
				r.EncodeMapStart(yynn3133)
				yynn3133 = 0
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[2] {
					yy3137 := &x.LastHeartbeatTime
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3137) {
					} else if yym3138 {
						z.EncBinaryMarshal(yy3137)
					} else if !yym3138 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3137)
					} else {
						z.EncFallback(yy3137)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3133[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3139 := &x.LastHeartbeatTime
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3139) {
					} else if yym3140 {
						z.EncBinaryMarshal(yy3139)
					} else if !yym3140 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3139)
					} else {
						z.EncFallback(yy3139)
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[3] {
					yy3142 := &x.LastTransitionTime
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3142) {
					} else if yym3143 {
						z.EncBinaryMarshal(yy3142)
					} else if !yym3143 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3142)
					} else {
						z.EncFallback(yy3142)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3133[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3144 := &x.LastTransitionTime
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3144) {
					} else if yym3145 {
						z.EncBinaryMarshal(yy3144)
					} else if !yym3145 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3144)
					} else {
						z.EncFallback(yy3144)
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[4] {
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3133[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3133[5] {
					yym3150 := z.EncBinary()
					_ = yym3150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3133[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3133 || yy2arr3133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3152 := z.DecBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3153 := r.ContainerType()
		if yyct3153 == codecSelferValueTypeMap1234 {
			yyl3153 := r.ReadMapStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3153, d)
			}
		} else if yyct3153 == codecSelferValueTypeArray1234 {
			yyl3153 := r.ReadArrayStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3154Slc
	var yyhl3154 bool = l >= 0
	for yyj3154 := 0; ; yyj3154++ {
		if yyhl3154 {
			if yyj3154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3154Slc = r.DecodeBytes(yys3154Slc, true, true)
		yys3154 := string(yys3154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3154 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3157 := &x.LastHeartbeatTime
				yym3158 := z.DecBinary()
				_ = yym3158
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3157) {
				} else if yym3158 {
					z.DecBinaryUnmarshal(yyv3157)
				} else if !yym3158 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3157)
				} else {
					z.DecFallback(yyv3157, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3159 := &x.LastTransitionTime
				yym3160 := z.DecBinary()
				_ = yym3160
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3159) {
				} else if yym3160 {
					z.DecBinaryUnmarshal(yyv3159)
				} else if !yym3160 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3159)
				} else {
					z.DecFallback(yyv3159, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3154)
		} // end switch yys3154
	} // end for yyj3154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3163 int
	var yyb3163 bool
	var yyhl3163 bool = l >= 0
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3166 := &x.LastHeartbeatTime
		yym3167 := z.DecBinary()
		_ = yym3167
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3166) {
		} else if yym3167 {
			z.DecBinaryUnmarshal(yyv3166)
		} else if !yym3167 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3166)
		} else {
			z.DecFallback(yyv3166, false)
		}
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3168 := &x.LastTransitionTime
		yym3169 := z.DecBinary()
		_ = yym3169
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3168) {
		} else if yym3169 {
			z.DecBinaryUnmarshal(yyv3168)
		} else if !yym3169 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3168)
		} else {
			z.DecFallback(yyv3168, false)
		}
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3163++
	if yyhl3163 {
		yyb3163 = yyj3163 > l
	} else {
		yyb3163 = r.CheckBreak()
	}
	if yyb3163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3163++
		if yyhl3163 {
			yyb3163 = yyj3163 > l
		} else {
			yyb3163 = r.CheckBreak()
		}
		if yyb3163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3172 := z.EncBinary()
	_ = yym3172
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3173 := z.DecBinary()
	_ = yym3173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3174 := z.EncBinary()
		_ = yym3174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3175 := !z.EncBinary()
			yy2arr3175 := z.EncBasicHandle().StructToArray
			var yyq3175 [2]bool
			_, _, _ = yysep3175, yyq3175, yy2arr3175
			const yyr3175 bool = false
			var yynn3175 int
			if yyr3175 || yy2arr3175 {
				r.EncodeArrayStart(2)
			} else {
				yynn3175 = 2
				for _, b := range yyq3175 {
					if b {
						yynn3175++
					}
				}
				r.EncodeMapStart(yynn3175)
				yynn3175 = 0
			}
			if yyr3175 || yy2arr3175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3175 || yy2arr3175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3178 := z.EncBinary()
				_ = yym3178
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3179 := z.EncBinary()
				_ = yym3179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3175 || yy2arr3175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3180 := z.DecBinary()
	_ = yym3180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3181 := r.ContainerType()
		if yyct3181 == codecSelferValueTypeMap1234 {
			yyl3181 := r.ReadMapStart()
			if yyl3181 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3181, d)
			}
		} else if yyct3181 == codecSelferValueTypeArray1234 {
			yyl3181 := r.ReadArrayStart()
			if yyl3181 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3182Slc
	var yyhl3182 bool = l >= 0
	for yyj3182 := 0; ; yyj3182++ {
		if yyhl3182 {
			if yyj3182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3182Slc = r.DecodeBytes(yys3182Slc, true, true)
		yys3182 := string(yys3182Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3182 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3182)
		} // end switch yys3182
	} // end for yyj3182
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3185 int
	var yyb3185 bool
	var yyhl3185 bool = l >= 0
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3185++
	if yyhl3185 {
		yyb3185 = yyj3185 > l
	} else {
		yyb3185 = r.CheckBreak()
	}
	if yyb3185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3185++
		if yyhl3185 {
			yyb3185 = yyj3185 > l
		} else {
			yyb3185 = r.CheckBreak()
		}
		if yyb3185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3188 := z.EncBinary()
	_ = yym3188
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3190 := z.EncBinary()
		_ = yym3190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3191 := z.DecBinary()
	_ = yym3191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3192 := z.EncBinary()
		_ = yym3192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3193 := !z.EncBinary()
			yy2arr3193 := z.EncBasicHandle().StructToArray
			var yyq3193 [5]bool
			_, _, _ = yysep3193, yyq3193, yy2arr3193
			const yyr3193 bool = false
			yyq3193[0] = x.Kind != ""
			yyq3193[1] = x.APIVersion != ""
			yyq3193[2] = true
			yyq3193[3] = true
			yyq3193[4] = true
			var yynn3193 int
			if yyr3193 || yy2arr3193 {
				r.EncodeArrayStart(5)
			} else {
				yynn3193 = 0
				for _, b := range yyq3193 {
					if b {
						yynn3193++
					}
				}
				r.EncodeMapStart(yynn3193)
				yynn3193 = 0
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[0] {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[1] {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3193[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[2] {
					yy3201 := &x.ObjectMeta
					yy3201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3202 := &x.ObjectMeta
					yy3202.CodecEncodeSelf(e)
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[3] {
					yy3204 := &x.Spec
					yy3204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3205 := &x.Spec
					yy3205.CodecEncodeSelf(e)
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3193[4] {
					yy3207 := &x.Status
					yy3207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3193[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3208 := &x.Status
					yy3208.CodecEncodeSelf(e)
				}
			}
			if yyr3193 || yy2arr3193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3209 := z.DecBinary()
	_ = yym3209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3210 := r.ContainerType()
		if yyct3210 == codecSelferValueTypeMap1234 {
			yyl3210 := r.ReadMapStart()
			if yyl3210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3210, d)
			}
		} else if yyct3210 == codecSelferValueTypeArray1234 {
			yyl3210 := r.ReadArrayStart()
			if yyl3210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3211Slc
	var yyhl3211 bool = l >= 0
	for yyj3211 := 0; ; yyj3211++ {
		if yyhl3211 {
			if yyj3211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3211Slc = r.DecodeBytes(yys3211Slc, true, true)
		yys3211 := string(yys3211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3211 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3214 := &x.ObjectMeta
				yyv3214.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3215 := &x.Spec
				yyv3215.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3216 := &x.Status
				yyv3216.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3211)
		} // end switch yys3211
	} // end for yyj3211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3217 int
	var yyb3217 bool
	var yyhl3217 bool = l >= 0
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3220 := &x.ObjectMeta
		yyv3220.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3221 := &x.Spec
		yyv3221.CodecDecodeSelf(d)
	}
	yyj3217++
	if yyhl3217 {
		yyb3217 = yyj3217 > l
	} else {
		yyb3217 = r.CheckBreak()
	}
	if yyb3217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3222 := &x.Status
		yyv3222.CodecDecodeSelf(d)
	}
	for {
		yyj3217++
		if yyhl3217 {
			yyb3217 = yyj3217 > l
		} else {
			yyb3217 = r.CheckBreak()
		}
		if yyb3217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3223 := z.EncBinary()
		_ = yym3223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3224 := !z.EncBinary()
			yy2arr3224 := z.EncBasicHandle().StructToArray
			var yyq3224 [4]bool
			_, _, _ = yysep3224, yyq3224, yy2arr3224
			const yyr3224 bool = false
			yyq3224[0] = x.Kind != ""
			yyq3224[1] = x.APIVersion != ""
			yyq3224[2] = true
			var yynn3224 int
			if yyr3224 || yy2arr3224 {
				r.EncodeArrayStart(4)
			} else {
				yynn3224 = 1
				for _, b := range yyq3224 {
					if b {
						yynn3224++
					}
				}
				r.EncodeMapStart(yynn3224)
				yynn3224 = 0
			}
			if yyr3224 || yy2arr3224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3224[0] {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3224[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3224 || yy2arr3224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3224[1] {
					yym3229 := z.EncBinary()
					_ = yym3229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3224[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3224 || yy2arr3224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3224[2] {
					yy3232 := &x.ListMeta
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3232) {
					} else {
						z.EncFallback(yy3232)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3224[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3234 := &x.ListMeta
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3234) {
					} else {
						z.EncFallback(yy3234)
					}
				}
			}
			if yyr3224 || yy2arr3224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3224 || yy2arr3224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3239 := z.DecBinary()
	_ = yym3239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3240 := r.ContainerType()
		if yyct3240 == codecSelferValueTypeMap1234 {
			yyl3240 := r.ReadMapStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3240, d)
			}
		} else if yyct3240 == codecSelferValueTypeArray1234 {
			yyl3240 := r.ReadArrayStart()
			if yyl3240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3241Slc
	var yyhl3241 bool = l >= 0
	for yyj3241 := 0; ; yyj3241++ {
		if yyhl3241 {
			if yyj3241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3241Slc = r.DecodeBytes(yys3241Slc, true, true)
		yys3241 := string(yys3241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3241 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3244 := &x.ListMeta
				yym3245 := z.DecBinary()
				_ = yym3245
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3244) {
				} else {
					z.DecFallback(yyv3244, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3246 := &x.Items
				yym3247 := z.DecBinary()
				_ = yym3247
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3246), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3241)
		} // end switch yys3241
	} // end for yyj3241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3248 int
	var yyb3248 bool
	var yyhl3248 bool = l >= 0
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3251 := &x.ListMeta
		yym3252 := z.DecBinary()
		_ = yym3252
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3251) {
		} else {
			z.DecFallback(yyv3251, false)
		}
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3253 := &x.Items
		yym3254 := z.DecBinary()
		_ = yym3254
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3253), d)
		}
	}
	for {
		yyj3248++
		if yyhl3248 {
			yyb3248 = yyj3248 > l
		} else {
			yyb3248 = r.CheckBreak()
		}
		if yyb3248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3255 := z.EncBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3256 := z.DecBinary()
	_ = yym3256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3257 := z.EncBinary()
		_ = yym3257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3258 := !z.EncBinary()
			yy2arr3258 := z.EncBasicHandle().StructToArray
			var yyq3258 [1]bool
			_, _, _ = yysep3258, yyq3258, yy2arr3258
			const yyr3258 bool = false
			yyq3258[0] = len(x.Finalizers) != 0
			var yynn3258 int
			if yyr3258 || yy2arr3258 {
				r.EncodeArrayStart(1)
			} else {
				yynn3258 = 0
				for _, b := range yyq3258 {
					if b {
						yynn3258++
					}
				}
				r.EncodeMapStart(yynn3258)
				yynn3258 = 0
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3260 := z.EncBinary()
						_ = yym3260
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3261 := z.EncBinary()
						_ = yym3261
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3262 := z.DecBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3263 := r.ContainerType()
		if yyct3263 == codecSelferValueTypeMap1234 {
			yyl3263 := r.ReadMapStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3263, d)
			}
		} else if yyct3263 == codecSelferValueTypeArray1234 {
			yyl3263 := r.ReadArrayStart()
			if yyl3263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3264Slc
	var yyhl3264 bool = l >= 0
	for yyj3264 := 0; ; yyj3264++ {
		if yyhl3264 {
			if yyj3264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3264Slc = r.DecodeBytes(yys3264Slc, true, true)
		yys3264 := string(yys3264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3264 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3265 := &x.Finalizers
				yym3266 := z.DecBinary()
				_ = yym3266
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3265), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3264)
		} // end switch yys3264
	} // end for yyj3264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3267 int
	var yyb3267 bool
	var yyhl3267 bool = l >= 0
	yyj3267++
	if yyhl3267 {
		yyb3267 = yyj3267 > l
	} else {
		yyb3267 = r.CheckBreak()
	}
	if yyb3267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3268 := &x.Finalizers
		yym3269 := z.DecBinary()
		_ = yym3269
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3268), d)
		}
	}
	for {
		yyj3267++
		if yyhl3267 {
			yyb3267 = yyj3267 > l
		} else {
			yyb3267 = r.CheckBreak()
		}
		if yyb3267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3270 := z.EncBinary()
		_ = yym3270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3271 := !z.EncBinary()
			yy2arr3271 := z.EncBasicHandle().StructToArray
			var yyq3271 [1]bool
			_, _, _ = yysep3271, yyq3271, yy2arr3271
			const yyr3271 bool = false
			yyq3271[0] = x.Phase != ""
			var yynn3271 int
			if yyr3271 || yy2arr3271 {
				r.EncodeArrayStart(1)
			} else {
				yynn3271 = 0
				for _, b := range yyq3271 {
					if b {
						yynn3271++
					}
				}
				r.EncodeMapStart(yynn3271)
				yynn3271 = 0
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3271[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3273 := z.DecBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3274 := r.ContainerType()
		if yyct3274 == codecSelferValueTypeMap1234 {
			yyl3274 := r.ReadMapStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3274, d)
			}
		} else if yyct3274 == codecSelferValueTypeArray1234 {
			yyl3274 := r.ReadArrayStart()
			if yyl3274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3275Slc
	var yyhl3275 bool = l >= 0
	for yyj3275 := 0; ; yyj3275++ {
		if yyhl3275 {
			if yyj3275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3275Slc = r.DecodeBytes(yys3275Slc, true, true)
		yys3275 := string(yys3275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3275 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3275)
		} // end switch yys3275
	} // end for yyj3275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3277 int
	var yyb3277 bool
	var yyhl3277 bool = l >= 0
	yyj3277++
	if yyhl3277 {
		yyb3277 = yyj3277 > l
	} else {
		yyb3277 = r.CheckBreak()
	}
	if yyb3277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3277++
		if yyhl3277 {
			yyb3277 = yyj3277 > l
		} else {
			yyb3277 = r.CheckBreak()
		}
		if yyb3277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3279 := z.EncBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3280 := z.DecBinary()
	_ = yym3280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3281 := z.EncBinary()
		_ = yym3281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3282 := !z.EncBinary()
			yy2arr3282 := z.EncBasicHandle().StructToArray
			var yyq3282 [5]bool
			_, _, _ = yysep3282, yyq3282, yy2arr3282
			const yyr3282 bool = false
			yyq3282[0] = x.Kind != ""
			yyq3282[1] = x.APIVersion != ""
			yyq3282[2] = true
			yyq3282[3] = true
			yyq3282[4] = true
			var yynn3282 int
			if yyr3282 || yy2arr3282 {
				r.EncodeArrayStart(5)
			} else {
				yynn3282 = 0
				for _, b := range yyq3282 {
					if b {
						yynn3282++
					}
				}
				r.EncodeMapStart(yynn3282)
				yynn3282 = 0
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[0] {
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3282[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[1] {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3282[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[2] {
					yy3290 := &x.ObjectMeta
					yy3290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3282[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3291 := &x.ObjectMeta
					yy3291.CodecEncodeSelf(e)
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[3] {
					yy3293 := &x.Spec
					yy3293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3282[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3294 := &x.Spec
					yy3294.CodecEncodeSelf(e)
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3282[4] {
					yy3296 := &x.Status
					yy3296.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3282[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3297 := &x.Status
					yy3297.CodecEncodeSelf(e)
				}
			}
			if yyr3282 || yy2arr3282 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3298 := z.DecBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3299 := r.ContainerType()
		if yyct3299 == codecSelferValueTypeMap1234 {
			yyl3299 := r.ReadMapStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3299, d)
			}
		} else if yyct3299 == codecSelferValueTypeArray1234 {
			yyl3299 := r.ReadArrayStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3300Slc
	var yyhl3300 bool = l >= 0
	for yyj3300 := 0; ; yyj3300++ {
		if yyhl3300 {
			if yyj3300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3300Slc = r.DecodeBytes(yys3300Slc, true, true)
		yys3300 := string(yys3300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3303 := &x.ObjectMeta
				yyv3303.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3304 := &x.Spec
				yyv3304.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3305 := &x.Status
				yyv3305.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3300)
		} // end switch yys3300
	} // end for yyj3300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3306 int
	var yyb3306 bool
	var yyhl3306 bool = l >= 0
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3309 := &x.ObjectMeta
		yyv3309.CodecDecodeSelf(d)
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3310 := &x.Spec
		yyv3310.CodecDecodeSelf(d)
	}
	yyj3306++
	if yyhl3306 {
		yyb3306 = yyj3306 > l
	} else {
		yyb3306 = r.CheckBreak()
	}
	if yyb3306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3311 := &x.Status
		yyv3311.CodecDecodeSelf(d)
	}
	for {
		yyj3306++
		if yyhl3306 {
			yyb3306 = yyj3306 > l
		} else {
			yyb3306 = r.CheckBreak()
		}
		if yyb3306 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3306-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3312 := z.EncBinary()
		_ = yym3312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3313 := !z.EncBinary()
			yy2arr3313 := z.EncBasicHandle().StructToArray
			var yyq3313 [4]bool
			_, _, _ = yysep3313, yyq3313, yy2arr3313
			const yyr3313 bool = false
			yyq3313[0] = x.Kind != ""
			yyq3313[1] = x.APIVersion != ""
			yyq3313[2] = true
			var yynn3313 int
			if yyr3313 || yy2arr3313 {
				r.EncodeArrayStart(4)
			} else {
				yynn3313 = 1
				for _, b := range yyq3313 {
					if b {
						yynn3313++
					}
				}
				r.EncodeMapStart(yynn3313)
				yynn3313 = 0
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[0] {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[1] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3313[2] {
					yy3321 := &x.ListMeta
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3321) {
					} else {
						z.EncFallback(yy3321)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3313[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3323 := &x.ListMeta
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3323) {
					} else {
						z.EncFallback(yy3323)
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3328 := z.DecBinary()
	_ = yym3328
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3329 := r.ContainerType()
		if yyct3329 == codecSelferValueTypeMap1234 {
			yyl3329 := r.ReadMapStart()
			if yyl3329 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3329, d)
			}
		} else if yyct3329 == codecSelferValueTypeArray1234 {
			yyl3329 := r.ReadArrayStart()
			if yyl3329 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3329, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3330Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3330Slc
	var yyhl3330 bool = l >= 0
	for yyj3330 := 0; ; yyj3330++ {
		if yyhl3330 {
			if yyj3330 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3330Slc = r.DecodeBytes(yys3330Slc, true, true)
		yys3330 := string(yys3330Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3330 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3333 := &x.ListMeta
				yym3334 := z.DecBinary()
				_ = yym3334
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3333) {
				} else {
					z.DecFallback(yyv3333, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3335 := &x.Items
				yym3336 := z.DecBinary()
				_ = yym3336
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3335), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3330)
		} // end switch yys3330
	} // end for yyj3330
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3337 int
	var yyb3337 bool
	var yyhl3337 bool = l >= 0
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3340 := &x.ListMeta
		yym3341 := z.DecBinary()
		_ = yym3341
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3340) {
		} else {
			z.DecFallback(yyv3340, false)
		}
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3342 := &x.Items
		yym3343 := z.DecBinary()
		_ = yym3343
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3342), d)
		}
	}
	for {
		yyj3337++
		if yyhl3337 {
			yyb3337 = yyj3337 > l
		} else {
			yyb3337 = r.CheckBreak()
		}
		if yyb3337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3344 := z.EncBinary()
		_ = yym3344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3345 := !z.EncBinary()
			yy2arr3345 := z.EncBasicHandle().StructToArray
			var yyq3345 [4]bool
			_, _, _ = yysep3345, yyq3345, yy2arr3345
			const yyr3345 bool = false
			yyq3345[0] = x.Kind != ""
			yyq3345[1] = x.APIVersion != ""
			yyq3345[2] = true
			var yynn3345 int
			if yyr3345 || yy2arr3345 {
				r.EncodeArrayStart(4)
			} else {
				yynn3345 = 1
				for _, b := range yyq3345 {
					if b {
						yynn3345++
					}
				}
				r.EncodeMapStart(yynn3345)
				yynn3345 = 0
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[0] {
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[1] {
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3345[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3345[2] {
					yy3353 := &x.ObjectMeta
					yy3353.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3345[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3354 := &x.ObjectMeta
					yy3354.CodecEncodeSelf(e)
				}
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3356 := &x.Target
				yy3356.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3357 := &x.Target
				yy3357.CodecEncodeSelf(e)
			}
			if yyr3345 || yy2arr3345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3358 := z.DecBinary()
	_ = yym3358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3359 := r.ContainerType()
		if yyct3359 == codecSelferValueTypeMap1234 {
			yyl3359 := r.ReadMapStart()
			if yyl3359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3359, d)
			}
		} else if yyct3359 == codecSelferValueTypeArray1234 {
			yyl3359 := r.ReadArrayStart()
			if yyl3359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3360Slc
	var yyhl3360 bool = l >= 0
	for yyj3360 := 0; ; yyj3360++ {
		if yyhl3360 {
			if yyj3360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3360Slc = r.DecodeBytes(yys3360Slc, true, true)
		yys3360 := string(yys3360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3360 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3363 := &x.ObjectMeta
				yyv3363.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3364 := &x.Target
				yyv3364.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3360)
		} // end switch yys3360
	} // end for yyj3360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3365 int
	var yyb3365 bool
	var yyhl3365 bool = l >= 0
	yyj3365++
	if yyhl3365 {
		yyb3365 = yyj3365 > l
	} else {
		yyb3365 = r.CheckBreak()
	}
	if yyb3365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3365++
	if yyhl3365 {
		yyb3365 = yyj3365 > l
	} else {
		yyb3365 = r.CheckBreak()
	}
	if yyb3365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3365++
	if yyhl3365 {
		yyb3365 = yyj3365 > l
	} else {
		yyb3365 = r.CheckBreak()
	}
	if yyb3365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3368 := &x.ObjectMeta
		yyv3368.CodecDecodeSelf(d)
	}
	yyj3365++
	if yyhl3365 {
		yyb3365 = yyj3365 > l
	} else {
		yyb3365 = r.CheckBreak()
	}
	if yyb3365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3369 := &x.Target
		yyv3369.CodecDecodeSelf(d)
	}
	for {
		yyj3365++
		if yyhl3365 {
			yyb3365 = yyj3365 > l
		} else {
			yyb3365 = r.CheckBreak()
		}
		if yyb3365 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3365-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3370 := z.EncBinary()
		_ = yym3370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3371 := !z.EncBinary()
			yy2arr3371 := z.EncBasicHandle().StructToArray
			var yyq3371 [1]bool
			_, _, _ = yysep3371, yyq3371, yy2arr3371
			const yyr3371 bool = false
			yyq3371[0] = x.UID != nil
			var yynn3371 int
			if yyr3371 || yy2arr3371 {
				r.EncodeArrayStart(1)
			} else {
				yynn3371 = 0
				for _, b := range yyq3371 {
					if b {
						yynn3371++
					}
				}
				r.EncodeMapStart(yynn3371)
				yynn3371 = 0
			}
			if yyr3371 || yy2arr3371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3371[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3373 := *x.UID
						yym3374 := z.EncBinary()
						_ = yym3374
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3373) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3373))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3375 := *x.UID
						yym3376 := z.EncBinary()
						_ = yym3376
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3375) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3375))
						}
					}
				}
			}
			if yyr3371 || yy2arr3371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3377 := z.DecBinary()
	_ = yym3377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3378 := r.ContainerType()
		if yyct3378 == codecSelferValueTypeMap1234 {
			yyl3378 := r.ReadMapStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3378, d)
			}
		} else if yyct3378 == codecSelferValueTypeArray1234 {
			yyl3378 := r.ReadArrayStart()
			if yyl3378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3379Slc
	var yyhl3379 bool = l >= 0
	for yyj3379 := 0; ; yyj3379++ {
		if yyhl3379 {
			if yyj3379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3379Slc = r.DecodeBytes(yys3379Slc, true, true)
		yys3379 := string(yys3379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3379 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3381 := z.DecBinary()
				_ = yym3381
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3379)
		} // end switch yys3379
	} // end for yyj3379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3382 int
	var yyb3382 bool
	var yyhl3382 bool = l >= 0
	yyj3382++
	if yyhl3382 {
		yyb3382 = yyj3382 > l
	} else {
		yyb3382 = r.CheckBreak()
	}
	if yyb3382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3384 := z.DecBinary()
		_ = yym3384
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3382++
		if yyhl3382 {
			yyb3382 = yyj3382 > l
		} else {
			yyb3382 = r.CheckBreak()
		}
		if yyb3382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3385 := z.EncBinary()
		_ = yym3385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3386 := !z.EncBinary()
			yy2arr3386 := z.EncBasicHandle().StructToArray
			var yyq3386 [5]bool
			_, _, _ = yysep3386, yyq3386, yy2arr3386
			const yyr3386 bool = false
			yyq3386[0] = x.Kind != ""
			yyq3386[1] = x.APIVersion != ""
			yyq3386[2] = x.GracePeriodSeconds != nil
			yyq3386[3] = x.Preconditions != nil
			yyq3386[4] = x.OrphanDependents != nil
			var yynn3386 int
			if yyr3386 || yy2arr3386 {
				r.EncodeArrayStart(5)
			} else {
				yynn3386 = 0
				for _, b := range yyq3386 {
					if b {
						yynn3386++
					}
				}
				r.EncodeMapStart(yynn3386)
				yynn3386 = 0
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3386[0] {
					yym3388 := z.EncBinary()
					_ = yym3388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3386[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3386[1] {
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3386[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3386[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3394 := *x.GracePeriodSeconds
						yym3395 := z.EncBinary()
						_ = yym3395
						if false {
						} else {
							r.EncodeInt(int64(yy3394))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3386[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3396 := *x.GracePeriodSeconds
						yym3397 := z.EncBinary()
						_ = yym3397
						if false {
						} else {
							r.EncodeInt(int64(yy3396))
						}
					}
				}
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3386[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3386[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3386[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3400 := *x.OrphanDependents
						yym3401 := z.EncBinary()
						_ = yym3401
						if false {
						} else {
							r.EncodeBool(bool(yy3400))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3386[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3402 := *x.OrphanDependents
						yym3403 := z.EncBinary()
						_ = yym3403
						if false {
						} else {
							r.EncodeBool(bool(yy3402))
						}
					}
				}
			}
			if yyr3386 || yy2arr3386 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3405 := r.ContainerType()
		if yyct3405 == codecSelferValueTypeMap1234 {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if yyct3405 == codecSelferValueTypeArray1234 {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3406 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3410 := z.DecBinary()
				_ = yym3410
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3413 := z.DecBinary()
				_ = yym3413
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3414 int
	var yyb3414 bool
	var yyhl3414 bool = l >= 0
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3418 := z.DecBinary()
		_ = yym3418
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3421 := z.DecBinary()
		_ = yym3421
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3414++
		if yyhl3414 {
			yyb3414 = yyj3414 > l
		} else {
			yyb3414 = r.CheckBreak()
		}
		if yyb3414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3422 := z.EncBinary()
		_ = yym3422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3423 := !z.EncBinary()
			yy2arr3423 := z.EncBasicHandle().StructToArray
			var yyq3423 [4]bool
			_, _, _ = yysep3423, yyq3423, yy2arr3423
			const yyr3423 bool = false
			yyq3423[0] = x.Kind != ""
			yyq3423[1] = x.APIVersion != ""
			var yynn3423 int
			if yyr3423 || yy2arr3423 {
				r.EncodeArrayStart(4)
			} else {
				yynn3423 = 2
				for _, b := range yyq3423 {
					if b {
						yynn3423++
					}
				}
				r.EncodeMapStart(yynn3423)
				yynn3423 = 0
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[0] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3423[1] {
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3431 := z.EncBinary()
				_ = yym3431
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3432 := z.EncBinary()
				_ = yym3432
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3434 := z.EncBinary()
				_ = yym3434
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3435 := z.EncBinary()
				_ = yym3435
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3423 || yy2arr3423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3436 := z.DecBinary()
	_ = yym3436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3437 := r.ContainerType()
		if yyct3437 == codecSelferValueTypeMap1234 {
			yyl3437 := r.ReadMapStart()
			if yyl3437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3437, d)
			}
		} else if yyct3437 == codecSelferValueTypeArray1234 {
			yyl3437 := r.ReadArrayStart()
			if yyl3437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3438Slc
	var yyhl3438 bool = l >= 0
	for yyj3438 := 0; ; yyj3438++ {
		if yyhl3438 {
			if yyj3438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3438Slc = r.DecodeBytes(yys3438Slc, true, true)
		yys3438 := string(yys3438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3438 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3438)
		} // end switch yys3438
	} // end for yyj3438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3443 int
	var yyb3443 bool
	var yyhl3443 bool = l >= 0
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3443++
	if yyhl3443 {
		yyb3443 = yyj3443 > l
	} else {
		yyb3443 = r.CheckBreak()
	}
	if yyb3443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3443++
		if yyhl3443 {
			yyb3443 = yyj3443 > l
		} else {
			yyb3443 = r.CheckBreak()
		}
		if yyb3443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3448 := z.EncBinary()
		_ = yym3448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3449 := !z.EncBinary()
			yy2arr3449 := z.EncBasicHandle().StructToArray
			var yyq3449 [7]bool
			_, _, _ = yysep3449, yyq3449, yy2arr3449
			const yyr3449 bool = false
			yyq3449[0] = x.Kind != ""
			yyq3449[1] = x.APIVersion != ""
			yyq3449[2] = x.LabelSelector != ""
			yyq3449[3] = x.FieldSelector != ""
			yyq3449[4] = x.Watch != false
			yyq3449[5] = x.ResourceVersion != ""
			yyq3449[6] = x.TimeoutSeconds != nil
			var yynn3449 int
			if yyr3449 || yy2arr3449 {
				r.EncodeArrayStart(7)
			} else {
				yynn3449 = 0
				for _, b := range yyq3449 {
					if b {
						yynn3449++
					}
				}
				r.EncodeMapStart(yynn3449)
				yynn3449 = 0
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[0] {
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3449[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[1] {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3449[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[2] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[3] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[4] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[5] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3449[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3449[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3469 := *x.TimeoutSeconds
						yym3470 := z.EncBinary()
						_ = yym3470
						if false {
						} else {
							r.EncodeInt(int64(yy3469))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3449[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3471 := *x.TimeoutSeconds
						yym3472 := z.EncBinary()
						_ = yym3472
						if false {
						} else {
							r.EncodeInt(int64(yy3471))
						}
					}
				}
			}
			if yyr3449 || yy2arr3449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3473 := z.DecBinary()
	_ = yym3473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3474 := r.ContainerType()
		if yyct3474 == codecSelferValueTypeMap1234 {
			yyl3474 := r.ReadMapStart()
			if yyl3474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3474, d)
			}
		} else if yyct3474 == codecSelferValueTypeArray1234 {
			yyl3474 := r.ReadArrayStart()
			if yyl3474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3475Slc
	var yyhl3475 bool = l >= 0
	for yyj3475 := 0; ; yyj3475++ {
		if yyhl3475 {
			if yyj3475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3475Slc = r.DecodeBytes(yys3475Slc, true, true)
		yys3475 := string(yys3475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3475 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3483 := z.DecBinary()
				_ = yym3483
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3475)
		} // end switch yys3475
	} // end for yyj3475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3484 int
	var yyb3484 bool
	var yyhl3484 bool = l >= 0
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3492 := z.DecBinary()
		_ = yym3492
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3484++
		if yyhl3484 {
			yyb3484 = yyj3484 > l
		} else {
			yyb3484 = r.CheckBreak()
		}
		if yyb3484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3493 := z.EncBinary()
		_ = yym3493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3494 := !z.EncBinary()
			yy2arr3494 := z.EncBasicHandle().StructToArray
			var yyq3494 [10]bool
			_, _, _ = yysep3494, yyq3494, yy2arr3494
			const yyr3494 bool = false
			yyq3494[0] = x.Kind != ""
			yyq3494[1] = x.APIVersion != ""
			yyq3494[2] = x.Container != ""
			yyq3494[3] = x.Follow != false
			yyq3494[4] = x.Previous != false
			yyq3494[5] = x.SinceSeconds != nil
			yyq3494[6] = x.SinceTime != nil
			yyq3494[7] = x.Timestamps != false
			yyq3494[8] = x.TailLines != nil
			yyq3494[9] = x.LimitBytes != nil
			var yynn3494 int
			if yyr3494 || yy2arr3494 {
				r.EncodeArrayStart(10)
			} else {
				yynn3494 = 0
				for _, b := range yyq3494 {
					if b {
						yynn3494++
					}
				}
				r.EncodeMapStart(yynn3494)
				yynn3494 = 0
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[0] {
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[1] {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[2] {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3494[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[3] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3494[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[4] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3494[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3511 := *x.SinceSeconds
						yym3512 := z.EncBinary()
						_ = yym3512
						if false {
						} else {
							r.EncodeInt(int64(yy3511))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3494[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3513 := *x.SinceSeconds
						yym3514 := z.EncBinary()
						_ = yym3514
						if false {
						} else {
							r.EncodeInt(int64(yy3513))
						}
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3516 := z.EncBinary()
						_ = yym3516
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3516 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3516 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3494[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3517 := z.EncBinary()
						_ = yym3517
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3517 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3517 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[7] {
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3494[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3522 := *x.TailLines
						yym3523 := z.EncBinary()
						_ = yym3523
						if false {
						} else {
							r.EncodeInt(int64(yy3522))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3494[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3524 := *x.TailLines
						yym3525 := z.EncBinary()
						_ = yym3525
						if false {
						} else {
							r.EncodeInt(int64(yy3524))
						}
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3494[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3527 := *x.LimitBytes
						yym3528 := z.EncBinary()
						_ = yym3528
						if false {
						} else {
							r.EncodeInt(int64(yy3527))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3494[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3529 := *x.LimitBytes
						yym3530 := z.EncBinary()
						_ = yym3530
						if false {
						} else {
							r.EncodeInt(int64(yy3529))
						}
					}
				}
			}
			if yyr3494 || yy2arr3494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3531 := z.DecBinary()
	_ = yym3531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3532 := r.ContainerType()
		if yyct3532 == codecSelferValueTypeMap1234 {
			yyl3532 := r.ReadMapStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3532, d)
			}
		} else if yyct3532 == codecSelferValueTypeArray1234 {
			yyl3532 := r.ReadArrayStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3533Slc
	var yyhl3533 bool = l >= 0
	for yyj3533 := 0; ; yyj3533++ {
		if yyhl3533 {
			if yyj3533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3533Slc = r.DecodeBytes(yys3533Slc, true, true)
		yys3533 := string(yys3533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3540 := z.DecBinary()
				_ = yym3540
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3542 := z.DecBinary()
				_ = yym3542
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3542 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3542 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3545 := z.DecBinary()
				_ = yym3545
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3547 := z.DecBinary()
				_ = yym3547
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3533)
		} // end switch yys3533
	} // end for yyj3533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3548 int
	var yyb3548 bool
	var yyhl3548 bool = l >= 0
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3555 := z.DecBinary()
		_ = yym3555
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3557 := z.DecBinary()
		_ = yym3557
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3557 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3557 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3560 := z.DecBinary()
		_ = yym3560
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3562 := z.DecBinary()
		_ = yym3562
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3548++
		if yyhl3548 {
			yyb3548 = yyj3548 > l
		} else {
			yyb3548 = r.CheckBreak()
		}
		if yyb3548 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3548-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3563 := z.EncBinary()
		_ = yym3563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3564 := !z.EncBinary()
			yy2arr3564 := z.EncBasicHandle().StructToArray
			var yyq3564 [7]bool
			_, _, _ = yysep3564, yyq3564, yy2arr3564
			const yyr3564 bool = false
			yyq3564[0] = x.Kind != ""
			yyq3564[1] = x.APIVersion != ""
			yyq3564[2] = x.Stdin != false
			yyq3564[3] = x.Stdout != false
			yyq3564[4] = x.Stderr != false
			yyq3564[5] = x.TTY != false
			yyq3564[6] = x.Container != ""
			var yynn3564 int
			if yyr3564 || yy2arr3564 {
				r.EncodeArrayStart(7)
			} else {
				yynn3564 = 0
				for _, b := range yyq3564 {
					if b {
						yynn3564++
					}
				}
				r.EncodeMapStart(yynn3564)
				yynn3564 = 0
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[0] {
					yym3566 := z.EncBinary()
					_ = yym3566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[1] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[2] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[3] {
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3564[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[4] {
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3564[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[5] {
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3564[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3564[6] {
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3564[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3564 || yy2arr3564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3586 := z.DecBinary()
	_ = yym3586
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3587 := r.ContainerType()
		if yyct3587 == codecSelferValueTypeMap1234 {
			yyl3587 := r.ReadMapStart()
			if yyl3587 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3587, d)
			}
		} else if yyct3587 == codecSelferValueTypeArray1234 {
			yyl3587 := r.ReadArrayStart()
			if yyl3587 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3587, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3588Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3588Slc
	var yyhl3588 bool = l >= 0
	for yyj3588 := 0; ; yyj3588++ {
		if yyhl3588 {
			if yyj3588 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3588Slc = r.DecodeBytes(yys3588Slc, true, true)
		yys3588 := string(yys3588Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3588 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3588)
		} // end switch yys3588
	} // end for yyj3588
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3596 int
	var yyb3596 bool
	var yyhl3596 bool = l >= 0
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3596++
	if yyhl3596 {
		yyb3596 = yyj3596 > l
	} else {
		yyb3596 = r.CheckBreak()
	}
	if yyb3596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3596++
		if yyhl3596 {
			yyb3596 = yyj3596 > l
		} else {
			yyb3596 = r.CheckBreak()
		}
		if yyb3596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3604 := z.EncBinary()
		_ = yym3604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3605 := !z.EncBinary()
			yy2arr3605 := z.EncBasicHandle().StructToArray
			var yyq3605 [8]bool
			_, _, _ = yysep3605, yyq3605, yy2arr3605
			const yyr3605 bool = false
			yyq3605[0] = x.Kind != ""
			yyq3605[1] = x.APIVersion != ""
			yyq3605[2] = x.Stdin != false
			yyq3605[3] = x.Stdout != false
			yyq3605[4] = x.Stderr != false
			yyq3605[5] = x.TTY != false
			yyq3605[6] = x.Container != ""
			var yynn3605 int
			if yyr3605 || yy2arr3605 {
				r.EncodeArrayStart(8)
			} else {
				yynn3605 = 1
				for _, b := range yyq3605 {
					if b {
						yynn3605++
					}
				}
				r.EncodeMapStart(yynn3605)
				yynn3605 = 0
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[0] {
					yym3607 := z.EncBinary()
					_ = yym3607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[1] {
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[2] {
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[3] {
					yym3616 := z.EncBinary()
					_ = yym3616
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[4] {
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[5] {
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3605[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3605[6] {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3605[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3605 || yy2arr3605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3630 := z.DecBinary()
	_ = yym3630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3631 := r.ContainerType()
		if yyct3631 == codecSelferValueTypeMap1234 {
			yyl3631 := r.ReadMapStart()
			if yyl3631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3631, d)
			}
		} else if yyct3631 == codecSelferValueTypeArray1234 {
			yyl3631 := r.ReadArrayStart()
			if yyl3631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3632Slc
	var yyhl3632 bool = l >= 0
	for yyj3632 := 0; ; yyj3632++ {
		if yyhl3632 {
			if yyj3632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3632Slc = r.DecodeBytes(yys3632Slc, true, true)
		yys3632 := string(yys3632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3632 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3640 := &x.Command
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else {
					z.F.DecSliceStringX(yyv3640, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3632)
		} // end switch yys3632
	} // end for yyj3632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3642 int
	var yyb3642 bool
	var yyhl3642 bool = l >= 0
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3642++
	if yyhl3642 {
		yyb3642 = yyj3642 > l
	} else {
		yyb3642 = r.CheckBreak()
	}
	if yyb3642 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3650 := &x.Command
		yym3651 := z.DecBinary()
		_ = yym3651
		if false {
		} else {
			z.F.DecSliceStringX(yyv3650, false, d)
		}
	}
	for {
		yyj3642++
		if yyhl3642 {
			yyb3642 = yyj3642 > l
		} else {
			yyb3642 = r.CheckBreak()
		}
		if yyb3642 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3642-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3652 := z.EncBinary()
		_ = yym3652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3653 := !z.EncBinary()
			yy2arr3653 := z.EncBasicHandle().StructToArray
			var yyq3653 [3]bool
			_, _, _ = yysep3653, yyq3653, yy2arr3653
			const yyr3653 bool = false
			yyq3653[0] = x.Kind != ""
			yyq3653[1] = x.APIVersion != ""
			yyq3653[2] = x.Path != ""
			var yynn3653 int
			if yyr3653 || yy2arr3653 {
				r.EncodeArrayStart(3)
			} else {
				yynn3653 = 0
				for _, b := range yyq3653 {
					if b {
						yynn3653++
					}
				}
				r.EncodeMapStart(yynn3653)
				yynn3653 = 0
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[0] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[1] {
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[2] {
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3663 := z.DecBinary()
	_ = yym3663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3664 := r.ContainerType()
		if yyct3664 == codecSelferValueTypeMap1234 {
			yyl3664 := r.ReadMapStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3664, d)
			}
		} else if yyct3664 == codecSelferValueTypeArray1234 {
			yyl3664 := r.ReadArrayStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3665Slc
	var yyhl3665 bool = l >= 0
	for yyj3665 := 0; ; yyj3665++ {
		if yyhl3665 {
			if yyj3665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3665Slc = r.DecodeBytes(yys3665Slc, true, true)
		yys3665 := string(yys3665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3665 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3665)
		} // end switch yys3665
	} // end for yyj3665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3669 int
	var yyb3669 bool
	var yyhl3669 bool = l >= 0
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3669++
		if yyhl3669 {
			yyb3669 = yyj3669 > l
		} else {
			yyb3669 = r.CheckBreak()
		}
		if yyb3669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3673 := z.EncBinary()
		_ = yym3673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3674 := !z.EncBinary()
			yy2arr3674 := z.EncBasicHandle().StructToArray
			var yyq3674 [3]bool
			_, _, _ = yysep3674, yyq3674, yy2arr3674
			const yyr3674 bool = false
			yyq3674[0] = x.Kind != ""
			yyq3674[1] = x.APIVersion != ""
			yyq3674[2] = x.Path != ""
			var yynn3674 int
			if yyr3674 || yy2arr3674 {
				r.EncodeArrayStart(3)
			} else {
				yynn3674 = 0
				for _, b := range yyq3674 {
					if b {
						yynn3674++
					}
				}
				r.EncodeMapStart(yynn3674)
				yynn3674 = 0
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[0] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[1] {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[2] {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3684 := z.DecBinary()
	_ = yym3684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3685 := r.ContainerType()
		if yyct3685 == codecSelferValueTypeMap1234 {
			yyl3685 := r.ReadMapStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3685, d)
			}
		} else if yyct3685 == codecSelferValueTypeArray1234 {
			yyl3685 := r.ReadArrayStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3686Slc
	var yyhl3686 bool = l >= 0
	for yyj3686 := 0; ; yyj3686++ {
		if yyhl3686 {
			if yyj3686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3686Slc = r.DecodeBytes(yys3686Slc, true, true)
		yys3686 := string(yys3686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3686)
		} // end switch yys3686
	} // end for yyj3686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3690 int
	var yyb3690 bool
	var yyhl3690 bool = l >= 0
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3690++
		if yyhl3690 {
			yyb3690 = yyj3690 > l
		} else {
			yyb3690 = r.CheckBreak()
		}
		if yyb3690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3694 := z.EncBinary()
		_ = yym3694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3695 := !z.EncBinary()
			yy2arr3695 := z.EncBasicHandle().StructToArray
			var yyq3695 [3]bool
			_, _, _ = yysep3695, yyq3695, yy2arr3695
			const yyr3695 bool = false
			yyq3695[0] = x.Kind != ""
			yyq3695[1] = x.APIVersion != ""
			yyq3695[2] = x.Path != ""
			var yynn3695 int
			if yyr3695 || yy2arr3695 {
				r.EncodeArrayStart(3)
			} else {
				yynn3695 = 0
				for _, b := range yyq3695 {
					if b {
						yynn3695++
					}
				}
				r.EncodeMapStart(yynn3695)
				yynn3695 = 0
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[0] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[1] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[2] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3705 := z.DecBinary()
	_ = yym3705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3706 := r.ContainerType()
		if yyct3706 == codecSelferValueTypeMap1234 {
			yyl3706 := r.ReadMapStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3706, d)
			}
		} else if yyct3706 == codecSelferValueTypeArray1234 {
			yyl3706 := r.ReadArrayStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3707Slc
	var yyhl3707 bool = l >= 0
	for yyj3707 := 0; ; yyj3707++ {
		if yyhl3707 {
			if yyj3707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3707Slc = r.DecodeBytes(yys3707Slc, true, true)
		yys3707 := string(yys3707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3707 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3707)
		} // end switch yys3707
	} // end for yyj3707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3711 int
	var yyb3711 bool
	var yyhl3711 bool = l >= 0
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3711++
		if yyhl3711 {
			yyb3711 = yyj3711 > l
		} else {
			yyb3711 = r.CheckBreak()
		}
		if yyb3711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3715 := z.EncBinary()
		_ = yym3715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3716 := !z.EncBinary()
			yy2arr3716 := z.EncBasicHandle().StructToArray
			var yyq3716 [5]bool
			_, _, _ = yysep3716, yyq3716, yy2arr3716
			const yyr3716 bool = false
			yyq3716[4] = x.Controller != nil
			var yynn3716 int
			if yyr3716 || yy2arr3716 {
				r.EncodeArrayStart(5)
			} else {
				yynn3716 = 4
				for _, b := range yyq3716 {
					if b {
						yynn3716++
					}
				}
				r.EncodeMapStart(yynn3716)
				yynn3716 = 0
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3718 := z.EncBinary()
				_ = yym3718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3719 := z.EncBinary()
				_ = yym3719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3721 := z.EncBinary()
				_ = yym3721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3722 := z.EncBinary()
				_ = yym3722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3724 := z.EncBinary()
				_ = yym3724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3725 := z.EncBinary()
				_ = yym3725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3727 := z.EncBinary()
				_ = yym3727
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3728 := z.EncBinary()
				_ = yym3728
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3716[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3730 := *x.Controller
						yym3731 := z.EncBinary()
						_ = yym3731
						if false {
						} else {
							r.EncodeBool(bool(yy3730))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3716[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3732 := *x.Controller
						yym3733 := z.EncBinary()
						_ = yym3733
						if false {
						} else {
							r.EncodeBool(bool(yy3732))
						}
					}
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3734 := z.DecBinary()
	_ = yym3734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3735 := r.ContainerType()
		if yyct3735 == codecSelferValueTypeMap1234 {
			yyl3735 := r.ReadMapStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3735, d)
			}
		} else if yyct3735 == codecSelferValueTypeArray1234 {
			yyl3735 := r.ReadArrayStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3736Slc
	var yyhl3736 bool = l >= 0
	for yyj3736 := 0; ; yyj3736++ {
		if yyhl3736 {
			if yyj3736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3736Slc = r.DecodeBytes(yys3736Slc, true, true)
		yys3736 := string(yys3736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3736 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3742 := z.DecBinary()
				_ = yym3742
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3736)
		} // end switch yys3736
	} // end for yyj3736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3743 int
	var yyb3743 bool
	var yyhl3743 bool = l >= 0
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3749 := z.DecBinary()
		_ = yym3749
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3743++
		if yyhl3743 {
			yyb3743 = yyj3743 > l
		} else {
			yyb3743 = r.CheckBreak()
		}
		if yyb3743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3750 := z.EncBinary()
		_ = yym3750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3751 := !z.EncBinary()
			yy2arr3751 := z.EncBasicHandle().StructToArray
			var yyq3751 [7]bool
			_, _, _ = yysep3751, yyq3751, yy2arr3751
			const yyr3751 bool = false
			yyq3751[0] = x.Kind != ""
			yyq3751[1] = x.Namespace != ""
			yyq3751[2] = x.Name != ""
			yyq3751[3] = x.UID != ""
			yyq3751[4] = x.APIVersion != ""
			yyq3751[5] = x.ResourceVersion != ""
			yyq3751[6] = x.FieldPath != ""
			var yynn3751 int
			if yyr3751 || yy2arr3751 {
				r.EncodeArrayStart(7)
			} else {
				yynn3751 = 0
				for _, b := range yyq3751 {
					if b {
						yynn3751++
					}
				}
				r.EncodeMapStart(yynn3751)
				yynn3751 = 0
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[0] {
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[1] {
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[2] {
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[3] {
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[4] {
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[5] {
					yym3768 := z.EncBinary()
					_ = yym3768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[6] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3773 := z.DecBinary()
	_ = yym3773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3774 := r.ContainerType()
		if yyct3774 == codecSelferValueTypeMap1234 {
			yyl3774 := r.ReadMapStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3774, d)
			}
		} else if yyct3774 == codecSelferValueTypeArray1234 {
			yyl3774 := r.ReadArrayStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3775Slc
	var yyhl3775 bool = l >= 0
	for yyj3775 := 0; ; yyj3775++ {
		if yyhl3775 {
			if yyj3775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3775Slc = r.DecodeBytes(yys3775Slc, true, true)
		yys3775 := string(yys3775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3775)
		} // end switch yys3775
	} // end for yyj3775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3783 int
	var yyb3783 bool
	var yyhl3783 bool = l >= 0
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3783++
		if yyhl3783 {
			yyb3783 = yyj3783 > l
		} else {
			yyb3783 = r.CheckBreak()
		}
		if yyb3783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3791 := z.EncBinary()
		_ = yym3791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3792 := !z.EncBinary()
			yy2arr3792 := z.EncBasicHandle().StructToArray
			var yyq3792 [1]bool
			_, _, _ = yysep3792, yyq3792, yy2arr3792
			const yyr3792 bool = false
			yyq3792[0] = x.Name != ""
			var yynn3792 int
			if yyr3792 || yy2arr3792 {
				r.EncodeArrayStart(1)
			} else {
				yynn3792 = 0
				for _, b := range yyq3792 {
					if b {
						yynn3792++
					}
				}
				r.EncodeMapStart(yynn3792)
				yynn3792 = 0
			}
			if yyr3792 || yy2arr3792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3792[0] {
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3792[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3795 := z.EncBinary()
					_ = yym3795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3792 || yy2arr3792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3796 := z.DecBinary()
	_ = yym3796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3797 := r.ContainerType()
		if yyct3797 == codecSelferValueTypeMap1234 {
			yyl3797 := r.ReadMapStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3797, d)
			}
		} else if yyct3797 == codecSelferValueTypeArray1234 {
			yyl3797 := r.ReadArrayStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3798Slc
	var yyhl3798 bool = l >= 0
	for yyj3798 := 0; ; yyj3798++ {
		if yyhl3798 {
			if yyj3798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3798Slc = r.DecodeBytes(yys3798Slc, true, true)
		yys3798 := string(yys3798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3798 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3798)
		} // end switch yys3798
	} // end for yyj3798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3800 int
	var yyb3800 bool
	var yyhl3800 bool = l >= 0
	yyj3800++
	if yyhl3800 {
		yyb3800 = yyj3800 > l
	} else {
		yyb3800 = r.CheckBreak()
	}
	if yyb3800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3800++
		if yyhl3800 {
			yyb3800 = yyj3800 > l
		} else {
			yyb3800 = r.CheckBreak()
		}
		if yyb3800 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3800-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3802 := z.EncBinary()
		_ = yym3802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3803 := !z.EncBinary()
			yy2arr3803 := z.EncBasicHandle().StructToArray
			var yyq3803 [3]bool
			_, _, _ = yysep3803, yyq3803, yy2arr3803
			const yyr3803 bool = false
			yyq3803[0] = x.Kind != ""
			yyq3803[1] = x.APIVersion != ""
			yyq3803[2] = true
			var yynn3803 int
			if yyr3803 || yy2arr3803 {
				r.EncodeArrayStart(3)
			} else {
				yynn3803 = 0
				for _, b := range yyq3803 {
					if b {
						yynn3803++
					}
				}
				r.EncodeMapStart(yynn3803)
				yynn3803 = 0
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[0] {
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[1] {
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[2] {
					yy3811 := &x.Reference
					yy3811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3812 := &x.Reference
					yy3812.CodecEncodeSelf(e)
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3813 := z.DecBinary()
	_ = yym3813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3814 := r.ContainerType()
		if yyct3814 == codecSelferValueTypeMap1234 {
			yyl3814 := r.ReadMapStart()
			if yyl3814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3814, d)
			}
		} else if yyct3814 == codecSelferValueTypeArray1234 {
			yyl3814 := r.ReadArrayStart()
			if yyl3814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3815Slc
	var yyhl3815 bool = l >= 0
	for yyj3815 := 0; ; yyj3815++ {
		if yyhl3815 {
			if yyj3815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3815Slc = r.DecodeBytes(yys3815Slc, true, true)
		yys3815 := string(yys3815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3815 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3818 := &x.Reference
				yyv3818.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3815)
		} // end switch yys3815
	} // end for yyj3815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3819 int
	var yyb3819 bool
	var yyhl3819 bool = l >= 0
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3822 := &x.Reference
		yyv3822.CodecDecodeSelf(d)
	}
	for {
		yyj3819++
		if yyhl3819 {
			yyb3819 = yyj3819 > l
		} else {
			yyb3819 = r.CheckBreak()
		}
		if yyb3819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3823 := z.EncBinary()
		_ = yym3823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3824 := !z.EncBinary()
			yy2arr3824 := z.EncBasicHandle().StructToArray
			var yyq3824 [2]bool
			_, _, _ = yysep3824, yyq3824, yy2arr3824
			const yyr3824 bool = false
			yyq3824[0] = x.Component != ""
			yyq3824[1] = x.Host != ""
			var yynn3824 int
			if yyr3824 || yy2arr3824 {
				r.EncodeArrayStart(2)
			} else {
				yynn3824 = 0
				for _, b := range yyq3824 {
					if b {
						yynn3824++
					}
				}
				r.EncodeMapStart(yynn3824)
				yynn3824 = 0
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3824[0] {
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3824[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3824[1] {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3824[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3831 := z.DecBinary()
	_ = yym3831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3832 := r.ContainerType()
		if yyct3832 == codecSelferValueTypeMap1234 {
			yyl3832 := r.ReadMapStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3832, d)
			}
		} else if yyct3832 == codecSelferValueTypeArray1234 {
			yyl3832 := r.ReadArrayStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3833Slc
	var yyhl3833 bool = l >= 0
	for yyj3833 := 0; ; yyj3833++ {
		if yyhl3833 {
			if yyj3833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3833Slc = r.DecodeBytes(yys3833Slc, true, true)
		yys3833 := string(yys3833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3833 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3833)
		} // end switch yys3833
	} // end for yyj3833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3836 int
	var yyb3836 bool
	var yyhl3836 bool = l >= 0
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3836++
		if yyhl3836 {
			yyb3836 = yyj3836 > l
		} else {
			yyb3836 = r.CheckBreak()
		}
		if yyb3836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3839 := z.EncBinary()
		_ = yym3839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3840 := !z.EncBinary()
			yy2arr3840 := z.EncBasicHandle().StructToArray
			var yyq3840 [11]bool
			_, _, _ = yysep3840, yyq3840, yy2arr3840
			const yyr3840 bool = false
			yyq3840[0] = x.Kind != ""
			yyq3840[1] = x.APIVersion != ""
			yyq3840[4] = x.Reason != ""
			yyq3840[5] = x.Message != ""
			yyq3840[6] = true
			yyq3840[7] = true
			yyq3840[8] = true
			yyq3840[9] = x.Count != 0
			yyq3840[10] = x.Type != ""
			var yynn3840 int
			if yyr3840 || yy2arr3840 {
				r.EncodeArrayStart(11)
			} else {
				yynn3840 = 2
				for _, b := range yyq3840 {
					if b {
						yynn3840++
					}
				}
				r.EncodeMapStart(yynn3840)
				yynn3840 = 0
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[0] {
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[1] {
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3848 := &x.ObjectMeta
				yy3848.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3849 := &x.ObjectMeta
				yy3849.CodecEncodeSelf(e)
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3851 := &x.InvolvedObject
				yy3851.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3852 := &x.InvolvedObject
				yy3852.CodecEncodeSelf(e)
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[4] {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[5] {
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[6] {
					yy3860 := &x.Source
					yy3860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3861 := &x.Source
					yy3861.CodecEncodeSelf(e)
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[7] {
					yy3863 := &x.FirstTimestamp
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3863) {
					} else if yym3864 {
						z.EncBinaryMarshal(yy3863)
					} else if !yym3864 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3863)
					} else {
						z.EncFallback(yy3863)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3865 := &x.FirstTimestamp
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3865) {
					} else if yym3866 {
						z.EncBinaryMarshal(yy3865)
					} else if !yym3866 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3865)
					} else {
						z.EncFallback(yy3865)
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[8] {
					yy3868 := &x.LastTimestamp
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3868) {
					} else if yym3869 {
						z.EncBinaryMarshal(yy3868)
					} else if !yym3869 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3868)
					} else {
						z.EncFallback(yy3868)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3870 := &x.LastTimestamp
					yym3871 := z.EncBinary()
					_ = yym3871
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3870) {
					} else if yym3871 {
						z.EncBinaryMarshal(yy3870)
					} else if !yym3871 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3870)
					} else {
						z.EncFallback(yy3870)
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[9] {
					yym3873 := z.EncBinary()
					_ = yym3873
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3840[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3874 := z.EncBinary()
					_ = yym3874
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[10] {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3878 := z.DecBinary()
	_ = yym3878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3879 := r.ContainerType()
		if yyct3879 == codecSelferValueTypeMap1234 {
			yyl3879 := r.ReadMapStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3879, d)
			}
		} else if yyct3879 == codecSelferValueTypeArray1234 {
			yyl3879 := r.ReadArrayStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3880Slc
	var yyhl3880 bool = l >= 0
	for yyj3880 := 0; ; yyj3880++ {
		if yyhl3880 {
			if yyj3880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3880Slc = r.DecodeBytes(yys3880Slc, true, true)
		yys3880 := string(yys3880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3883 := &x.ObjectMeta
				yyv3883.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3884 := &x.InvolvedObject
				yyv3884.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3887 := &x.Source
				yyv3887.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3888 := &x.FirstTimestamp
				yym3889 := z.DecBinary()
				_ = yym3889
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3888) {
				} else if yym3889 {
					z.DecBinaryUnmarshal(yyv3888)
				} else if !yym3889 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3888)
				} else {
					z.DecFallback(yyv3888, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3890 := &x.LastTimestamp
				yym3891 := z.DecBinary()
				_ = yym3891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3890) {
				} else if yym3891 {
					z.DecBinaryUnmarshal(yyv3890)
				} else if !yym3891 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3890)
				} else {
					z.DecFallback(yyv3890, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3880)
		} // end switch yys3880
	} // end for yyj3880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3894 int
	var yyb3894 bool
	var yyhl3894 bool = l >= 0
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3897 := &x.ObjectMeta
		yyv3897.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3898 := &x.InvolvedObject
		yyv3898.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3901 := &x.Source
		yyv3901.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3902 := &x.FirstTimestamp
		yym3903 := z.DecBinary()
		_ = yym3903
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3902) {
		} else if yym3903 {
			z.DecBinaryUnmarshal(yyv3902)
		} else if !yym3903 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3902)
		} else {
			z.DecFallback(yyv3902, false)
		}
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3904 := &x.LastTimestamp
		yym3905 := z.DecBinary()
		_ = yym3905
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3904) {
		} else if yym3905 {
			z.DecBinaryUnmarshal(yyv3904)
		} else if !yym3905 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3904)
		} else {
			z.DecFallback(yyv3904, false)
		}
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3894++
		if yyhl3894 {
			yyb3894 = yyj3894 > l
		} else {
			yyb3894 = r.CheckBreak()
		}
		if yyb3894 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3894-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3908 := z.EncBinary()
		_ = yym3908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3909 := !z.EncBinary()
			yy2arr3909 := z.EncBasicHandle().StructToArray
			var yyq3909 [4]bool
			_, _, _ = yysep3909, yyq3909, yy2arr3909
			const yyr3909 bool = false
			yyq3909[0] = x.Kind != ""
			yyq3909[1] = x.APIVersion != ""
			yyq3909[2] = true
			var yynn3909 int
			if yyr3909 || yy2arr3909 {
				r.EncodeArrayStart(4)
			} else {
				yynn3909 = 1
				for _, b := range yyq3909 {
					if b {
						yynn3909++
					}
				}
				r.EncodeMapStart(yynn3909)
				yynn3909 = 0
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[0] {
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[1] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[2] {
					yy3917 := &x.ListMeta
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3917) {
					} else {
						z.EncFallback(yy3917)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.ListMeta
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3919) {
					} else {
						z.EncFallback(yy3919)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3924 := z.DecBinary()
	_ = yym3924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3925 := r.ContainerType()
		if yyct3925 == codecSelferValueTypeMap1234 {
			yyl3925 := r.ReadMapStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3925, d)
			}
		} else if yyct3925 == codecSelferValueTypeArray1234 {
			yyl3925 := r.ReadArrayStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3926Slc
	var yyhl3926 bool = l >= 0
	for yyj3926 := 0; ; yyj3926++ {
		if yyhl3926 {
			if yyj3926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3926Slc = r.DecodeBytes(yys3926Slc, true, true)
		yys3926 := string(yys3926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3926 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3929 := &x.ListMeta
				yym3930 := z.DecBinary()
				_ = yym3930
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3929) {
				} else {
					z.DecFallback(yyv3929, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3931 := &x.Items
				yym3932 := z.DecBinary()
				_ = yym3932
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3931), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3926)
		} // end switch yys3926
	} // end for yyj3926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3933 int
	var yyb3933 bool
	var yyhl3933 bool = l >= 0
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3936 := &x.ListMeta
		yym3937 := z.DecBinary()
		_ = yym3937
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3936) {
		} else {
			z.DecFallback(yyv3936, false)
		}
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3938 := &x.Items
		yym3939 := z.DecBinary()
		_ = yym3939
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3938), d)
		}
	}
	for {
		yyj3933++
		if yyhl3933 {
			yyb3933 = yyj3933 > l
		} else {
			yyb3933 = r.CheckBreak()
		}
		if yyb3933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3940 := z.EncBinary()
		_ = yym3940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3941 := !z.EncBinary()
			yy2arr3941 := z.EncBasicHandle().StructToArray
			var yyq3941 [4]bool
			_, _, _ = yysep3941, yyq3941, yy2arr3941
			const yyr3941 bool = false
			yyq3941[0] = x.Kind != ""
			yyq3941[1] = x.APIVersion != ""
			yyq3941[2] = true
			var yynn3941 int
			if yyr3941 || yy2arr3941 {
				r.EncodeArrayStart(4)
			} else {
				yynn3941 = 1
				for _, b := range yyq3941 {
					if b {
						yynn3941++
					}
				}
				r.EncodeMapStart(yynn3941)
				yynn3941 = 0
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[0] {
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3941[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[1] {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[2] {
					yy3949 := &x.ListMeta
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3949) {
					} else {
						z.EncFallback(yy3949)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3941[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3951 := &x.ListMeta
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3951) {
					} else {
						z.EncFallback(yy3951)
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3954 := z.EncBinary()
					_ = yym3954
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3955 := z.EncBinary()
					_ = yym3955
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3956 := z.DecBinary()
	_ = yym3956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3957 := r.ContainerType()
		if yyct3957 == codecSelferValueTypeMap1234 {
			yyl3957 := r.ReadMapStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3957, d)
			}
		} else if yyct3957 == codecSelferValueTypeArray1234 {
			yyl3957 := r.ReadArrayStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3958Slc
	var yyhl3958 bool = l >= 0
	for yyj3958 := 0; ; yyj3958++ {
		if yyhl3958 {
			if yyj3958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3958Slc = r.DecodeBytes(yys3958Slc, true, true)
		yys3958 := string(yys3958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3958 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3961 := &x.ListMeta
				yym3962 := z.DecBinary()
				_ = yym3962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3961) {
				} else {
					z.DecFallback(yyv3961, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3963 := &x.Items
				yym3964 := z.DecBinary()
				_ = yym3964
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3963), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3958)
		} // end switch yys3958
	} // end for yyj3958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3965 int
	var yyb3965 bool
	var yyhl3965 bool = l >= 0
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3968 := &x.ListMeta
		yym3969 := z.DecBinary()
		_ = yym3969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3968) {
		} else {
			z.DecFallback(yyv3968, false)
		}
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3970 := &x.Items
		yym3971 := z.DecBinary()
		_ = yym3971
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3970), d)
		}
	}
	for {
		yyj3965++
		if yyhl3965 {
			yyb3965 = yyj3965 > l
		} else {
			yyb3965 = r.CheckBreak()
		}
		if yyb3965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3972 := z.EncBinary()
	_ = yym3972
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3973 := z.DecBinary()
	_ = yym3973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3974 := z.EncBinary()
		_ = yym3974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3975 := !z.EncBinary()
			yy2arr3975 := z.EncBasicHandle().StructToArray
			var yyq3975 [6]bool
			_, _, _ = yysep3975, yyq3975, yy2arr3975
			const yyr3975 bool = false
			yyq3975[0] = x.Type != ""
			yyq3975[1] = len(x.Max) != 0
			yyq3975[2] = len(x.Min) != 0
			yyq3975[3] = len(x.Default) != 0
			yyq3975[4] = len(x.DefaultRequest) != 0
			yyq3975[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3975 int
			if yyr3975 || yy2arr3975 {
				r.EncodeArrayStart(6)
			} else {
				yynn3975 = 0
				for _, b := range yyq3975 {
					if b {
						yynn3975++
					}
				}
				r.EncodeMapStart(yynn3975)
				yynn3975 = 0
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3982 := z.DecBinary()
	_ = yym3982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3983 := r.ContainerType()
		if yyct3983 == codecSelferValueTypeMap1234 {
			yyl3983 := r.ReadMapStart()
			if yyl3983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3983, d)
			}
		} else if yyct3983 == codecSelferValueTypeArray1234 {
			yyl3983 := r.ReadArrayStart()
			if yyl3983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3984Slc
	var yyhl3984 bool = l >= 0
	for yyj3984 := 0; ; yyj3984++ {
		if yyhl3984 {
			if yyj3984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3984Slc = r.DecodeBytes(yys3984Slc, true, true)
		yys3984 := string(yys3984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3984 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3986 := &x.Max
				yyv3986.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3987 := &x.Min
				yyv3987.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3988 := &x.Default
				yyv3988.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3989 := &x.DefaultRequest
				yyv3989.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3990 := &x.MaxLimitRequestRatio
				yyv3990.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3984)
		} // end switch yys3984
	} // end for yyj3984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3991 int
	var yyb3991 bool
	var yyhl3991 bool = l >= 0
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3993 := &x.Max
		yyv3993.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3994 := &x.Min
		yyv3994.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3995 := &x.Default
		yyv3995.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3996 := &x.DefaultRequest
		yyv3996.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3997 := &x.MaxLimitRequestRatio
		yyv3997.CodecDecodeSelf(d)
	}
	for {
		yyj3991++
		if yyhl3991 {
			yyb3991 = yyj3991 > l
		} else {
			yyb3991 = r.CheckBreak()
		}
		if yyb3991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3998 := z.EncBinary()
		_ = yym3998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3999 := !z.EncBinary()
			yy2arr3999 := z.EncBasicHandle().StructToArray
			var yyq3999 [1]bool
			_, _, _ = yysep3999, yyq3999, yy2arr3999
			const yyr3999 bool = false
			var yynn3999 int
			if yyr3999 || yy2arr3999 {
				r.EncodeArrayStart(1)
			} else {
				yynn3999 = 1
				for _, b := range yyq3999 {
					if b {
						yynn3999++
					}
				}
				r.EncodeMapStart(yynn3999)
				yynn3999 = 0
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4002 := z.EncBinary()
					_ = yym4002
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4003 := z.DecBinary()
	_ = yym4003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4004 := r.ContainerType()
		if yyct4004 == codecSelferValueTypeMap1234 {
			yyl4004 := r.ReadMapStart()
			if yyl4004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4004, d)
			}
		} else if yyct4004 == codecSelferValueTypeArray1234 {
			yyl4004 := r.ReadArrayStart()
			if yyl4004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4005Slc
	var yyhl4005 bool = l >= 0
	for yyj4005 := 0; ; yyj4005++ {
		if yyhl4005 {
			if yyj4005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4005Slc = r.DecodeBytes(yys4005Slc, true, true)
		yys4005 := string(yys4005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4005 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4006 := &x.Limits
				yym4007 := z.DecBinary()
				_ = yym4007
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4006), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4005)
		} // end switch yys4005
	} // end for yyj4005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4008 int
	var yyb4008 bool
	var yyhl4008 bool = l >= 0
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4009 := &x.Limits
		yym4010 := z.DecBinary()
		_ = yym4010
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4009), d)
		}
	}
	for {
		yyj4008++
		if yyhl4008 {
			yyb4008 = yyj4008 > l
		} else {
			yyb4008 = r.CheckBreak()
		}
		if yyb4008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4011 := z.EncBinary()
		_ = yym4011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4012 := !z.EncBinary()
			yy2arr4012 := z.EncBasicHandle().StructToArray
			var yyq4012 [4]bool
			_, _, _ = yysep4012, yyq4012, yy2arr4012
			const yyr4012 bool = false
			yyq4012[0] = x.Kind != ""
			yyq4012[1] = x.APIVersion != ""
			yyq4012[2] = true
			yyq4012[3] = true
			var yynn4012 int
			if yyr4012 || yy2arr4012 {
				r.EncodeArrayStart(4)
			} else {
				yynn4012 = 0
				for _, b := range yyq4012 {
					if b {
						yynn4012++
					}
				}
				r.EncodeMapStart(yynn4012)
				yynn4012 = 0
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[0] {
					yym4014 := z.EncBinary()
					_ = yym4014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[1] {
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[2] {
					yy4020 := &x.ObjectMeta
					yy4020.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4021 := &x.ObjectMeta
					yy4021.CodecEncodeSelf(e)
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[3] {
					yy4023 := &x.Spec
					yy4023.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4012[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4024 := &x.Spec
					yy4024.CodecEncodeSelf(e)
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4025 := z.DecBinary()
	_ = yym4025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4026 := r.ContainerType()
		if yyct4026 == codecSelferValueTypeMap1234 {
			yyl4026 := r.ReadMapStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4026, d)
			}
		} else if yyct4026 == codecSelferValueTypeArray1234 {
			yyl4026 := r.ReadArrayStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4027Slc
	var yyhl4027 bool = l >= 0
	for yyj4027 := 0; ; yyj4027++ {
		if yyhl4027 {
			if yyj4027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4027Slc = r.DecodeBytes(yys4027Slc, true, true)
		yys4027 := string(yys4027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4030 := &x.ObjectMeta
				yyv4030.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4031 := &x.Spec
				yyv4031.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4027)
		} // end switch yys4027
	} // end for yyj4027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4032 int
	var yyb4032 bool
	var yyhl4032 bool = l >= 0
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4035 := &x.ObjectMeta
		yyv4035.CodecDecodeSelf(d)
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4036 := &x.Spec
		yyv4036.CodecDecodeSelf(d)
	}
	for {
		yyj4032++
		if yyhl4032 {
			yyb4032 = yyj4032 > l
		} else {
			yyb4032 = r.CheckBreak()
		}
		if yyb4032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4037 := z.EncBinary()
		_ = yym4037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4038 := !z.EncBinary()
			yy2arr4038 := z.EncBasicHandle().StructToArray
			var yyq4038 [4]bool
			_, _, _ = yysep4038, yyq4038, yy2arr4038
			const yyr4038 bool = false
			yyq4038[0] = x.Kind != ""
			yyq4038[1] = x.APIVersion != ""
			yyq4038[2] = true
			var yynn4038 int
			if yyr4038 || yy2arr4038 {
				r.EncodeArrayStart(4)
			} else {
				yynn4038 = 1
				for _, b := range yyq4038 {
					if b {
						yynn4038++
					}
				}
				r.EncodeMapStart(yynn4038)
				yynn4038 = 0
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[0] {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[1] {
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[2] {
					yy4046 := &x.ListMeta
					yym4047 := z.EncBinary()
					_ = yym4047
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4046) {
					} else {
						z.EncFallback(yy4046)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4048 := &x.ListMeta
					yym4049 := z.EncBinary()
					_ = yym4049
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4048) {
					} else {
						z.EncFallback(yy4048)
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4051 := z.EncBinary()
					_ = yym4051
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4052 := z.EncBinary()
					_ = yym4052
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4053 := z.DecBinary()
	_ = yym4053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4054 := r.ContainerType()
		if yyct4054 == codecSelferValueTypeMap1234 {
			yyl4054 := r.ReadMapStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4054, d)
			}
		} else if yyct4054 == codecSelferValueTypeArray1234 {
			yyl4054 := r.ReadArrayStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4055Slc
	var yyhl4055 bool = l >= 0
	for yyj4055 := 0; ; yyj4055++ {
		if yyhl4055 {
			if yyj4055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4055Slc = r.DecodeBytes(yys4055Slc, true, true)
		yys4055 := string(yys4055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4055 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4058 := &x.ListMeta
				yym4059 := z.DecBinary()
				_ = yym4059
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4058) {
				} else {
					z.DecFallback(yyv4058, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4060 := &x.Items
				yym4061 := z.DecBinary()
				_ = yym4061
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4060), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4055)
		} // end switch yys4055
	} // end for yyj4055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4062 int
	var yyb4062 bool
	var yyhl4062 bool = l >= 0
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4065 := &x.ListMeta
		yym4066 := z.DecBinary()
		_ = yym4066
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4065) {
		} else {
			z.DecFallback(yyv4065, false)
		}
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4067 := &x.Items
		yym4068 := z.DecBinary()
		_ = yym4068
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4067), d)
		}
	}
	for {
		yyj4062++
		if yyhl4062 {
			yyb4062 = yyj4062 > l
		} else {
			yyb4062 = r.CheckBreak()
		}
		if yyb4062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4069 := z.EncBinary()
	_ = yym4069
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4070 := z.DecBinary()
	_ = yym4070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4071 := z.EncBinary()
		_ = yym4071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4072 := !z.EncBinary()
			yy2arr4072 := z.EncBasicHandle().StructToArray
			var yyq4072 [2]bool
			_, _, _ = yysep4072, yyq4072, yy2arr4072
			const yyr4072 bool = false
			yyq4072[0] = len(x.Hard) != 0
			yyq4072[1] = len(x.Scopes) != 0
			var yynn4072 int
			if yyr4072 || yy2arr4072 {
				r.EncodeArrayStart(2)
			} else {
				yynn4072 = 0
				for _, b := range yyq4072 {
					if b {
						yynn4072++
					}
				}
				r.EncodeMapStart(yynn4072)
				yynn4072 = 0
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4072[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4072[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4075 := z.EncBinary()
						_ = yym4075
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4076 := z.EncBinary()
						_ = yym4076
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4077 := z.DecBinary()
	_ = yym4077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4078 := r.ContainerType()
		if yyct4078 == codecSelferValueTypeMap1234 {
			yyl4078 := r.ReadMapStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4078, d)
			}
		} else if yyct4078 == codecSelferValueTypeArray1234 {
			yyl4078 := r.ReadArrayStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4079Slc
	var yyhl4079 bool = l >= 0
	for yyj4079 := 0; ; yyj4079++ {
		if yyhl4079 {
			if yyj4079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4079Slc = r.DecodeBytes(yys4079Slc, true, true)
		yys4079 := string(yys4079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4079 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4080 := &x.Hard
				yyv4080.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4081 := &x.Scopes
				yym4082 := z.DecBinary()
				_ = yym4082
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4081), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4079)
		} // end switch yys4079
	} // end for yyj4079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4083 int
	var yyb4083 bool
	var yyhl4083 bool = l >= 0
	yyj4083++
	if yyhl4083 {
		yyb4083 = yyj4083 > l
	} else {
		yyb4083 = r.CheckBreak()
	}
	if yyb4083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4084 := &x.Hard
		yyv4084.CodecDecodeSelf(d)
	}
	yyj4083++
	if yyhl4083 {
		yyb4083 = yyj4083 > l
	} else {
		yyb4083 = r.CheckBreak()
	}
	if yyb4083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4085 := &x.Scopes
		yym4086 := z.DecBinary()
		_ = yym4086
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4085), d)
		}
	}
	for {
		yyj4083++
		if yyhl4083 {
			yyb4083 = yyj4083 > l
		} else {
			yyb4083 = r.CheckBreak()
		}
		if yyb4083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4087 := z.EncBinary()
		_ = yym4087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4088 := !z.EncBinary()
			yy2arr4088 := z.EncBasicHandle().StructToArray
			var yyq4088 [2]bool
			_, _, _ = yysep4088, yyq4088, yy2arr4088
			const yyr4088 bool = false
			yyq4088[0] = len(x.Hard) != 0
			yyq4088[1] = len(x.Used) != 0
			var yynn4088 int
			if yyr4088 || yy2arr4088 {
				r.EncodeArrayStart(2)
			} else {
				yynn4088 = 0
				for _, b := range yyq4088 {
					if b {
						yynn4088++
					}
				}
				r.EncodeMapStart(yynn4088)
				yynn4088 = 0
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4088[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4091 := z.DecBinary()
	_ = yym4091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4092 := r.ContainerType()
		if yyct4092 == codecSelferValueTypeMap1234 {
			yyl4092 := r.ReadMapStart()
			if yyl4092 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4092, d)
			}
		} else if yyct4092 == codecSelferValueTypeArray1234 {
			yyl4092 := r.ReadArrayStart()
			if yyl4092 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4093Slc
	var yyhl4093 bool = l >= 0
	for yyj4093 := 0; ; yyj4093++ {
		if yyhl4093 {
			if yyj4093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4093Slc = r.DecodeBytes(yys4093Slc, true, true)
		yys4093 := string(yys4093Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4093 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4094 := &x.Hard
				yyv4094.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4095 := &x.Used
				yyv4095.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4093)
		} // end switch yys4093
	} // end for yyj4093
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4096 int
	var yyb4096 bool
	var yyhl4096 bool = l >= 0
	yyj4096++
	if yyhl4096 {
		yyb4096 = yyj4096 > l
	} else {
		yyb4096 = r.CheckBreak()
	}
	if yyb4096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4097 := &x.Hard
		yyv4097.CodecDecodeSelf(d)
	}
	yyj4096++
	if yyhl4096 {
		yyb4096 = yyj4096 > l
	} else {
		yyb4096 = r.CheckBreak()
	}
	if yyb4096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4098 := &x.Used
		yyv4098.CodecDecodeSelf(d)
	}
	for {
		yyj4096++
		if yyhl4096 {
			yyb4096 = yyj4096 > l
		} else {
			yyb4096 = r.CheckBreak()
		}
		if yyb4096 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4096-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4099 := z.EncBinary()
		_ = yym4099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4100 := !z.EncBinary()
			yy2arr4100 := z.EncBasicHandle().StructToArray
			var yyq4100 [5]bool
			_, _, _ = yysep4100, yyq4100, yy2arr4100
			const yyr4100 bool = false
			yyq4100[0] = x.Kind != ""
			yyq4100[1] = x.APIVersion != ""
			yyq4100[2] = true
			yyq4100[3] = true
			yyq4100[4] = true
			var yynn4100 int
			if yyr4100 || yy2arr4100 {
				r.EncodeArrayStart(5)
			} else {
				yynn4100 = 0
				for _, b := range yyq4100 {
					if b {
						yynn4100++
					}
				}
				r.EncodeMapStart(yynn4100)
				yynn4100 = 0
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[0] {
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4100[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4103 := z.EncBinary()
					_ = yym4103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[1] {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4100[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4106 := z.EncBinary()
					_ = yym4106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[2] {
					yy4108 := &x.ObjectMeta
					yy4108.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4109 := &x.ObjectMeta
					yy4109.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[3] {
					yy4111 := &x.Spec
					yy4111.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4112 := &x.Spec
					yy4112.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[4] {
					yy4114 := &x.Status
					yy4114.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4115 := &x.Status
					yy4115.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4116 := z.DecBinary()
	_ = yym4116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4117 := r.ContainerType()
		if yyct4117 == codecSelferValueTypeMap1234 {
			yyl4117 := r.ReadMapStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4117, d)
			}
		} else if yyct4117 == codecSelferValueTypeArray1234 {
			yyl4117 := r.ReadArrayStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4118Slc
	var yyhl4118 bool = l >= 0
	for yyj4118 := 0; ; yyj4118++ {
		if yyhl4118 {
			if yyj4118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4118Slc = r.DecodeBytes(yys4118Slc, true, true)
		yys4118 := string(yys4118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4121 := &x.ObjectMeta
				yyv4121.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4122 := &x.Spec
				yyv4122.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4123 := &x.Status
				yyv4123.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4118)
		} // end switch yys4118
	} // end for yyj4118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4124 int
	var yyb4124 bool
	var yyhl4124 bool = l >= 0
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4127 := &x.ObjectMeta
		yyv4127.CodecDecodeSelf(d)
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4128 := &x.Spec
		yyv4128.CodecDecodeSelf(d)
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4129 := &x.Status
		yyv4129.CodecDecodeSelf(d)
	}
	for {
		yyj4124++
		if yyhl4124 {
			yyb4124 = yyj4124 > l
		} else {
			yyb4124 = r.CheckBreak()
		}
		if yyb4124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4130 := z.EncBinary()
		_ = yym4130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4131 := !z.EncBinary()
			yy2arr4131 := z.EncBasicHandle().StructToArray
			var yyq4131 [4]bool
			_, _, _ = yysep4131, yyq4131, yy2arr4131
			const yyr4131 bool = false
			yyq4131[0] = x.Kind != ""
			yyq4131[1] = x.APIVersion != ""
			yyq4131[2] = true
			var yynn4131 int
			if yyr4131 || yy2arr4131 {
				r.EncodeArrayStart(4)
			} else {
				yynn4131 = 1
				for _, b := range yyq4131 {
					if b {
						yynn4131++
					}
				}
				r.EncodeMapStart(yynn4131)
				yynn4131 = 0
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[0] {
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4134 := z.EncBinary()
					_ = yym4134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[1] {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[2] {
					yy4139 := &x.ListMeta
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4139) {
					} else {
						z.EncFallback(yy4139)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4141 := &x.ListMeta
					yym4142 := z.EncBinary()
					_ = yym4142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4141) {
					} else {
						z.EncFallback(yy4141)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4144 := z.EncBinary()
					_ = yym4144
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4146 := z.DecBinary()
	_ = yym4146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4147 := r.ContainerType()
		if yyct4147 == codecSelferValueTypeMap1234 {
			yyl4147 := r.ReadMapStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4147, d)
			}
		} else if yyct4147 == codecSelferValueTypeArray1234 {
			yyl4147 := r.ReadArrayStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4148Slc
	var yyhl4148 bool = l >= 0
	for yyj4148 := 0; ; yyj4148++ {
		if yyhl4148 {
			if yyj4148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4148Slc = r.DecodeBytes(yys4148Slc, true, true)
		yys4148 := string(yys4148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4148 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4151 := &x.ListMeta
				yym4152 := z.DecBinary()
				_ = yym4152
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4151) {
				} else {
					z.DecFallback(yyv4151, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4153 := &x.Items
				yym4154 := z.DecBinary()
				_ = yym4154
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4153), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4148)
		} // end switch yys4148
	} // end for yyj4148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4155 int
	var yyb4155 bool
	var yyhl4155 bool = l >= 0
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4158 := &x.ListMeta
		yym4159 := z.DecBinary()
		_ = yym4159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4158) {
		} else {
			z.DecFallback(yyv4158, false)
		}
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4160 := &x.Items
		yym4161 := z.DecBinary()
		_ = yym4161
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4160), d)
		}
	}
	for {
		yyj4155++
		if yyhl4155 {
			yyb4155 = yyj4155 > l
		} else {
			yyb4155 = r.CheckBreak()
		}
		if yyb4155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4162 := z.EncBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4163 := !z.EncBinary()
			yy2arr4163 := z.EncBasicHandle().StructToArray
			var yyq4163 [6]bool
			_, _, _ = yysep4163, yyq4163, yy2arr4163
			const yyr4163 bool = false
			yyq4163[0] = x.Kind != ""
			yyq4163[1] = x.APIVersion != ""
			yyq4163[2] = true
			yyq4163[3] = len(x.Data) != 0
			yyq4163[4] = len(x.StringData) != 0
			yyq4163[5] = x.Type != ""
			var yynn4163 int
			if yyr4163 || yy2arr4163 {
				r.EncodeArrayStart(6)
			} else {
				yynn4163 = 0
				for _, b := range yyq4163 {
					if b {
						yynn4163++
					}
				}
				r.EncodeMapStart(yynn4163)
				yynn4163 = 0
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[0] {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[1] {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[2] {
					yy4171 := &x.ObjectMeta
					yy4171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4172 := &x.ObjectMeta
					yy4172.CodecEncodeSelf(e)
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4174 := z.EncBinary()
						_ = yym4174
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4175 := z.EncBinary()
						_ = yym4175
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4177 := z.EncBinary()
						_ = yym4177
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4178 := z.EncBinary()
						_ = yym4178
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4180 := z.DecBinary()
	_ = yym4180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4181 := r.ContainerType()
		if yyct4181 == codecSelferValueTypeMap1234 {
			yyl4181 := r.ReadMapStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4181, d)
			}
		} else if yyct4181 == codecSelferValueTypeArray1234 {
			yyl4181 := r.ReadArrayStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4182Slc
	var yyhl4182 bool = l >= 0
	for yyj4182 := 0; ; yyj4182++ {
		if yyhl4182 {
			if yyj4182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4182Slc = r.DecodeBytes(yys4182Slc, true, true)
		yys4182 := string(yys4182Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4182 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4185 := &x.ObjectMeta
				yyv4185.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4186 := &x.Data
				yym4187 := z.DecBinary()
				_ = yym4187
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4186), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4188 := &x.StringData
				yym4189 := z.DecBinary()
				_ = yym4189
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4188, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4182)
		} // end switch yys4182
	} // end for yyj4182
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4191 int
	var yyb4191 bool
	var yyhl4191 bool = l >= 0
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4194 := &x.ObjectMeta
		yyv4194.CodecDecodeSelf(d)
	}
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4195 := &x.Data
		yym4196 := z.DecBinary()
		_ = yym4196
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4195), d)
		}
	}
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4197 := &x.StringData
		yym4198 := z.DecBinary()
		_ = yym4198
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4197, false, d)
		}
	}
	yyj4191++
	if yyhl4191 {
		yyb4191 = yyj4191 > l
	} else {
		yyb4191 = r.CheckBreak()
	}
	if yyb4191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4191++
		if yyhl4191 {
			yyb4191 = yyj4191 > l
		} else {
			yyb4191 = r.CheckBreak()
		}
		if yyb4191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4200 := z.EncBinary()
	_ = yym4200
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4201 := z.DecBinary()
	_ = yym4201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4202 := z.EncBinary()
		_ = yym4202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4203 := !z.EncBinary()
			yy2arr4203 := z.EncBasicHandle().StructToArray
			var yyq4203 [4]bool
			_, _, _ = yysep4203, yyq4203, yy2arr4203
			const yyr4203 bool = false
			yyq4203[0] = x.Kind != ""
			yyq4203[1] = x.APIVersion != ""
			yyq4203[2] = true
			var yynn4203 int
			if yyr4203 || yy2arr4203 {
				r.EncodeArrayStart(4)
			} else {
				yynn4203 = 1
				for _, b := range yyq4203 {
					if b {
						yynn4203++
					}
				}
				r.EncodeMapStart(yynn4203)
				yynn4203 = 0
			}
			if yyr4203 || yy2arr4203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4203[0] {
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4203[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4206 := z.EncBinary()
					_ = yym4206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4203 || yy2arr4203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4203[1] {
					yym4208 := z.EncBinary()
					_ = yym4208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4203[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4203 || yy2arr4203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4203[2] {
					yy4211 := &x.ListMeta
					yym4212 := z.EncBinary()
					_ = yym4212
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4211) {
					} else {
						z.EncFallback(yy4211)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4203[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4213 := &x.ListMeta
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4213) {
					} else {
						z.EncFallback(yy4213)
					}
				}
			}
			if yyr4203 || yy2arr4203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4216 := z.EncBinary()
					_ = yym4216
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4203 || yy2arr4203 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4218 := z.DecBinary()
	_ = yym4218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4219 := r.ContainerType()
		if yyct4219 == codecSelferValueTypeMap1234 {
			yyl4219 := r.ReadMapStart()
			if yyl4219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4219, d)
			}
		} else if yyct4219 == codecSelferValueTypeArray1234 {
			yyl4219 := r.ReadArrayStart()
			if yyl4219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4220Slc
	var yyhl4220 bool = l >= 0
	for yyj4220 := 0; ; yyj4220++ {
		if yyhl4220 {
			if yyj4220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4220Slc = r.DecodeBytes(yys4220Slc, true, true)
		yys4220 := string(yys4220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4223 := &x.ListMeta
				yym4224 := z.DecBinary()
				_ = yym4224
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4223) {
				} else {
					z.DecFallback(yyv4223, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4225 := &x.Items
				yym4226 := z.DecBinary()
				_ = yym4226
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4225), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4220)
		} // end switch yys4220
	} // end for yyj4220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4227 int
	var yyb4227 bool
	var yyhl4227 bool = l >= 0
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4230 := &x.ListMeta
		yym4231 := z.DecBinary()
		_ = yym4231
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4230) {
		} else {
			z.DecFallback(yyv4230, false)
		}
	}
	yyj4227++
	if yyhl4227 {
		yyb4227 = yyj4227 > l
	} else {
		yyb4227 = r.CheckBreak()
	}
	if yyb4227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4232 := &x.Items
		yym4233 := z.DecBinary()
		_ = yym4233
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4232), d)
		}
	}
	for {
		yyj4227++
		if yyhl4227 {
			yyb4227 = yyj4227 > l
		} else {
			yyb4227 = r.CheckBreak()
		}
		if yyb4227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4234 := z.EncBinary()
		_ = yym4234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4235 := !z.EncBinary()
			yy2arr4235 := z.EncBasicHandle().StructToArray
			var yyq4235 [4]bool
			_, _, _ = yysep4235, yyq4235, yy2arr4235
			const yyr4235 bool = false
			yyq4235[0] = x.Kind != ""
			yyq4235[1] = x.APIVersion != ""
			yyq4235[2] = true
			yyq4235[3] = len(x.Data) != 0
			var yynn4235 int
			if yyr4235 || yy2arr4235 {
				r.EncodeArrayStart(4)
			} else {
				yynn4235 = 0
				for _, b := range yyq4235 {
					if b {
						yynn4235++
					}
				}
				r.EncodeMapStart(yynn4235)
				yynn4235 = 0
			}
			if yyr4235 || yy2arr4235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4235[0] {
					yym4237 := z.EncBinary()
					_ = yym4237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4235[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4238 := z.EncBinary()
					_ = yym4238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4235 || yy2arr4235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4235[1] {
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4235[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4241 := z.EncBinary()
					_ = yym4241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4235 || yy2arr4235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4235[2] {
					yy4243 := &x.ObjectMeta
					yy4243.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4235[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4244 := &x.ObjectMeta
					yy4244.CodecEncodeSelf(e)
				}
			}
			if yyr4235 || yy2arr4235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4235[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4246 := z.EncBinary()
						_ = yym4246
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4235[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4247 := z.EncBinary()
						_ = yym4247
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4235 || yy2arr4235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4248 := z.DecBinary()
	_ = yym4248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4249 := r.ContainerType()
		if yyct4249 == codecSelferValueTypeMap1234 {
			yyl4249 := r.ReadMapStart()
			if yyl4249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4249, d)
			}
		} else if yyct4249 == codecSelferValueTypeArray1234 {
			yyl4249 := r.ReadArrayStart()
			if yyl4249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4250Slc
	var yyhl4250 bool = l >= 0
	for yyj4250 := 0; ; yyj4250++ {
		if yyhl4250 {
			if yyj4250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4250Slc = r.DecodeBytes(yys4250Slc, true, true)
		yys4250 := string(yys4250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4250 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4253 := &x.ObjectMeta
				yyv4253.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4254 := &x.Data
				yym4255 := z.DecBinary()
				_ = yym4255
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4254, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4250)
		} // end switch yys4250
	} // end for yyj4250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4256 int
	var yyb4256 bool
	var yyhl4256 bool = l >= 0
	yyj4256++
	if yyhl4256 {
		yyb4256 = yyj4256 > l
	} else {
		yyb4256 = r.CheckBreak()
	}
	if yyb4256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4256++
	if yyhl4256 {
		yyb4256 = yyj4256 > l
	} else {
		yyb4256 = r.CheckBreak()
	}
	if yyb4256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4256++
	if yyhl4256 {
		yyb4256 = yyj4256 > l
	} else {
		yyb4256 = r.CheckBreak()
	}
	if yyb4256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4259 := &x.ObjectMeta
		yyv4259.CodecDecodeSelf(d)
	}
	yyj4256++
	if yyhl4256 {
		yyb4256 = yyj4256 > l
	} else {
		yyb4256 = r.CheckBreak()
	}
	if yyb4256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4260 := &x.Data
		yym4261 := z.DecBinary()
		_ = yym4261
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4260, false, d)
		}
	}
	for {
		yyj4256++
		if yyhl4256 {
			yyb4256 = yyj4256 > l
		} else {
			yyb4256 = r.CheckBreak()
		}
		if yyb4256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4262 := z.EncBinary()
		_ = yym4262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4263 := !z.EncBinary()
			yy2arr4263 := z.EncBasicHandle().StructToArray
			var yyq4263 [4]bool
			_, _, _ = yysep4263, yyq4263, yy2arr4263
			const yyr4263 bool = false
			yyq4263[0] = x.Kind != ""
			yyq4263[1] = x.APIVersion != ""
			yyq4263[2] = true
			var yynn4263 int
			if yyr4263 || yy2arr4263 {
				r.EncodeArrayStart(4)
			} else {
				yynn4263 = 1
				for _, b := range yyq4263 {
					if b {
						yynn4263++
					}
				}
				r.EncodeMapStart(yynn4263)
				yynn4263 = 0
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4263[0] {
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4266 := z.EncBinary()
					_ = yym4266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4263[1] {
					yym4268 := z.EncBinary()
					_ = yym4268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4269 := z.EncBinary()
					_ = yym4269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4263[2] {
					yy4271 := &x.ListMeta
					yym4272 := z.EncBinary()
					_ = yym4272
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4271) {
					} else {
						z.EncFallback(yy4271)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4273 := &x.ListMeta
					yym4274 := z.EncBinary()
					_ = yym4274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4273) {
					} else {
						z.EncFallback(yy4273)
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4276 := z.EncBinary()
					_ = yym4276
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4277 := z.EncBinary()
					_ = yym4277
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4263 || yy2arr4263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4278 := z.DecBinary()
	_ = yym4278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4279 := r.ContainerType()
		if yyct4279 == codecSelferValueTypeMap1234 {
			yyl4279 := r.ReadMapStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4279, d)
			}
		} else if yyct4279 == codecSelferValueTypeArray1234 {
			yyl4279 := r.ReadArrayStart()
			if yyl4279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4280Slc
	var yyhl4280 bool = l >= 0
	for yyj4280 := 0; ; yyj4280++ {
		if yyhl4280 {
			if yyj4280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4280Slc = r.DecodeBytes(yys4280Slc, true, true)
		yys4280 := string(yys4280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4283 := &x.ListMeta
				yym4284 := z.DecBinary()
				_ = yym4284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4283) {
				} else {
					z.DecFallback(yyv4283, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4285 := &x.Items
				yym4286 := z.DecBinary()
				_ = yym4286
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4285), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4280)
		} // end switch yys4280
	} // end for yyj4280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4287 int
	var yyb4287 bool
	var yyhl4287 bool = l >= 0
	yyj4287++
	if yyhl4287 {
		yyb4287 = yyj4287 > l
	} else {
		yyb4287 = r.CheckBreak()
	}
	if yyb4287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4287++
	if yyhl4287 {
		yyb4287 = yyj4287 > l
	} else {
		yyb4287 = r.CheckBreak()
	}
	if yyb4287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4287++
	if yyhl4287 {
		yyb4287 = yyj4287 > l
	} else {
		yyb4287 = r.CheckBreak()
	}
	if yyb4287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4290 := &x.ListMeta
		yym4291 := z.DecBinary()
		_ = yym4291
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4290) {
		} else {
			z.DecFallback(yyv4290, false)
		}
	}
	yyj4287++
	if yyhl4287 {
		yyb4287 = yyj4287 > l
	} else {
		yyb4287 = r.CheckBreak()
	}
	if yyb4287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4292 := &x.Items
		yym4293 := z.DecBinary()
		_ = yym4293
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4292), d)
		}
	}
	for {
		yyj4287++
		if yyhl4287 {
			yyb4287 = yyj4287 > l
		} else {
			yyb4287 = r.CheckBreak()
		}
		if yyb4287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4294 := z.EncBinary()
	_ = yym4294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4295 := z.DecBinary()
	_ = yym4295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4296 := z.EncBinary()
		_ = yym4296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4297 := !z.EncBinary()
			yy2arr4297 := z.EncBasicHandle().StructToArray
			var yyq4297 [4]bool
			_, _, _ = yysep4297, yyq4297, yy2arr4297
			const yyr4297 bool = false
			yyq4297[2] = x.Message != ""
			yyq4297[3] = x.Error != ""
			var yynn4297 int
			if yyr4297 || yy2arr4297 {
				r.EncodeArrayStart(4)
			} else {
				yynn4297 = 2
				for _, b := range yyq4297 {
					if b {
						yynn4297++
					}
				}
				r.EncodeMapStart(yynn4297)
				yynn4297 = 0
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[2] {
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4297[3] {
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4305 := z.EncBinary()
					_ = yym4305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4297 || yy2arr4297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4306 := z.DecBinary()
	_ = yym4306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4307 := r.ContainerType()
		if yyct4307 == codecSelferValueTypeMap1234 {
			yyl4307 := r.ReadMapStart()
			if yyl4307 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4307, d)
			}
		} else if yyct4307 == codecSelferValueTypeArray1234 {
			yyl4307 := r.ReadArrayStart()
			if yyl4307 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4308Slc
	var yyhl4308 bool = l >= 0
	for yyj4308 := 0; ; yyj4308++ {
		if yyhl4308 {
			if yyj4308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4308Slc = r.DecodeBytes(yys4308Slc, true, true)
		yys4308 := string(yys4308Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4308 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4308)
		} // end switch yys4308
	} // end for yyj4308
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4313 int
	var yyb4313 bool
	var yyhl4313 bool = l >= 0
	yyj4313++
	if yyhl4313 {
		yyb4313 = yyj4313 > l
	} else {
		yyb4313 = r.CheckBreak()
	}
	if yyb4313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4313++
	if yyhl4313 {
		yyb4313 = yyj4313 > l
	} else {
		yyb4313 = r.CheckBreak()
	}
	if yyb4313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4313++
	if yyhl4313 {
		yyb4313 = yyj4313 > l
	} else {
		yyb4313 = r.CheckBreak()
	}
	if yyb4313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4313++
	if yyhl4313 {
		yyb4313 = yyj4313 > l
	} else {
		yyb4313 = r.CheckBreak()
	}
	if yyb4313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4313++
		if yyhl4313 {
			yyb4313 = yyj4313 > l
		} else {
			yyb4313 = r.CheckBreak()
		}
		if yyb4313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4318 := z.EncBinary()
		_ = yym4318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4319 := !z.EncBinary()
			yy2arr4319 := z.EncBasicHandle().StructToArray
			var yyq4319 [4]bool
			_, _, _ = yysep4319, yyq4319, yy2arr4319
			const yyr4319 bool = false
			yyq4319[0] = x.Kind != ""
			yyq4319[1] = x.APIVersion != ""
			yyq4319[2] = true
			yyq4319[3] = len(x.Conditions) != 0
			var yynn4319 int
			if yyr4319 || yy2arr4319 {
				r.EncodeArrayStart(4)
			} else {
				yynn4319 = 0
				for _, b := range yyq4319 {
					if b {
						yynn4319++
					}
				}
				r.EncodeMapStart(yynn4319)
				yynn4319 = 0
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[0] {
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[1] {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[2] {
					yy4327 := &x.ObjectMeta
					yy4327.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4319[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4328 := &x.ObjectMeta
					yy4328.CodecEncodeSelf(e)
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4319[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4330 := z.EncBinary()
						_ = yym4330
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4319[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4331 := z.EncBinary()
						_ = yym4331
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4319 || yy2arr4319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4332 := z.DecBinary()
	_ = yym4332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4333 := r.ContainerType()
		if yyct4333 == codecSelferValueTypeMap1234 {
			yyl4333 := r.ReadMapStart()
			if yyl4333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4333, d)
			}
		} else if yyct4333 == codecSelferValueTypeArray1234 {
			yyl4333 := r.ReadArrayStart()
			if yyl4333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4334Slc
	var yyhl4334 bool = l >= 0
	for yyj4334 := 0; ; yyj4334++ {
		if yyhl4334 {
			if yyj4334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4334Slc = r.DecodeBytes(yys4334Slc, true, true)
		yys4334 := string(yys4334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4337 := &x.ObjectMeta
				yyv4337.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4338 := &x.Conditions
				yym4339 := z.DecBinary()
				_ = yym4339
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4338), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4334)
		} // end switch yys4334
	} // end for yyj4334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4340 int
	var yyb4340 bool
	var yyhl4340 bool = l >= 0
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4343 := &x.ObjectMeta
		yyv4343.CodecDecodeSelf(d)
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4344 := &x.Conditions
		yym4345 := z.DecBinary()
		_ = yym4345
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4344), d)
		}
	}
	for {
		yyj4340++
		if yyhl4340 {
			yyb4340 = yyj4340 > l
		} else {
			yyb4340 = r.CheckBreak()
		}
		if yyb4340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4346 := z.EncBinary()
		_ = yym4346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4347 := !z.EncBinary()
			yy2arr4347 := z.EncBasicHandle().StructToArray
			var yyq4347 [4]bool
			_, _, _ = yysep4347, yyq4347, yy2arr4347
			const yyr4347 bool = false
			yyq4347[0] = x.Kind != ""
			yyq4347[1] = x.APIVersion != ""
			yyq4347[2] = true
			var yynn4347 int
			if yyr4347 || yy2arr4347 {
				r.EncodeArrayStart(4)
			} else {
				yynn4347 = 1
				for _, b := range yyq4347 {
					if b {
						yynn4347++
					}
				}
				r.EncodeMapStart(yynn4347)
				yynn4347 = 0
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[0] {
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4347[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4350 := z.EncBinary()
					_ = yym4350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[1] {
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4347[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4347[2] {
					yy4355 := &x.ListMeta
					yym4356 := z.EncBinary()
					_ = yym4356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4355) {
					} else {
						z.EncFallback(yy4355)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4347[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4357 := &x.ListMeta
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4357) {
					} else {
						z.EncFallback(yy4357)
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4347 || yy2arr4347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4362 := z.DecBinary()
	_ = yym4362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4363 := r.ContainerType()
		if yyct4363 == codecSelferValueTypeMap1234 {
			yyl4363 := r.ReadMapStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4363, d)
			}
		} else if yyct4363 == codecSelferValueTypeArray1234 {
			yyl4363 := r.ReadArrayStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4364Slc
	var yyhl4364 bool = l >= 0
	for yyj4364 := 0; ; yyj4364++ {
		if yyhl4364 {
			if yyj4364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4364Slc = r.DecodeBytes(yys4364Slc, true, true)
		yys4364 := string(yys4364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4364 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4367 := &x.ListMeta
				yym4368 := z.DecBinary()
				_ = yym4368
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4367) {
				} else {
					z.DecFallback(yyv4367, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4369 := &x.Items
				yym4370 := z.DecBinary()
				_ = yym4370
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4369), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4364)
		} // end switch yys4364
	} // end for yyj4364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4371 int
	var yyb4371 bool
	var yyhl4371 bool = l >= 0
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4374 := &x.ListMeta
		yym4375 := z.DecBinary()
		_ = yym4375
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4374) {
		} else {
			z.DecFallback(yyv4374, false)
		}
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4376 := &x.Items
		yym4377 := z.DecBinary()
		_ = yym4377
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4376), d)
		}
	}
	for {
		yyj4371++
		if yyhl4371 {
			yyb4371 = yyj4371 > l
		} else {
			yyb4371 = r.CheckBreak()
		}
		if yyb4371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4378 := z.EncBinary()
		_ = yym4378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4379 := !z.EncBinary()
			yy2arr4379 := z.EncBasicHandle().StructToArray
			var yyq4379 [2]bool
			_, _, _ = yysep4379, yyq4379, yy2arr4379
			const yyr4379 bool = false
			yyq4379[0] = len(x.Items) != 0
			yyq4379[1] = x.DefaultMode != nil
			var yynn4379 int
			if yyr4379 || yy2arr4379 {
				r.EncodeArrayStart(2)
			} else {
				yynn4379 = 0
				for _, b := range yyq4379 {
					if b {
						yynn4379++
					}
				}
				r.EncodeMapStart(yynn4379)
				yynn4379 = 0
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4381 := z.EncBinary()
						_ = yym4381
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4379[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4382 := z.EncBinary()
						_ = yym4382
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4379[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4384 := *x.DefaultMode
						yym4385 := z.EncBinary()
						_ = yym4385
						if false {
						} else {
							r.EncodeInt(int64(yy4384))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4379[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4386 := *x.DefaultMode
						yym4387 := z.EncBinary()
						_ = yym4387
						if false {
						} else {
							r.EncodeInt(int64(yy4386))
						}
					}
				}
			}
			if yyr4379 || yy2arr4379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4388 := z.DecBinary()
	_ = yym4388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4389 := r.ContainerType()
		if yyct4389 == codecSelferValueTypeMap1234 {
			yyl4389 := r.ReadMapStart()
			if yyl4389 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4389, d)
			}
		} else if yyct4389 == codecSelferValueTypeArray1234 {
			yyl4389 := r.ReadArrayStart()
			if yyl4389 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4390Slc
	var yyhl4390 bool = l >= 0
	for yyj4390 := 0; ; yyj4390++ {
		if yyhl4390 {
			if yyj4390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4390Slc = r.DecodeBytes(yys4390Slc, true, true)
		yys4390 := string(yys4390Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4390 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4391 := &x.Items
				yym4392 := z.DecBinary()
				_ = yym4392
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4391), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4394 := z.DecBinary()
				_ = yym4394
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4390)
		} // end switch yys4390
	} // end for yyj4390
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4395 int
	var yyb4395 bool
	var yyhl4395 bool = l >= 0
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4396 := &x.Items
		yym4397 := z.DecBinary()
		_ = yym4397
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4396), d)
		}
	}
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4399 := z.DecBinary()
		_ = yym4399
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4395++
		if yyhl4395 {
			yyb4395 = yyj4395 > l
		} else {
			yyb4395 = r.CheckBreak()
		}
		if yyb4395 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4395-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4400 := z.EncBinary()
		_ = yym4400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4401 := !z.EncBinary()
			yy2arr4401 := z.EncBasicHandle().StructToArray
			var yyq4401 [4]bool
			_, _, _ = yysep4401, yyq4401, yy2arr4401
			const yyr4401 bool = false
			yyq4401[1] = x.FieldRef != nil
			yyq4401[2] = x.ResourceFieldRef != nil
			yyq4401[3] = x.Mode != nil
			var yynn4401 int
			if yyr4401 || yy2arr4401 {
				r.EncodeArrayStart(4)
			} else {
				yynn4401 = 1
				for _, b := range yyq4401 {
					if b {
						yynn4401++
					}
				}
				r.EncodeMapStart(yynn4401)
				yynn4401 = 0
			}
			if yyr4401 || yy2arr4401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4403 := z.EncBinary()
				_ = yym4403
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4404 := z.EncBinary()
				_ = yym4404
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4401 || yy2arr4401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4401[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4401 || yy2arr4401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4401[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4401 || yy2arr4401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4401[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4408 := *x.Mode
						yym4409 := z.EncBinary()
						_ = yym4409
						if false {
						} else {
							r.EncodeInt(int64(yy4408))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4401[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4410 := *x.Mode
						yym4411 := z.EncBinary()
						_ = yym4411
						if false {
						} else {
							r.EncodeInt(int64(yy4410))
						}
					}
				}
			}
			if yyr4401 || yy2arr4401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4412 := z.DecBinary()
	_ = yym4412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4413 := r.ContainerType()
		if yyct4413 == codecSelferValueTypeMap1234 {
			yyl4413 := r.ReadMapStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4413, d)
			}
		} else if yyct4413 == codecSelferValueTypeArray1234 {
			yyl4413 := r.ReadArrayStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4414Slc
	var yyhl4414 bool = l >= 0
	for yyj4414 := 0; ; yyj4414++ {
		if yyhl4414 {
			if yyj4414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4414Slc = r.DecodeBytes(yys4414Slc, true, true)
		yys4414 := string(yys4414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4414 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4419 := z.DecBinary()
				_ = yym4419
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4414)
		} // end switch yys4414
	} // end for yyj4414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4420 int
	var yyb4420 bool
	var yyhl4420 bool = l >= 0
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4420++
	if yyhl4420 {
		yyb4420 = yyj4420 > l
	} else {
		yyb4420 = r.CheckBreak()
	}
	if yyb4420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4425 := z.DecBinary()
		_ = yym4425
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4420++
		if yyhl4420 {
			yyb4420 = yyj4420 > l
		} else {
			yyb4420 = r.CheckBreak()
		}
		if yyb4420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4426 := z.EncBinary()
		_ = yym4426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4427 := !z.EncBinary()
			yy2arr4427 := z.EncBasicHandle().StructToArray
			var yyq4427 [6]bool
			_, _, _ = yysep4427, yyq4427, yy2arr4427
			const yyr4427 bool = false
			yyq4427[0] = x.Capabilities != nil
			yyq4427[1] = x.Privileged != nil
			yyq4427[2] = x.SELinuxOptions != nil
			yyq4427[3] = x.RunAsUser != nil
			yyq4427[4] = x.RunAsNonRoot != nil
			yyq4427[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4427 int
			if yyr4427 || yy2arr4427 {
				r.EncodeArrayStart(6)
			} else {
				yynn4427 = 0
				for _, b := range yyq4427 {
					if b {
						yynn4427++
					}
				}
				r.EncodeMapStart(yynn4427)
				yynn4427 = 0
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4430 := *x.Privileged
						yym4431 := z.EncBinary()
						_ = yym4431
						if false {
						} else {
							r.EncodeBool(bool(yy4430))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4432 := *x.Privileged
						yym4433 := z.EncBinary()
						_ = yym4433
						if false {
						} else {
							r.EncodeBool(bool(yy4432))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4436 := *x.RunAsUser
						yym4437 := z.EncBinary()
						_ = yym4437
						if false {
						} else {
							r.EncodeInt(int64(yy4436))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4438 := *x.RunAsUser
						yym4439 := z.EncBinary()
						_ = yym4439
						if false {
						} else {
							r.EncodeInt(int64(yy4438))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4441 := *x.RunAsNonRoot
						yym4442 := z.EncBinary()
						_ = yym4442
						if false {
						} else {
							r.EncodeBool(bool(yy4441))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4443 := *x.RunAsNonRoot
						yym4444 := z.EncBinary()
						_ = yym4444
						if false {
						} else {
							r.EncodeBool(bool(yy4443))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4427[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4446 := *x.ReadOnlyRootFilesystem
						yym4447 := z.EncBinary()
						_ = yym4447
						if false {
						} else {
							r.EncodeBool(bool(yy4446))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4427[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4448 := *x.ReadOnlyRootFilesystem
						yym4449 := z.EncBinary()
						_ = yym4449
						if false {
						} else {
							r.EncodeBool(bool(yy4448))
						}
					}
				}
			}
			if yyr4427 || yy2arr4427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4450 := z.DecBinary()
	_ = yym4450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4451 := r.ContainerType()
		if yyct4451 == codecSelferValueTypeMap1234 {
			yyl4451 := r.ReadMapStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4451, d)
			}
		} else if yyct4451 == codecSelferValueTypeArray1234 {
			yyl4451 := r.ReadArrayStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4452Slc
	var yyhl4452 bool = l >= 0
	for yyj4452 := 0; ; yyj4452++ {
		if yyhl4452 {
			if yyj4452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4452Slc = r.DecodeBytes(yys4452Slc, true, true)
		yys4452 := string(yys4452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4452 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4455 := z.DecBinary()
				_ = yym4455
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4458 := z.DecBinary()
				_ = yym4458
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4460 := z.DecBinary()
				_ = yym4460
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4462 := z.DecBinary()
				_ = yym4462
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4452)
		} // end switch yys4452
	} // end for yyj4452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4463 int
	var yyb4463 bool
	var yyhl4463 bool = l >= 0
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4466 := z.DecBinary()
		_ = yym4466
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4469 := z.DecBinary()
		_ = yym4469
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4471 := z.DecBinary()
		_ = yym4471
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4463++
	if yyhl4463 {
		yyb4463 = yyj4463 > l
	} else {
		yyb4463 = r.CheckBreak()
	}
	if yyb4463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4473 := z.DecBinary()
		_ = yym4473
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4463++
		if yyhl4463 {
			yyb4463 = yyj4463 > l
		} else {
			yyb4463 = r.CheckBreak()
		}
		if yyb4463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4474 := z.EncBinary()
		_ = yym4474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4475 := !z.EncBinary()
			yy2arr4475 := z.EncBasicHandle().StructToArray
			var yyq4475 [4]bool
			_, _, _ = yysep4475, yyq4475, yy2arr4475
			const yyr4475 bool = false
			yyq4475[0] = x.User != ""
			yyq4475[1] = x.Role != ""
			yyq4475[2] = x.Type != ""
			yyq4475[3] = x.Level != ""
			var yynn4475 int
			if yyr4475 || yy2arr4475 {
				r.EncodeArrayStart(4)
			} else {
				yynn4475 = 0
				for _, b := range yyq4475 {
					if b {
						yynn4475++
					}
				}
				r.EncodeMapStart(yynn4475)
				yynn4475 = 0
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[0] {
					yym4477 := z.EncBinary()
					_ = yym4477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[1] {
					yym4480 := z.EncBinary()
					_ = yym4480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4481 := z.EncBinary()
					_ = yym4481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[2] {
					yym4483 := z.EncBinary()
					_ = yym4483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4484 := z.EncBinary()
					_ = yym4484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4475[3] {
					yym4486 := z.EncBinary()
					_ = yym4486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4475[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4487 := z.EncBinary()
					_ = yym4487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4475 || yy2arr4475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4488 := z.DecBinary()
	_ = yym4488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4489 := r.ContainerType()
		if yyct4489 == codecSelferValueTypeMap1234 {
			yyl4489 := r.ReadMapStart()
			if yyl4489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4489, d)
			}
		} else if yyct4489 == codecSelferValueTypeArray1234 {
			yyl4489 := r.ReadArrayStart()
			if yyl4489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4490Slc
	var yyhl4490 bool = l >= 0
	for yyj4490 := 0; ; yyj4490++ {
		if yyhl4490 {
			if yyj4490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4490Slc = r.DecodeBytes(yys4490Slc, true, true)
		yys4490 := string(yys4490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4490 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4490)
		} // end switch yys4490
	} // end for yyj4490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4495 int
	var yyb4495 bool
	var yyhl4495 bool = l >= 0
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4495++
	if yyhl4495 {
		yyb4495 = yyj4495 > l
	} else {
		yyb4495 = r.CheckBreak()
	}
	if yyb4495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4495++
		if yyhl4495 {
			yyb4495 = yyj4495 > l
		} else {
			yyb4495 = r.CheckBreak()
		}
		if yyb4495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4500 := z.EncBinary()
		_ = yym4500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4501 := !z.EncBinary()
			yy2arr4501 := z.EncBasicHandle().StructToArray
			var yyq4501 [5]bool
			_, _, _ = yysep4501, yyq4501, yy2arr4501
			const yyr4501 bool = false
			yyq4501[0] = x.Kind != ""
			yyq4501[1] = x.APIVersion != ""
			yyq4501[2] = true
			var yynn4501 int
			if yyr4501 || yy2arr4501 {
				r.EncodeArrayStart(5)
			} else {
				yynn4501 = 2
				for _, b := range yyq4501 {
					if b {
						yynn4501++
					}
				}
				r.EncodeMapStart(yynn4501)
				yynn4501 = 0
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[0] {
					yym4503 := z.EncBinary()
					_ = yym4503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4504 := z.EncBinary()
					_ = yym4504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[1] {
					yym4506 := z.EncBinary()
					_ = yym4506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4501[2] {
					yy4509 := &x.ObjectMeta
					yy4509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4510 := &x.ObjectMeta
					yy4510.CodecEncodeSelf(e)
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4512 := z.EncBinary()
				_ = yym4512
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4513 := z.EncBinary()
				_ = yym4513
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4515 := z.EncBinary()
					_ = yym4515
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4516 := z.EncBinary()
					_ = yym4516
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4501 || yy2arr4501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4517 := z.DecBinary()
	_ = yym4517
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4518 := r.ContainerType()
		if yyct4518 == codecSelferValueTypeMap1234 {
			yyl4518 := r.ReadMapStart()
			if yyl4518 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4518, d)
			}
		} else if yyct4518 == codecSelferValueTypeArray1234 {
			yyl4518 := r.ReadArrayStart()
			if yyl4518 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4518, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4519Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4519Slc
	var yyhl4519 bool = l >= 0
	for yyj4519 := 0; ; yyj4519++ {
		if yyhl4519 {
			if yyj4519 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4519Slc = r.DecodeBytes(yys4519Slc, true, true)
		yys4519 := string(yys4519Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4519 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4522 := &x.ObjectMeta
				yyv4522.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4524 := &x.Data
				yym4525 := z.DecBinary()
				_ = yym4525
				if false {
				} else {
					*yyv4524 = r.DecodeBytes(*(*[]byte)(yyv4524), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4519)
		} // end switch yys4519
	} // end for yyj4519
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4526 int
	var yyb4526 bool
	var yyhl4526 bool = l >= 0
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4529 := &x.ObjectMeta
		yyv4529.CodecDecodeSelf(d)
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4526++
	if yyhl4526 {
		yyb4526 = yyj4526 > l
	} else {
		yyb4526 = r.CheckBreak()
	}
	if yyb4526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4531 := &x.Data
		yym4532 := z.DecBinary()
		_ = yym4532
		if false {
		} else {
			*yyv4531 = r.DecodeBytes(*(*[]byte)(yyv4531), false, false)
		}
	}
	for {
		yyj4526++
		if yyhl4526 {
			yyb4526 = yyj4526 > l
		} else {
			yyb4526 = r.CheckBreak()
		}
		if yyb4526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4534 := &yyv4533
		yy4534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4535 := *v
	yyh4535, yyl4535 := z.DecSliceHelperStart()
	var yyc4535 bool
	if yyl4535 == 0 {
		if yyv4535 == nil {
			yyv4535 = []OwnerReference{}
			yyc4535 = true
		} else if len(yyv4535) != 0 {
			yyv4535 = yyv4535[:0]
			yyc4535 = true
		}
	} else if yyl4535 > 0 {
		var yyrr4535, yyrl4535 int
		var yyrt4535 bool
		if yyl4535 > cap(yyv4535) {

			yyrg4535 := len(yyv4535) > 0
			yyv24535 := yyv4535
			yyrl4535, yyrt4535 = z.DecInferLen(yyl4535, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4535 {
				if yyrl4535 <= cap(yyv4535) {
					yyv4535 = yyv4535[:yyrl4535]
				} else {
					yyv4535 = make([]OwnerReference, yyrl4535)
				}
			} else {
				yyv4535 = make([]OwnerReference, yyrl4535)
			}
			yyc4535 = true
			yyrr4535 = len(yyv4535)
			if yyrg4535 {
				copy(yyv4535, yyv24535)
			}
		} else if yyl4535 != len(yyv4535) {
			yyv4535 = yyv4535[:yyl4535]
			yyc4535 = true
		}
		yyj4535 := 0
		for ; yyj4535 < yyrr4535; yyj4535++ {
			yyh4535.ElemContainerState(yyj4535)
			if r.TryDecodeAsNil() {
				yyv4535[yyj4535] = OwnerReference{}
			} else {
				yyv4536 := &yyv4535[yyj4535]
				yyv4536.CodecDecodeSelf(d)
			}

		}
		if yyrt4535 {
			for ; yyj4535 < yyl4535; yyj4535++ {
				yyv4535 = append(yyv4535, OwnerReference{})
				yyh4535.ElemContainerState(yyj4535)
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = OwnerReference{}
				} else {
					yyv4537 := &yyv4535[yyj4535]
					yyv4537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4535 := 0
		for ; !r.CheckBreak(); yyj4535++ {

			if yyj4535 >= len(yyv4535) {
				yyv4535 = append(yyv4535, OwnerReference{}) // var yyz4535 OwnerReference
				yyc4535 = true
			}
			yyh4535.ElemContainerState(yyj4535)
			if yyj4535 < len(yyv4535) {
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = OwnerReference{}
				} else {
					yyv4538 := &yyv4535[yyj4535]
					yyv4538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4535 < len(yyv4535) {
			yyv4535 = yyv4535[:yyj4535]
			yyc4535 = true
		} else if yyj4535 == 0 && yyv4535 == nil {
			yyv4535 = []OwnerReference{}
			yyc4535 = true
		}
	}
	yyh4535.End()
	if yyc4535 {
		*v = yyv4535
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4540 := *v
	yyh4540, yyl4540 := z.DecSliceHelperStart()
	var yyc4540 bool
	if yyl4540 == 0 {
		if yyv4540 == nil {
			yyv4540 = []PersistentVolumeAccessMode{}
			yyc4540 = true
		} else if len(yyv4540) != 0 {
			yyv4540 = yyv4540[:0]
			yyc4540 = true
		}
	} else if yyl4540 > 0 {
		var yyrr4540, yyrl4540 int
		var yyrt4540 bool
		if yyl4540 > cap(yyv4540) {

			yyrl4540, yyrt4540 = z.DecInferLen(yyl4540, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4540 {
				if yyrl4540 <= cap(yyv4540) {
					yyv4540 = yyv4540[:yyrl4540]
				} else {
					yyv4540 = make([]PersistentVolumeAccessMode, yyrl4540)
				}
			} else {
				yyv4540 = make([]PersistentVolumeAccessMode, yyrl4540)
			}
			yyc4540 = true
			yyrr4540 = len(yyv4540)
		} else if yyl4540 != len(yyv4540) {
			yyv4540 = yyv4540[:yyl4540]
			yyc4540 = true
		}
		yyj4540 := 0
		for ; yyj4540 < yyrr4540; yyj4540++ {
			yyh4540.ElemContainerState(yyj4540)
			if r.TryDecodeAsNil() {
				yyv4540[yyj4540] = ""
			} else {
				yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4540 {
			for ; yyj4540 < yyl4540; yyj4540++ {
				yyv4540 = append(yyv4540, "")
				yyh4540.ElemContainerState(yyj4540)
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ""
				} else {
					yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4540 := 0
		for ; !r.CheckBreak(); yyj4540++ {

			if yyj4540 >= len(yyv4540) {
				yyv4540 = append(yyv4540, "") // var yyz4540 PersistentVolumeAccessMode
				yyc4540 = true
			}
			yyh4540.ElemContainerState(yyj4540)
			if yyj4540 < len(yyv4540) {
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ""
				} else {
					yyv4540[yyj4540] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4540 < len(yyv4540) {
			yyv4540 = yyv4540[:yyj4540]
			yyc4540 = true
		} else if yyj4540 == 0 && yyv4540 == nil {
			yyv4540 = []PersistentVolumeAccessMode{}
			yyc4540 = true
		}
	}
	yyh4540.End()
	if yyc4540 {
		*v = yyv4540
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4545 := &yyv4544
		yy4545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4546 := *v
	yyh4546, yyl4546 := z.DecSliceHelperStart()
	var yyc4546 bool
	if yyl4546 == 0 {
		if yyv4546 == nil {
			yyv4546 = []PersistentVolume{}
			yyc4546 = true
		} else if len(yyv4546) != 0 {
			yyv4546 = yyv4546[:0]
			yyc4546 = true
		}
	} else if yyl4546 > 0 {
		var yyrr4546, yyrl4546 int
		var yyrt4546 bool
		if yyl4546 > cap(yyv4546) {

			yyrg4546 := len(yyv4546) > 0
			yyv24546 := yyv4546
			yyrl4546, yyrt4546 = z.DecInferLen(yyl4546, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4546 {
				if yyrl4546 <= cap(yyv4546) {
					yyv4546 = yyv4546[:yyrl4546]
				} else {
					yyv4546 = make([]PersistentVolume, yyrl4546)
				}
			} else {
				yyv4546 = make([]PersistentVolume, yyrl4546)
			}
			yyc4546 = true
			yyrr4546 = len(yyv4546)
			if yyrg4546 {
				copy(yyv4546, yyv24546)
			}
		} else if yyl4546 != len(yyv4546) {
			yyv4546 = yyv4546[:yyl4546]
			yyc4546 = true
		}
		yyj4546 := 0
		for ; yyj4546 < yyrr4546; yyj4546++ {
			yyh4546.ElemContainerState(yyj4546)
			if r.TryDecodeAsNil() {
				yyv4546[yyj4546] = PersistentVolume{}
			} else {
				yyv4547 := &yyv4546[yyj4546]
				yyv4547.CodecDecodeSelf(d)
			}

		}
		if yyrt4546 {
			for ; yyj4546 < yyl4546; yyj4546++ {
				yyv4546 = append(yyv4546, PersistentVolume{})
				yyh4546.ElemContainerState(yyj4546)
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = PersistentVolume{}
				} else {
					yyv4548 := &yyv4546[yyj4546]
					yyv4548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4546 := 0
		for ; !r.CheckBreak(); yyj4546++ {

			if yyj4546 >= len(yyv4546) {
				yyv4546 = append(yyv4546, PersistentVolume{}) // var yyz4546 PersistentVolume
				yyc4546 = true
			}
			yyh4546.ElemContainerState(yyj4546)
			if yyj4546 < len(yyv4546) {
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = PersistentVolume{}
				} else {
					yyv4549 := &yyv4546[yyj4546]
					yyv4549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4546 < len(yyv4546) {
			yyv4546 = yyv4546[:yyj4546]
			yyc4546 = true
		} else if yyj4546 == 0 && yyv4546 == nil {
			yyv4546 = []PersistentVolume{}
			yyc4546 = true
		}
	}
	yyh4546.End()
	if yyc4546 {
		*v = yyv4546
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4551 := &yyv4550
		yy4551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4552 := *v
	yyh4552, yyl4552 := z.DecSliceHelperStart()
	var yyc4552 bool
	if yyl4552 == 0 {
		if yyv4552 == nil {
			yyv4552 = []PersistentVolumeClaim{}
			yyc4552 = true
		} else if len(yyv4552) != 0 {
			yyv4552 = yyv4552[:0]
			yyc4552 = true
		}
	} else if yyl4552 > 0 {
		var yyrr4552, yyrl4552 int
		var yyrt4552 bool
		if yyl4552 > cap(yyv4552) {

			yyrg4552 := len(yyv4552) > 0
			yyv24552 := yyv4552
			yyrl4552, yyrt4552 = z.DecInferLen(yyl4552, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4552 {
				if yyrl4552 <= cap(yyv4552) {
					yyv4552 = yyv4552[:yyrl4552]
				} else {
					yyv4552 = make([]PersistentVolumeClaim, yyrl4552)
				}
			} else {
				yyv4552 = make([]PersistentVolumeClaim, yyrl4552)
			}
			yyc4552 = true
			yyrr4552 = len(yyv4552)
			if yyrg4552 {
				copy(yyv4552, yyv24552)
			}
		} else if yyl4552 != len(yyv4552) {
			yyv4552 = yyv4552[:yyl4552]
			yyc4552 = true
		}
		yyj4552 := 0
		for ; yyj4552 < yyrr4552; yyj4552++ {
			yyh4552.ElemContainerState(yyj4552)
			if r.TryDecodeAsNil() {
				yyv4552[yyj4552] = PersistentVolumeClaim{}
			} else {
				yyv4553 := &yyv4552[yyj4552]
				yyv4553.CodecDecodeSelf(d)
			}

		}
		if yyrt4552 {
			for ; yyj4552 < yyl4552; yyj4552++ {
				yyv4552 = append(yyv4552, PersistentVolumeClaim{})
				yyh4552.ElemContainerState(yyj4552)
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = PersistentVolumeClaim{}
				} else {
					yyv4554 := &yyv4552[yyj4552]
					yyv4554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4552 := 0
		for ; !r.CheckBreak(); yyj4552++ {

			if yyj4552 >= len(yyv4552) {
				yyv4552 = append(yyv4552, PersistentVolumeClaim{}) // var yyz4552 PersistentVolumeClaim
				yyc4552 = true
			}
			yyh4552.ElemContainerState(yyj4552)
			if yyj4552 < len(yyv4552) {
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = PersistentVolumeClaim{}
				} else {
					yyv4555 := &yyv4552[yyj4552]
					yyv4555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4552 < len(yyv4552) {
			yyv4552 = yyv4552[:yyj4552]
			yyc4552 = true
		} else if yyj4552 == 0 && yyv4552 == nil {
			yyv4552 = []PersistentVolumeClaim{}
			yyc4552 = true
		}
	}
	yyh4552.End()
	if yyc4552 {
		*v = yyv4552
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []KeyToPath{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]KeyToPath, yyrl4558)
				}
			} else {
				yyv4558 = make([]KeyToPath, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = KeyToPath{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, KeyToPath{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = KeyToPath{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, KeyToPath{}) // var yyz4558 KeyToPath
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = KeyToPath{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []KeyToPath{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4563 := &yyv4562
		yy4563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4564 := *v
	yyh4564, yyl4564 := z.DecSliceHelperStart()
	var yyc4564 bool
	if yyl4564 == 0 {
		if yyv4564 == nil {
			yyv4564 = []HTTPHeader{}
			yyc4564 = true
		} else if len(yyv4564) != 0 {
			yyv4564 = yyv4564[:0]
			yyc4564 = true
		}
	} else if yyl4564 > 0 {
		var yyrr4564, yyrl4564 int
		var yyrt4564 bool
		if yyl4564 > cap(yyv4564) {

			yyrg4564 := len(yyv4564) > 0
			yyv24564 := yyv4564
			yyrl4564, yyrt4564 = z.DecInferLen(yyl4564, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4564 {
				if yyrl4564 <= cap(yyv4564) {
					yyv4564 = yyv4564[:yyrl4564]
				} else {
					yyv4564 = make([]HTTPHeader, yyrl4564)
				}
			} else {
				yyv4564 = make([]HTTPHeader, yyrl4564)
			}
			yyc4564 = true
			yyrr4564 = len(yyv4564)
			if yyrg4564 {
				copy(yyv4564, yyv24564)
			}
		} else if yyl4564 != len(yyv4564) {
			yyv4564 = yyv4564[:yyl4564]
			yyc4564 = true
		}
		yyj4564 := 0
		for ; yyj4564 < yyrr4564; yyj4564++ {
			yyh4564.ElemContainerState(yyj4564)
			if r.TryDecodeAsNil() {
				yyv4564[yyj4564] = HTTPHeader{}
			} else {
				yyv4565 := &yyv4564[yyj4564]
				yyv4565.CodecDecodeSelf(d)
			}

		}
		if yyrt4564 {
			for ; yyj4564 < yyl4564; yyj4564++ {
				yyv4564 = append(yyv4564, HTTPHeader{})
				yyh4564.ElemContainerState(yyj4564)
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = HTTPHeader{}
				} else {
					yyv4566 := &yyv4564[yyj4564]
					yyv4566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4564 := 0
		for ; !r.CheckBreak(); yyj4564++ {

			if yyj4564 >= len(yyv4564) {
				yyv4564 = append(yyv4564, HTTPHeader{}) // var yyz4564 HTTPHeader
				yyc4564 = true
			}
			yyh4564.ElemContainerState(yyj4564)
			if yyj4564 < len(yyv4564) {
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = HTTPHeader{}
				} else {
					yyv4567 := &yyv4564[yyj4564]
					yyv4567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4564 < len(yyv4564) {
			yyv4564 = yyv4564[:yyj4564]
			yyc4564 = true
		} else if yyj4564 == 0 && yyv4564 == nil {
			yyv4564 = []HTTPHeader{}
			yyc4564 = true
		}
	}
	yyh4564.End()
	if yyc4564 {
		*v = yyv4564
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4569 := *v
	yyh4569, yyl4569 := z.DecSliceHelperStart()
	var yyc4569 bool
	if yyl4569 == 0 {
		if yyv4569 == nil {
			yyv4569 = []Capability{}
			yyc4569 = true
		} else if len(yyv4569) != 0 {
			yyv4569 = yyv4569[:0]
			yyc4569 = true
		}
	} else if yyl4569 > 0 {
		var yyrr4569, yyrl4569 int
		var yyrt4569 bool
		if yyl4569 > cap(yyv4569) {

			yyrl4569, yyrt4569 = z.DecInferLen(yyl4569, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4569 {
				if yyrl4569 <= cap(yyv4569) {
					yyv4569 = yyv4569[:yyrl4569]
				} else {
					yyv4569 = make([]Capability, yyrl4569)
				}
			} else {
				yyv4569 = make([]Capability, yyrl4569)
			}
			yyc4569 = true
			yyrr4569 = len(yyv4569)
		} else if yyl4569 != len(yyv4569) {
			yyv4569 = yyv4569[:yyl4569]
			yyc4569 = true
		}
		yyj4569 := 0
		for ; yyj4569 < yyrr4569; yyj4569++ {
			yyh4569.ElemContainerState(yyj4569)
			if r.TryDecodeAsNil() {
				yyv4569[yyj4569] = ""
			} else {
				yyv4569[yyj4569] = Capability(r.DecodeString())
			}

		}
		if yyrt4569 {
			for ; yyj4569 < yyl4569; yyj4569++ {
				yyv4569 = append(yyv4569, "")
				yyh4569.ElemContainerState(yyj4569)
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ""
				} else {
					yyv4569[yyj4569] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4569 := 0
		for ; !r.CheckBreak(); yyj4569++ {

			if yyj4569 >= len(yyv4569) {
				yyv4569 = append(yyv4569, "") // var yyz4569 Capability
				yyc4569 = true
			}
			yyh4569.ElemContainerState(yyj4569)
			if yyj4569 < len(yyv4569) {
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ""
				} else {
					yyv4569[yyj4569] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4569 < len(yyv4569) {
			yyv4569 = yyv4569[:yyj4569]
			yyc4569 = true
		} else if yyj4569 == 0 && yyv4569 == nil {
			yyv4569 = []Capability{}
			yyc4569 = true
		}
	}
	yyh4569.End()
	if yyc4569 {
		*v = yyv4569
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4574 := &yyv4573
		yy4574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4575 := *v
	yyh4575, yyl4575 := z.DecSliceHelperStart()
	var yyc4575 bool
	if yyl4575 == 0 {
		if yyv4575 == nil {
			yyv4575 = []ContainerPort{}
			yyc4575 = true
		} else if len(yyv4575) != 0 {
			yyv4575 = yyv4575[:0]
			yyc4575 = true
		}
	} else if yyl4575 > 0 {
		var yyrr4575, yyrl4575 int
		var yyrt4575 bool
		if yyl4575 > cap(yyv4575) {

			yyrg4575 := len(yyv4575) > 0
			yyv24575 := yyv4575
			yyrl4575, yyrt4575 = z.DecInferLen(yyl4575, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4575 {
				if yyrl4575 <= cap(yyv4575) {
					yyv4575 = yyv4575[:yyrl4575]
				} else {
					yyv4575 = make([]ContainerPort, yyrl4575)
				}
			} else {
				yyv4575 = make([]ContainerPort, yyrl4575)
			}
			yyc4575 = true
			yyrr4575 = len(yyv4575)
			if yyrg4575 {
				copy(yyv4575, yyv24575)
			}
		} else if yyl4575 != len(yyv4575) {
			yyv4575 = yyv4575[:yyl4575]
			yyc4575 = true
		}
		yyj4575 := 0
		for ; yyj4575 < yyrr4575; yyj4575++ {
			yyh4575.ElemContainerState(yyj4575)
			if r.TryDecodeAsNil() {
				yyv4575[yyj4575] = ContainerPort{}
			} else {
				yyv4576 := &yyv4575[yyj4575]
				yyv4576.CodecDecodeSelf(d)
			}

		}
		if yyrt4575 {
			for ; yyj4575 < yyl4575; yyj4575++ {
				yyv4575 = append(yyv4575, ContainerPort{})
				yyh4575.ElemContainerState(yyj4575)
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = ContainerPort{}
				} else {
					yyv4577 := &yyv4575[yyj4575]
					yyv4577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4575 := 0
		for ; !r.CheckBreak(); yyj4575++ {

			if yyj4575 >= len(yyv4575) {
				yyv4575 = append(yyv4575, ContainerPort{}) // var yyz4575 ContainerPort
				yyc4575 = true
			}
			yyh4575.ElemContainerState(yyj4575)
			if yyj4575 < len(yyv4575) {
				if r.TryDecodeAsNil() {
					yyv4575[yyj4575] = ContainerPort{}
				} else {
					yyv4578 := &yyv4575[yyj4575]
					yyv4578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4575 < len(yyv4575) {
			yyv4575 = yyv4575[:yyj4575]
			yyc4575 = true
		} else if yyj4575 == 0 && yyv4575 == nil {
			yyv4575 = []ContainerPort{}
			yyc4575 = true
		}
	}
	yyh4575.End()
	if yyc4575 {
		*v = yyv4575
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4580 := &yyv4579
		yy4580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4581 := *v
	yyh4581, yyl4581 := z.DecSliceHelperStart()
	var yyc4581 bool
	if yyl4581 == 0 {
		if yyv4581 == nil {
			yyv4581 = []EnvVar{}
			yyc4581 = true
		} else if len(yyv4581) != 0 {
			yyv4581 = yyv4581[:0]
			yyc4581 = true
		}
	} else if yyl4581 > 0 {
		var yyrr4581, yyrl4581 int
		var yyrt4581 bool
		if yyl4581 > cap(yyv4581) {

			yyrg4581 := len(yyv4581) > 0
			yyv24581 := yyv4581
			yyrl4581, yyrt4581 = z.DecInferLen(yyl4581, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4581 {
				if yyrl4581 <= cap(yyv4581) {
					yyv4581 = yyv4581[:yyrl4581]
				} else {
					yyv4581 = make([]EnvVar, yyrl4581)
				}
			} else {
				yyv4581 = make([]EnvVar, yyrl4581)
			}
			yyc4581 = true
			yyrr4581 = len(yyv4581)
			if yyrg4581 {
				copy(yyv4581, yyv24581)
			}
		} else if yyl4581 != len(yyv4581) {
			yyv4581 = yyv4581[:yyl4581]
			yyc4581 = true
		}
		yyj4581 := 0
		for ; yyj4581 < yyrr4581; yyj4581++ {
			yyh4581.ElemContainerState(yyj4581)
			if r.TryDecodeAsNil() {
				yyv4581[yyj4581] = EnvVar{}
			} else {
				yyv4582 := &yyv4581[yyj4581]
				yyv4582.CodecDecodeSelf(d)
			}

		}
		if yyrt4581 {
			for ; yyj4581 < yyl4581; yyj4581++ {
				yyv4581 = append(yyv4581, EnvVar{})
				yyh4581.ElemContainerState(yyj4581)
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = EnvVar{}
				} else {
					yyv4583 := &yyv4581[yyj4581]
					yyv4583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4581 := 0
		for ; !r.CheckBreak(); yyj4581++ {

			if yyj4581 >= len(yyv4581) {
				yyv4581 = append(yyv4581, EnvVar{}) // var yyz4581 EnvVar
				yyc4581 = true
			}
			yyh4581.ElemContainerState(yyj4581)
			if yyj4581 < len(yyv4581) {
				if r.TryDecodeAsNil() {
					yyv4581[yyj4581] = EnvVar{}
				} else {
					yyv4584 := &yyv4581[yyj4581]
					yyv4584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4581 < len(yyv4581) {
			yyv4581 = yyv4581[:yyj4581]
			yyc4581 = true
		} else if yyj4581 == 0 && yyv4581 == nil {
			yyv4581 = []EnvVar{}
			yyc4581 = true
		}
	}
	yyh4581.End()
	if yyc4581 {
		*v = yyv4581
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4585 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4586 := &yyv4585
		yy4586.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4587 := *v
	yyh4587, yyl4587 := z.DecSliceHelperStart()
	var yyc4587 bool
	if yyl4587 == 0 {
		if yyv4587 == nil {
			yyv4587 = []VolumeMount{}
			yyc4587 = true
		} else if len(yyv4587) != 0 {
			yyv4587 = yyv4587[:0]
			yyc4587 = true
		}
	} else if yyl4587 > 0 {
		var yyrr4587, yyrl4587 int
		var yyrt4587 bool
		if yyl4587 > cap(yyv4587) {

			yyrg4587 := len(yyv4587) > 0
			yyv24587 := yyv4587
			yyrl4587, yyrt4587 = z.DecInferLen(yyl4587, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4587 {
				if yyrl4587 <= cap(yyv4587) {
					yyv4587 = yyv4587[:yyrl4587]
				} else {
					yyv4587 = make([]VolumeMount, yyrl4587)
				}
			} else {
				yyv4587 = make([]VolumeMount, yyrl4587)
			}
			yyc4587 = true
			yyrr4587 = len(yyv4587)
			if yyrg4587 {
				copy(yyv4587, yyv24587)
			}
		} else if yyl4587 != len(yyv4587) {
			yyv4587 = yyv4587[:yyl4587]
			yyc4587 = true
		}
		yyj4587 := 0
		for ; yyj4587 < yyrr4587; yyj4587++ {
			yyh4587.ElemContainerState(yyj4587)
			if r.TryDecodeAsNil() {
				yyv4587[yyj4587] = VolumeMount{}
			} else {
				yyv4588 := &yyv4587[yyj4587]
				yyv4588.CodecDecodeSelf(d)
			}

		}
		if yyrt4587 {
			for ; yyj4587 < yyl4587; yyj4587++ {
				yyv4587 = append(yyv4587, VolumeMount{})
				yyh4587.ElemContainerState(yyj4587)
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = VolumeMount{}
				} else {
					yyv4589 := &yyv4587[yyj4587]
					yyv4589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4587 := 0
		for ; !r.CheckBreak(); yyj4587++ {

			if yyj4587 >= len(yyv4587) {
				yyv4587 = append(yyv4587, VolumeMount{}) // var yyz4587 VolumeMount
				yyc4587 = true
			}
			yyh4587.ElemContainerState(yyj4587)
			if yyj4587 < len(yyv4587) {
				if r.TryDecodeAsNil() {
					yyv4587[yyj4587] = VolumeMount{}
				} else {
					yyv4590 := &yyv4587[yyj4587]
					yyv4590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4587 < len(yyv4587) {
			yyv4587 = yyv4587[:yyj4587]
			yyc4587 = true
		} else if yyj4587 == 0 && yyv4587 == nil {
			yyv4587 = []VolumeMount{}
			yyc4587 = true
		}
	}
	yyh4587.End()
	if yyc4587 {
		*v = yyv4587
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4591 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4592 := &yyv4591
		yy4592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyh4593, yyl4593 := z.DecSliceHelperStart()
	var yyc4593 bool
	if yyl4593 == 0 {
		if yyv4593 == nil {
			yyv4593 = []NodeSelectorTerm{}
			yyc4593 = true
		} else if len(yyv4593) != 0 {
			yyv4593 = yyv4593[:0]
			yyc4593 = true
		}
	} else if yyl4593 > 0 {
		var yyrr4593, yyrl4593 int
		var yyrt4593 bool
		if yyl4593 > cap(yyv4593) {

			yyrg4593 := len(yyv4593) > 0
			yyv24593 := yyv4593
			yyrl4593, yyrt4593 = z.DecInferLen(yyl4593, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4593 {
				if yyrl4593 <= cap(yyv4593) {
					yyv4593 = yyv4593[:yyrl4593]
				} else {
					yyv4593 = make([]NodeSelectorTerm, yyrl4593)
				}
			} else {
				yyv4593 = make([]NodeSelectorTerm, yyrl4593)
			}
			yyc4593 = true
			yyrr4593 = len(yyv4593)
			if yyrg4593 {
				copy(yyv4593, yyv24593)
			}
		} else if yyl4593 != len(yyv4593) {
			yyv4593 = yyv4593[:yyl4593]
			yyc4593 = true
		}
		yyj4593 := 0
		for ; yyj4593 < yyrr4593; yyj4593++ {
			yyh4593.ElemContainerState(yyj4593)
			if r.TryDecodeAsNil() {
				yyv4593[yyj4593] = NodeSelectorTerm{}
			} else {
				yyv4594 := &yyv4593[yyj4593]
				yyv4594.CodecDecodeSelf(d)
			}

		}
		if yyrt4593 {
			for ; yyj4593 < yyl4593; yyj4593++ {
				yyv4593 = append(yyv4593, NodeSelectorTerm{})
				yyh4593.ElemContainerState(yyj4593)
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = NodeSelectorTerm{}
				} else {
					yyv4595 := &yyv4593[yyj4593]
					yyv4595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4593 := 0
		for ; !r.CheckBreak(); yyj4593++ {

			if yyj4593 >= len(yyv4593) {
				yyv4593 = append(yyv4593, NodeSelectorTerm{}) // var yyz4593 NodeSelectorTerm
				yyc4593 = true
			}
			yyh4593.ElemContainerState(yyj4593)
			if yyj4593 < len(yyv4593) {
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = NodeSelectorTerm{}
				} else {
					yyv4596 := &yyv4593[yyj4593]
					yyv4596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4593 < len(yyv4593) {
			yyv4593 = yyv4593[:yyj4593]
			yyc4593 = true
		} else if yyj4593 == 0 && yyv4593 == nil {
			yyv4593 = []NodeSelectorTerm{}
			yyc4593 = true
		}
	}
	yyh4593.End()
	if yyc4593 {
		*v = yyv4593
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []NodeSelectorRequirement{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]NodeSelectorRequirement, yyrl4599)
				}
			} else {
				yyv4599 = make([]NodeSelectorRequirement, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = NodeSelectorRequirement{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, NodeSelectorRequirement{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = NodeSelectorRequirement{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, NodeSelectorRequirement{}) // var yyz4599 NodeSelectorRequirement
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = NodeSelectorRequirement{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []NodeSelectorRequirement{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4604 := &yyv4603
		yy4604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []PodAffinityTerm{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]PodAffinityTerm, yyrl4605)
				}
			} else {
				yyv4605 = make([]PodAffinityTerm, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = PodAffinityTerm{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yyv4606.CodecDecodeSelf(d)
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, PodAffinityTerm{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PodAffinityTerm{}
				} else {
					yyv4607 := &yyv4605[yyj4605]
					yyv4607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, PodAffinityTerm{}) // var yyz4605 PodAffinityTerm
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PodAffinityTerm{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yyv4608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []PodAffinityTerm{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4610 := &yyv4609
		yy4610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4611 := *v
	yyh4611, yyl4611 := z.DecSliceHelperStart()
	var yyc4611 bool
	if yyl4611 == 0 {
		if yyv4611 == nil {
			yyv4611 = []WeightedPodAffinityTerm{}
			yyc4611 = true
		} else if len(yyv4611) != 0 {
			yyv4611 = yyv4611[:0]
			yyc4611 = true
		}
	} else if yyl4611 > 0 {
		var yyrr4611, yyrl4611 int
		var yyrt4611 bool
		if yyl4611 > cap(yyv4611) {

			yyrg4611 := len(yyv4611) > 0
			yyv24611 := yyv4611
			yyrl4611, yyrt4611 = z.DecInferLen(yyl4611, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4611 {
				if yyrl4611 <= cap(yyv4611) {
					yyv4611 = yyv4611[:yyrl4611]
				} else {
					yyv4611 = make([]WeightedPodAffinityTerm, yyrl4611)
				}
			} else {
				yyv4611 = make([]WeightedPodAffinityTerm, yyrl4611)
			}
			yyc4611 = true
			yyrr4611 = len(yyv4611)
			if yyrg4611 {
				copy(yyv4611, yyv24611)
			}
		} else if yyl4611 != len(yyv4611) {
			yyv4611 = yyv4611[:yyl4611]
			yyc4611 = true
		}
		yyj4611 := 0
		for ; yyj4611 < yyrr4611; yyj4611++ {
			yyh4611.ElemContainerState(yyj4611)
			if r.TryDecodeAsNil() {
				yyv4611[yyj4611] = WeightedPodAffinityTerm{}
			} else {
				yyv4612 := &yyv4611[yyj4611]
				yyv4612.CodecDecodeSelf(d)
			}

		}
		if yyrt4611 {
			for ; yyj4611 < yyl4611; yyj4611++ {
				yyv4611 = append(yyv4611, WeightedPodAffinityTerm{})
				yyh4611.ElemContainerState(yyj4611)
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = WeightedPodAffinityTerm{}
				} else {
					yyv4613 := &yyv4611[yyj4611]
					yyv4613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4611 := 0
		for ; !r.CheckBreak(); yyj4611++ {

			if yyj4611 >= len(yyv4611) {
				yyv4611 = append(yyv4611, WeightedPodAffinityTerm{}) // var yyz4611 WeightedPodAffinityTerm
				yyc4611 = true
			}
			yyh4611.ElemContainerState(yyj4611)
			if yyj4611 < len(yyv4611) {
				if r.TryDecodeAsNil() {
					yyv4611[yyj4611] = WeightedPodAffinityTerm{}
				} else {
					yyv4614 := &yyv4611[yyj4611]
					yyv4614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4611 < len(yyv4611) {
			yyv4611 = yyv4611[:yyj4611]
			yyc4611 = true
		} else if yyj4611 == 0 && yyv4611 == nil {
			yyv4611 = []WeightedPodAffinityTerm{}
			yyc4611 = true
		}
	}
	yyh4611.End()
	if yyc4611 {
		*v = yyv4611
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4616 := &yyv4615
		yy4616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4617 := *v
	yyh4617, yyl4617 := z.DecSliceHelperStart()
	var yyc4617 bool
	if yyl4617 == 0 {
		if yyv4617 == nil {
			yyv4617 = []PreferredSchedulingTerm{}
			yyc4617 = true
		} else if len(yyv4617) != 0 {
			yyv4617 = yyv4617[:0]
			yyc4617 = true
		}
	} else if yyl4617 > 0 {
		var yyrr4617, yyrl4617 int
		var yyrt4617 bool
		if yyl4617 > cap(yyv4617) {

			yyrg4617 := len(yyv4617) > 0
			yyv24617 := yyv4617
			yyrl4617, yyrt4617 = z.DecInferLen(yyl4617, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4617 {
				if yyrl4617 <= cap(yyv4617) {
					yyv4617 = yyv4617[:yyrl4617]
				} else {
					yyv4617 = make([]PreferredSchedulingTerm, yyrl4617)
				}
			} else {
				yyv4617 = make([]PreferredSchedulingTerm, yyrl4617)
			}
			yyc4617 = true
			yyrr4617 = len(yyv4617)
			if yyrg4617 {
				copy(yyv4617, yyv24617)
			}
		} else if yyl4617 != len(yyv4617) {
			yyv4617 = yyv4617[:yyl4617]
			yyc4617 = true
		}
		yyj4617 := 0
		for ; yyj4617 < yyrr4617; yyj4617++ {
			yyh4617.ElemContainerState(yyj4617)
			if r.TryDecodeAsNil() {
				yyv4617[yyj4617] = PreferredSchedulingTerm{}
			} else {
				yyv4618 := &yyv4617[yyj4617]
				yyv4618.CodecDecodeSelf(d)
			}

		}
		if yyrt4617 {
			for ; yyj4617 < yyl4617; yyj4617++ {
				yyv4617 = append(yyv4617, PreferredSchedulingTerm{})
				yyh4617.ElemContainerState(yyj4617)
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PreferredSchedulingTerm{}
				} else {
					yyv4619 := &yyv4617[yyj4617]
					yyv4619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4617 := 0
		for ; !r.CheckBreak(); yyj4617++ {

			if yyj4617 >= len(yyv4617) {
				yyv4617 = append(yyv4617, PreferredSchedulingTerm{}) // var yyz4617 PreferredSchedulingTerm
				yyc4617 = true
			}
			yyh4617.ElemContainerState(yyj4617)
			if yyj4617 < len(yyv4617) {
				if r.TryDecodeAsNil() {
					yyv4617[yyj4617] = PreferredSchedulingTerm{}
				} else {
					yyv4620 := &yyv4617[yyj4617]
					yyv4620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4617 < len(yyv4617) {
			yyv4617 = yyv4617[:yyj4617]
			yyc4617 = true
		} else if yyj4617 == 0 && yyv4617 == nil {
			yyv4617 = []PreferredSchedulingTerm{}
			yyc4617 = true
		}
	}
	yyh4617.End()
	if yyc4617 {
		*v = yyv4617
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4622 := &yyv4621
		yy4622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4623 := *v
	yyh4623, yyl4623 := z.DecSliceHelperStart()
	var yyc4623 bool
	if yyl4623 == 0 {
		if yyv4623 == nil {
			yyv4623 = []Volume{}
			yyc4623 = true
		} else if len(yyv4623) != 0 {
			yyv4623 = yyv4623[:0]
			yyc4623 = true
		}
	} else if yyl4623 > 0 {
		var yyrr4623, yyrl4623 int
		var yyrt4623 bool
		if yyl4623 > cap(yyv4623) {

			yyrg4623 := len(yyv4623) > 0
			yyv24623 := yyv4623
			yyrl4623, yyrt4623 = z.DecInferLen(yyl4623, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4623 {
				if yyrl4623 <= cap(yyv4623) {
					yyv4623 = yyv4623[:yyrl4623]
				} else {
					yyv4623 = make([]Volume, yyrl4623)
				}
			} else {
				yyv4623 = make([]Volume, yyrl4623)
			}
			yyc4623 = true
			yyrr4623 = len(yyv4623)
			if yyrg4623 {
				copy(yyv4623, yyv24623)
			}
		} else if yyl4623 != len(yyv4623) {
			yyv4623 = yyv4623[:yyl4623]
			yyc4623 = true
		}
		yyj4623 := 0
		for ; yyj4623 < yyrr4623; yyj4623++ {
			yyh4623.ElemContainerState(yyj4623)
			if r.TryDecodeAsNil() {
				yyv4623[yyj4623] = Volume{}
			} else {
				yyv4624 := &yyv4623[yyj4623]
				yyv4624.CodecDecodeSelf(d)
			}

		}
		if yyrt4623 {
			for ; yyj4623 < yyl4623; yyj4623++ {
				yyv4623 = append(yyv4623, Volume{})
				yyh4623.ElemContainerState(yyj4623)
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = Volume{}
				} else {
					yyv4625 := &yyv4623[yyj4623]
					yyv4625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4623 := 0
		for ; !r.CheckBreak(); yyj4623++ {

			if yyj4623 >= len(yyv4623) {
				yyv4623 = append(yyv4623, Volume{}) // var yyz4623 Volume
				yyc4623 = true
			}
			yyh4623.ElemContainerState(yyj4623)
			if yyj4623 < len(yyv4623) {
				if r.TryDecodeAsNil() {
					yyv4623[yyj4623] = Volume{}
				} else {
					yyv4626 := &yyv4623[yyj4623]
					yyv4626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4623 < len(yyv4623) {
			yyv4623 = yyv4623[:yyj4623]
			yyc4623 = true
		} else if yyj4623 == 0 && yyv4623 == nil {
			yyv4623 = []Volume{}
			yyc4623 = true
		}
	}
	yyh4623.End()
	if yyc4623 {
		*v = yyv4623
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4628 := &yyv4627
		yy4628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4629 := *v
	yyh4629, yyl4629 := z.DecSliceHelperStart()
	var yyc4629 bool
	if yyl4629 == 0 {
		if yyv4629 == nil {
			yyv4629 = []Container{}
			yyc4629 = true
		} else if len(yyv4629) != 0 {
			yyv4629 = yyv4629[:0]
			yyc4629 = true
		}
	} else if yyl4629 > 0 {
		var yyrr4629, yyrl4629 int
		var yyrt4629 bool
		if yyl4629 > cap(yyv4629) {

			yyrg4629 := len(yyv4629) > 0
			yyv24629 := yyv4629
			yyrl4629, yyrt4629 = z.DecInferLen(yyl4629, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4629 {
				if yyrl4629 <= cap(yyv4629) {
					yyv4629 = yyv4629[:yyrl4629]
				} else {
					yyv4629 = make([]Container, yyrl4629)
				}
			} else {
				yyv4629 = make([]Container, yyrl4629)
			}
			yyc4629 = true
			yyrr4629 = len(yyv4629)
			if yyrg4629 {
				copy(yyv4629, yyv24629)
			}
		} else if yyl4629 != len(yyv4629) {
			yyv4629 = yyv4629[:yyl4629]
			yyc4629 = true
		}
		yyj4629 := 0
		for ; yyj4629 < yyrr4629; yyj4629++ {
			yyh4629.ElemContainerState(yyj4629)
			if r.TryDecodeAsNil() {
				yyv4629[yyj4629] = Container{}
			} else {
				yyv4630 := &yyv4629[yyj4629]
				yyv4630.CodecDecodeSelf(d)
			}

		}
		if yyrt4629 {
			for ; yyj4629 < yyl4629; yyj4629++ {
				yyv4629 = append(yyv4629, Container{})
				yyh4629.ElemContainerState(yyj4629)
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = Container{}
				} else {
					yyv4631 := &yyv4629[yyj4629]
					yyv4631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4629 := 0
		for ; !r.CheckBreak(); yyj4629++ {

			if yyj4629 >= len(yyv4629) {
				yyv4629 = append(yyv4629, Container{}) // var yyz4629 Container
				yyc4629 = true
			}
			yyh4629.ElemContainerState(yyj4629)
			if yyj4629 < len(yyv4629) {
				if r.TryDecodeAsNil() {
					yyv4629[yyj4629] = Container{}
				} else {
					yyv4632 := &yyv4629[yyj4629]
					yyv4632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4629 < len(yyv4629) {
			yyv4629 = yyv4629[:yyj4629]
			yyc4629 = true
		} else if yyj4629 == 0 && yyv4629 == nil {
			yyv4629 = []Container{}
			yyc4629 = true
		}
	}
	yyh4629.End()
	if yyc4629 {
		*v = yyv4629
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4634 := &yyv4633
		yy4634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4635 := *v
	yyh4635, yyl4635 := z.DecSliceHelperStart()
	var yyc4635 bool
	if yyl4635 == 0 {
		if yyv4635 == nil {
			yyv4635 = []LocalObjectReference{}
			yyc4635 = true
		} else if len(yyv4635) != 0 {
			yyv4635 = yyv4635[:0]
			yyc4635 = true
		}
	} else if yyl4635 > 0 {
		var yyrr4635, yyrl4635 int
		var yyrt4635 bool
		if yyl4635 > cap(yyv4635) {

			yyrg4635 := len(yyv4635) > 0
			yyv24635 := yyv4635
			yyrl4635, yyrt4635 = z.DecInferLen(yyl4635, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4635 {
				if yyrl4635 <= cap(yyv4635) {
					yyv4635 = yyv4635[:yyrl4635]
				} else {
					yyv4635 = make([]LocalObjectReference, yyrl4635)
				}
			} else {
				yyv4635 = make([]LocalObjectReference, yyrl4635)
			}
			yyc4635 = true
			yyrr4635 = len(yyv4635)
			if yyrg4635 {
				copy(yyv4635, yyv24635)
			}
		} else if yyl4635 != len(yyv4635) {
			yyv4635 = yyv4635[:yyl4635]
			yyc4635 = true
		}
		yyj4635 := 0
		for ; yyj4635 < yyrr4635; yyj4635++ {
			yyh4635.ElemContainerState(yyj4635)
			if r.TryDecodeAsNil() {
				yyv4635[yyj4635] = LocalObjectReference{}
			} else {
				yyv4636 := &yyv4635[yyj4635]
				yyv4636.CodecDecodeSelf(d)
			}

		}
		if yyrt4635 {
			for ; yyj4635 < yyl4635; yyj4635++ {
				yyv4635 = append(yyv4635, LocalObjectReference{})
				yyh4635.ElemContainerState(yyj4635)
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = LocalObjectReference{}
				} else {
					yyv4637 := &yyv4635[yyj4635]
					yyv4637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4635 := 0
		for ; !r.CheckBreak(); yyj4635++ {

			if yyj4635 >= len(yyv4635) {
				yyv4635 = append(yyv4635, LocalObjectReference{}) // var yyz4635 LocalObjectReference
				yyc4635 = true
			}
			yyh4635.ElemContainerState(yyj4635)
			if yyj4635 < len(yyv4635) {
				if r.TryDecodeAsNil() {
					yyv4635[yyj4635] = LocalObjectReference{}
				} else {
					yyv4638 := &yyv4635[yyj4635]
					yyv4638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4635 < len(yyv4635) {
			yyv4635 = yyv4635[:yyj4635]
			yyc4635 = true
		} else if yyj4635 == 0 && yyv4635 == nil {
			yyv4635 = []LocalObjectReference{}
			yyc4635 = true
		}
	}
	yyh4635.End()
	if yyc4635 {
		*v = yyv4635
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4640 := &yyv4639
		yy4640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4641 := *v
	yyh4641, yyl4641 := z.DecSliceHelperStart()
	var yyc4641 bool
	if yyl4641 == 0 {
		if yyv4641 == nil {
			yyv4641 = []PodCondition{}
			yyc4641 = true
		} else if len(yyv4641) != 0 {
			yyv4641 = yyv4641[:0]
			yyc4641 = true
		}
	} else if yyl4641 > 0 {
		var yyrr4641, yyrl4641 int
		var yyrt4641 bool
		if yyl4641 > cap(yyv4641) {

			yyrg4641 := len(yyv4641) > 0
			yyv24641 := yyv4641
			yyrl4641, yyrt4641 = z.DecInferLen(yyl4641, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4641 {
				if yyrl4641 <= cap(yyv4641) {
					yyv4641 = yyv4641[:yyrl4641]
				} else {
					yyv4641 = make([]PodCondition, yyrl4641)
				}
			} else {
				yyv4641 = make([]PodCondition, yyrl4641)
			}
			yyc4641 = true
			yyrr4641 = len(yyv4641)
			if yyrg4641 {
				copy(yyv4641, yyv24641)
			}
		} else if yyl4641 != len(yyv4641) {
			yyv4641 = yyv4641[:yyl4641]
			yyc4641 = true
		}
		yyj4641 := 0
		for ; yyj4641 < yyrr4641; yyj4641++ {
			yyh4641.ElemContainerState(yyj4641)
			if r.TryDecodeAsNil() {
				yyv4641[yyj4641] = PodCondition{}
			} else {
				yyv4642 := &yyv4641[yyj4641]
				yyv4642.CodecDecodeSelf(d)
			}

		}
		if yyrt4641 {
			for ; yyj4641 < yyl4641; yyj4641++ {
				yyv4641 = append(yyv4641, PodCondition{})
				yyh4641.ElemContainerState(yyj4641)
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = PodCondition{}
				} else {
					yyv4643 := &yyv4641[yyj4641]
					yyv4643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4641 := 0
		for ; !r.CheckBreak(); yyj4641++ {

			if yyj4641 >= len(yyv4641) {
				yyv4641 = append(yyv4641, PodCondition{}) // var yyz4641 PodCondition
				yyc4641 = true
			}
			yyh4641.ElemContainerState(yyj4641)
			if yyj4641 < len(yyv4641) {
				if r.TryDecodeAsNil() {
					yyv4641[yyj4641] = PodCondition{}
				} else {
					yyv4644 := &yyv4641[yyj4641]
					yyv4644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4641 < len(yyv4641) {
			yyv4641 = yyv4641[:yyj4641]
			yyc4641 = true
		} else if yyj4641 == 0 && yyv4641 == nil {
			yyv4641 = []PodCondition{}
			yyc4641 = true
		}
	}
	yyh4641.End()
	if yyc4641 {
		*v = yyv4641
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4646 := &yyv4645
		yy4646.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4647 := *v
	yyh4647, yyl4647 := z.DecSliceHelperStart()
	var yyc4647 bool
	if yyl4647 == 0 {
		if yyv4647 == nil {
			yyv4647 = []ContainerStatus{}
			yyc4647 = true
		} else if len(yyv4647) != 0 {
			yyv4647 = yyv4647[:0]
			yyc4647 = true
		}
	} else if yyl4647 > 0 {
		var yyrr4647, yyrl4647 int
		var yyrt4647 bool
		if yyl4647 > cap(yyv4647) {

			yyrg4647 := len(yyv4647) > 0
			yyv24647 := yyv4647
			yyrl4647, yyrt4647 = z.DecInferLen(yyl4647, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4647 {
				if yyrl4647 <= cap(yyv4647) {
					yyv4647 = yyv4647[:yyrl4647]
				} else {
					yyv4647 = make([]ContainerStatus, yyrl4647)
				}
			} else {
				yyv4647 = make([]ContainerStatus, yyrl4647)
			}
			yyc4647 = true
			yyrr4647 = len(yyv4647)
			if yyrg4647 {
				copy(yyv4647, yyv24647)
			}
		} else if yyl4647 != len(yyv4647) {
			yyv4647 = yyv4647[:yyl4647]
			yyc4647 = true
		}
		yyj4647 := 0
		for ; yyj4647 < yyrr4647; yyj4647++ {
			yyh4647.ElemContainerState(yyj4647)
			if r.TryDecodeAsNil() {
				yyv4647[yyj4647] = ContainerStatus{}
			} else {
				yyv4648 := &yyv4647[yyj4647]
				yyv4648.CodecDecodeSelf(d)
			}

		}
		if yyrt4647 {
			for ; yyj4647 < yyl4647; yyj4647++ {
				yyv4647 = append(yyv4647, ContainerStatus{})
				yyh4647.ElemContainerState(yyj4647)
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = ContainerStatus{}
				} else {
					yyv4649 := &yyv4647[yyj4647]
					yyv4649.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4647 := 0
		for ; !r.CheckBreak(); yyj4647++ {

			if yyj4647 >= len(yyv4647) {
				yyv4647 = append(yyv4647, ContainerStatus{}) // var yyz4647 ContainerStatus
				yyc4647 = true
			}
			yyh4647.ElemContainerState(yyj4647)
			if yyj4647 < len(yyv4647) {
				if r.TryDecodeAsNil() {
					yyv4647[yyj4647] = ContainerStatus{}
				} else {
					yyv4650 := &yyv4647[yyj4647]
					yyv4650.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4647 < len(yyv4647) {
			yyv4647 = yyv4647[:yyj4647]
			yyc4647 = true
		} else if yyj4647 == 0 && yyv4647 == nil {
			yyv4647 = []ContainerStatus{}
			yyc4647 = true
		}
	}
	yyh4647.End()
	if yyc4647 {
		*v = yyv4647
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4651 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4652 := &yyv4651
		yy4652.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4653 := *v
	yyh4653, yyl4653 := z.DecSliceHelperStart()
	var yyc4653 bool
	if yyl4653 == 0 {
		if yyv4653 == nil {
			yyv4653 = []Pod{}
			yyc4653 = true
		} else if len(yyv4653) != 0 {
			yyv4653 = yyv4653[:0]
			yyc4653 = true
		}
	} else if yyl4653 > 0 {
		var yyrr4653, yyrl4653 int
		var yyrt4653 bool
		if yyl4653 > cap(yyv4653) {

			yyrg4653 := len(yyv4653) > 0
			yyv24653 := yyv4653
			yyrl4653, yyrt4653 = z.DecInferLen(yyl4653, z.DecBasicHandle().MaxInitLen, 664)
			if yyrt4653 {
				if yyrl4653 <= cap(yyv4653) {
					yyv4653 = yyv4653[:yyrl4653]
				} else {
					yyv4653 = make([]Pod, yyrl4653)
				}
			} else {
				yyv4653 = make([]Pod, yyrl4653)
			}
			yyc4653 = true
			yyrr4653 = len(yyv4653)
			if yyrg4653 {
				copy(yyv4653, yyv24653)
			}
		} else if yyl4653 != len(yyv4653) {
			yyv4653 = yyv4653[:yyl4653]
			yyc4653 = true
		}
		yyj4653 := 0
		for ; yyj4653 < yyrr4653; yyj4653++ {
			yyh4653.ElemContainerState(yyj4653)
			if r.TryDecodeAsNil() {
				yyv4653[yyj4653] = Pod{}
			} else {
				yyv4654 := &yyv4653[yyj4653]
				yyv4654.CodecDecodeSelf(d)
			}

		}
		if yyrt4653 {
			for ; yyj4653 < yyl4653; yyj4653++ {
				yyv4653 = append(yyv4653, Pod{})
				yyh4653.ElemContainerState(yyj4653)
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = Pod{}
				} else {
					yyv4655 := &yyv4653[yyj4653]
					yyv4655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4653 := 0
		for ; !r.CheckBreak(); yyj4653++ {

			if yyj4653 >= len(yyv4653) {
				yyv4653 = append(yyv4653, Pod{}) // var yyz4653 Pod
				yyc4653 = true
			}
			yyh4653.ElemContainerState(yyj4653)
			if yyj4653 < len(yyv4653) {
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = Pod{}
				} else {
					yyv4656 := &yyv4653[yyj4653]
					yyv4656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4653 < len(yyv4653) {
			yyv4653 = yyv4653[:yyj4653]
			yyc4653 = true
		} else if yyj4653 == 0 && yyv4653 == nil {
			yyv4653 = []Pod{}
			yyc4653 = true
		}
	}
	yyh4653.End()
	if yyc4653 {
		*v = yyv4653
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4657 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4658 := &yyv4657
		yy4658.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4659 := *v
	yyh4659, yyl4659 := z.DecSliceHelperStart()
	var yyc4659 bool
	if yyl4659 == 0 {
		if yyv4659 == nil {
			yyv4659 = []PodTemplate{}
			yyc4659 = true
		} else if len(yyv4659) != 0 {
			yyv4659 = yyv4659[:0]
			yyc4659 = true
		}
	} else if yyl4659 > 0 {
		var yyrr4659, yyrl4659 int
		var yyrt4659 bool
		if yyl4659 > cap(yyv4659) {

			yyrg4659 := len(yyv4659) > 0
			yyv24659 := yyv4659
			yyrl4659, yyrt4659 = z.DecInferLen(yyl4659, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt4659 {
				if yyrl4659 <= cap(yyv4659) {
					yyv4659 = yyv4659[:yyrl4659]
				} else {
					yyv4659 = make([]PodTemplate, yyrl4659)
				}
			} else {
				yyv4659 = make([]PodTemplate, yyrl4659)
			}
			yyc4659 = true
			yyrr4659 = len(yyv4659)
			if yyrg4659 {
				copy(yyv4659, yyv24659)
			}
		} else if yyl4659 != len(yyv4659) {
			yyv4659 = yyv4659[:yyl4659]
			yyc4659 = true
		}
		yyj4659 := 0
		for ; yyj4659 < yyrr4659; yyj4659++ {
			yyh4659.ElemContainerState(yyj4659)
			if r.TryDecodeAsNil() {
				yyv4659[yyj4659] = PodTemplate{}
			} else {
				yyv4660 := &yyv4659[yyj4659]
				yyv4660.CodecDecodeSelf(d)
			}

		}
		if yyrt4659 {
			for ; yyj4659 < yyl4659; yyj4659++ {
				yyv4659 = append(yyv4659, PodTemplate{})
				yyh4659.ElemContainerState(yyj4659)
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = PodTemplate{}
				} else {
					yyv4661 := &yyv4659[yyj4659]
					yyv4661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4659 := 0
		for ; !r.CheckBreak(); yyj4659++ {

			if yyj4659 >= len(yyv4659) {
				yyv4659 = append(yyv4659, PodTemplate{}) // var yyz4659 PodTemplate
				yyc4659 = true
			}
			yyh4659.ElemContainerState(yyj4659)
			if yyj4659 < len(yyv4659) {
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = PodTemplate{}
				} else {
					yyv4662 := &yyv4659[yyj4659]
					yyv4662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4659 < len(yyv4659) {
			yyv4659 = yyv4659[:yyj4659]
			yyc4659 = true
		} else if yyj4659 == 0 && yyv4659 == nil {
			yyv4659 = []PodTemplate{}
			yyc4659 = true
		}
	}
	yyh4659.End()
	if yyc4659 {
		*v = yyv4659
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4664 := &yyv4663
		yy4664.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4665 := *v
	yyh4665, yyl4665 := z.DecSliceHelperStart()
	var yyc4665 bool
	if yyl4665 == 0 {
		if yyv4665 == nil {
			yyv4665 = []ReplicationController{}
			yyc4665 = true
		} else if len(yyv4665) != 0 {
			yyv4665 = yyv4665[:0]
			yyc4665 = true
		}
	} else if yyl4665 > 0 {
		var yyrr4665, yyrl4665 int
		var yyrt4665 bool
		if yyl4665 > cap(yyv4665) {

			yyrg4665 := len(yyv4665) > 0
			yyv24665 := yyv4665
			yyrl4665, yyrt4665 = z.DecInferLen(yyl4665, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt4665 {
				if yyrl4665 <= cap(yyv4665) {
					yyv4665 = yyv4665[:yyrl4665]
				} else {
					yyv4665 = make([]ReplicationController, yyrl4665)
				}
			} else {
				yyv4665 = make([]ReplicationController, yyrl4665)
			}
			yyc4665 = true
			yyrr4665 = len(yyv4665)
			if yyrg4665 {
				copy(yyv4665, yyv24665)
			}
		} else if yyl4665 != len(yyv4665) {
			yyv4665 = yyv4665[:yyl4665]
			yyc4665 = true
		}
		yyj4665 := 0
		for ; yyj4665 < yyrr4665; yyj4665++ {
			yyh4665.ElemContainerState(yyj4665)
			if r.TryDecodeAsNil() {
				yyv4665[yyj4665] = ReplicationController{}
			} else {
				yyv4666 := &yyv4665[yyj4665]
				yyv4666.CodecDecodeSelf(d)
			}

		}
		if yyrt4665 {
			for ; yyj4665 < yyl4665; yyj4665++ {
				yyv4665 = append(yyv4665, ReplicationController{})
				yyh4665.ElemContainerState(yyj4665)
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = ReplicationController{}
				} else {
					yyv4667 := &yyv4665[yyj4665]
					yyv4667.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4665 := 0
		for ; !r.CheckBreak(); yyj4665++ {

			if yyj4665 >= len(yyv4665) {
				yyv4665 = append(yyv4665, ReplicationController{}) // var yyz4665 ReplicationController
				yyc4665 = true
			}
			yyh4665.ElemContainerState(yyj4665)
			if yyj4665 < len(yyv4665) {
				if r.TryDecodeAsNil() {
					yyv4665[yyj4665] = ReplicationController{}
				} else {
					yyv4668 := &yyv4665[yyj4665]
					yyv4668.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4665 < len(yyv4665) {
			yyv4665 = yyv4665[:yyj4665]
			yyc4665 = true
		} else if yyj4665 == 0 && yyv4665 == nil {
			yyv4665 = []ReplicationController{}
			yyc4665 = true
		}
	}
	yyh4665.End()
	if yyc4665 {
		*v = yyv4665
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4669 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4670 := &yyv4669
		yy4670.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4671 := *v
	yyh4671, yyl4671 := z.DecSliceHelperStart()
	var yyc4671 bool
	if yyl4671 == 0 {
		if yyv4671 == nil {
			yyv4671 = []LoadBalancerIngress{}
			yyc4671 = true
		} else if len(yyv4671) != 0 {
			yyv4671 = yyv4671[:0]
			yyc4671 = true
		}
	} else if yyl4671 > 0 {
		var yyrr4671, yyrl4671 int
		var yyrt4671 bool
		if yyl4671 > cap(yyv4671) {

			yyrg4671 := len(yyv4671) > 0
			yyv24671 := yyv4671
			yyrl4671, yyrt4671 = z.DecInferLen(yyl4671, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4671 {
				if yyrl4671 <= cap(yyv4671) {
					yyv4671 = yyv4671[:yyrl4671]
				} else {
					yyv4671 = make([]LoadBalancerIngress, yyrl4671)
				}
			} else {
				yyv4671 = make([]LoadBalancerIngress, yyrl4671)
			}
			yyc4671 = true
			yyrr4671 = len(yyv4671)
			if yyrg4671 {
				copy(yyv4671, yyv24671)
			}
		} else if yyl4671 != len(yyv4671) {
			yyv4671 = yyv4671[:yyl4671]
			yyc4671 = true
		}
		yyj4671 := 0
		for ; yyj4671 < yyrr4671; yyj4671++ {
			yyh4671.ElemContainerState(yyj4671)
			if r.TryDecodeAsNil() {
				yyv4671[yyj4671] = LoadBalancerIngress{}
			} else {
				yyv4672 := &yyv4671[yyj4671]
				yyv4672.CodecDecodeSelf(d)
			}

		}
		if yyrt4671 {
			for ; yyj4671 < yyl4671; yyj4671++ {
				yyv4671 = append(yyv4671, LoadBalancerIngress{})
				yyh4671.ElemContainerState(yyj4671)
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = LoadBalancerIngress{}
				} else {
					yyv4673 := &yyv4671[yyj4671]
					yyv4673.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4671 := 0
		for ; !r.CheckBreak(); yyj4671++ {

			if yyj4671 >= len(yyv4671) {
				yyv4671 = append(yyv4671, LoadBalancerIngress{}) // var yyz4671 LoadBalancerIngress
				yyc4671 = true
			}
			yyh4671.ElemContainerState(yyj4671)
			if yyj4671 < len(yyv4671) {
				if r.TryDecodeAsNil() {
					yyv4671[yyj4671] = LoadBalancerIngress{}
				} else {
					yyv4674 := &yyv4671[yyj4671]
					yyv4674.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4671 < len(yyv4671) {
			yyv4671 = yyv4671[:yyj4671]
			yyc4671 = true
		} else if yyj4671 == 0 && yyv4671 == nil {
			yyv4671 = []LoadBalancerIngress{}
			yyc4671 = true
		}
	}
	yyh4671.End()
	if yyc4671 {
		*v = yyv4671
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4675 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4676 := &yyv4675
		yy4676.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4677 := *v
	yyh4677, yyl4677 := z.DecSliceHelperStart()
	var yyc4677 bool
	if yyl4677 == 0 {
		if yyv4677 == nil {
			yyv4677 = []ServicePort{}
			yyc4677 = true
		} else if len(yyv4677) != 0 {
			yyv4677 = yyv4677[:0]
			yyc4677 = true
		}
	} else if yyl4677 > 0 {
		var yyrr4677, yyrl4677 int
		var yyrt4677 bool
		if yyl4677 > cap(yyv4677) {

			yyrg4677 := len(yyv4677) > 0
			yyv24677 := yyv4677
			yyrl4677, yyrt4677 = z.DecInferLen(yyl4677, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4677 {
				if yyrl4677 <= cap(yyv4677) {
					yyv4677 = yyv4677[:yyrl4677]
				} else {
					yyv4677 = make([]ServicePort, yyrl4677)
				}
			} else {
				yyv4677 = make([]ServicePort, yyrl4677)
			}
			yyc4677 = true
			yyrr4677 = len(yyv4677)
			if yyrg4677 {
				copy(yyv4677, yyv24677)
			}
		} else if yyl4677 != len(yyv4677) {
			yyv4677 = yyv4677[:yyl4677]
			yyc4677 = true
		}
		yyj4677 := 0
		for ; yyj4677 < yyrr4677; yyj4677++ {
			yyh4677.ElemContainerState(yyj4677)
			if r.TryDecodeAsNil() {
				yyv4677[yyj4677] = ServicePort{}
			} else {
				yyv4678 := &yyv4677[yyj4677]
				yyv4678.CodecDecodeSelf(d)
			}

		}
		if yyrt4677 {
			for ; yyj4677 < yyl4677; yyj4677++ {
				yyv4677 = append(yyv4677, ServicePort{})
				yyh4677.ElemContainerState(yyj4677)
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = ServicePort{}
				} else {
					yyv4679 := &yyv4677[yyj4677]
					yyv4679.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4677 := 0
		for ; !r.CheckBreak(); yyj4677++ {

			if yyj4677 >= len(yyv4677) {
				yyv4677 = append(yyv4677, ServicePort{}) // var yyz4677 ServicePort
				yyc4677 = true
			}
			yyh4677.ElemContainerState(yyj4677)
			if yyj4677 < len(yyv4677) {
				if r.TryDecodeAsNil() {
					yyv4677[yyj4677] = ServicePort{}
				} else {
					yyv4680 := &yyv4677[yyj4677]
					yyv4680.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4677 < len(yyv4677) {
			yyv4677 = yyv4677[:yyj4677]
			yyc4677 = true
		} else if yyj4677 == 0 && yyv4677 == nil {
			yyv4677 = []ServicePort{}
			yyc4677 = true
		}
	}
	yyh4677.End()
	if yyc4677 {
		*v = yyv4677
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4681 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4682 := &yyv4681
		yy4682.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4683 := *v
	yyh4683, yyl4683 := z.DecSliceHelperStart()
	var yyc4683 bool
	if yyl4683 == 0 {
		if yyv4683 == nil {
			yyv4683 = []Service{}
			yyc4683 = true
		} else if len(yyv4683) != 0 {
			yyv4683 = yyv4683[:0]
			yyc4683 = true
		}
	} else if yyl4683 > 0 {
		var yyrr4683, yyrl4683 int
		var yyrt4683 bool
		if yyl4683 > cap(yyv4683) {

			yyrg4683 := len(yyv4683) > 0
			yyv24683 := yyv4683
			yyrl4683, yyrt4683 = z.DecInferLen(yyl4683, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4683 {
				if yyrl4683 <= cap(yyv4683) {
					yyv4683 = yyv4683[:yyrl4683]
				} else {
					yyv4683 = make([]Service, yyrl4683)
				}
			} else {
				yyv4683 = make([]Service, yyrl4683)
			}
			yyc4683 = true
			yyrr4683 = len(yyv4683)
			if yyrg4683 {
				copy(yyv4683, yyv24683)
			}
		} else if yyl4683 != len(yyv4683) {
			yyv4683 = yyv4683[:yyl4683]
			yyc4683 = true
		}
		yyj4683 := 0
		for ; yyj4683 < yyrr4683; yyj4683++ {
			yyh4683.ElemContainerState(yyj4683)
			if r.TryDecodeAsNil() {
				yyv4683[yyj4683] = Service{}
			} else {
				yyv4684 := &yyv4683[yyj4683]
				yyv4684.CodecDecodeSelf(d)
			}

		}
		if yyrt4683 {
			for ; yyj4683 < yyl4683; yyj4683++ {
				yyv4683 = append(yyv4683, Service{})
				yyh4683.ElemContainerState(yyj4683)
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = Service{}
				} else {
					yyv4685 := &yyv4683[yyj4683]
					yyv4685.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4683 := 0
		for ; !r.CheckBreak(); yyj4683++ {

			if yyj4683 >= len(yyv4683) {
				yyv4683 = append(yyv4683, Service{}) // var yyz4683 Service
				yyc4683 = true
			}
			yyh4683.ElemContainerState(yyj4683)
			if yyj4683 < len(yyv4683) {
				if r.TryDecodeAsNil() {
					yyv4683[yyj4683] = Service{}
				} else {
					yyv4686 := &yyv4683[yyj4683]
					yyv4686.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4683 < len(yyv4683) {
			yyv4683 = yyv4683[:yyj4683]
			yyc4683 = true
		} else if yyj4683 == 0 && yyv4683 == nil {
			yyv4683 = []Service{}
			yyc4683 = true
		}
	}
	yyh4683.End()
	if yyc4683 {
		*v = yyv4683
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4687 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4688 := &yyv4687
		yy4688.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4689 := *v
	yyh4689, yyl4689 := z.DecSliceHelperStart()
	var yyc4689 bool
	if yyl4689 == 0 {
		if yyv4689 == nil {
			yyv4689 = []ObjectReference{}
			yyc4689 = true
		} else if len(yyv4689) != 0 {
			yyv4689 = yyv4689[:0]
			yyc4689 = true
		}
	} else if yyl4689 > 0 {
		var yyrr4689, yyrl4689 int
		var yyrt4689 bool
		if yyl4689 > cap(yyv4689) {

			yyrg4689 := len(yyv4689) > 0
			yyv24689 := yyv4689
			yyrl4689, yyrt4689 = z.DecInferLen(yyl4689, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4689 {
				if yyrl4689 <= cap(yyv4689) {
					yyv4689 = yyv4689[:yyrl4689]
				} else {
					yyv4689 = make([]ObjectReference, yyrl4689)
				}
			} else {
				yyv4689 = make([]ObjectReference, yyrl4689)
			}
			yyc4689 = true
			yyrr4689 = len(yyv4689)
			if yyrg4689 {
				copy(yyv4689, yyv24689)
			}
		} else if yyl4689 != len(yyv4689) {
			yyv4689 = yyv4689[:yyl4689]
			yyc4689 = true
		}
		yyj4689 := 0
		for ; yyj4689 < yyrr4689; yyj4689++ {
			yyh4689.ElemContainerState(yyj4689)
			if r.TryDecodeAsNil() {
				yyv4689[yyj4689] = ObjectReference{}
			} else {
				yyv4690 := &yyv4689[yyj4689]
				yyv4690.CodecDecodeSelf(d)
			}

		}
		if yyrt4689 {
			for ; yyj4689 < yyl4689; yyj4689++ {
				yyv4689 = append(yyv4689, ObjectReference{})
				yyh4689.ElemContainerState(yyj4689)
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = ObjectReference{}
				} else {
					yyv4691 := &yyv4689[yyj4689]
					yyv4691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4689 := 0
		for ; !r.CheckBreak(); yyj4689++ {

			if yyj4689 >= len(yyv4689) {
				yyv4689 = append(yyv4689, ObjectReference{}) // var yyz4689 ObjectReference
				yyc4689 = true
			}
			yyh4689.ElemContainerState(yyj4689)
			if yyj4689 < len(yyv4689) {
				if r.TryDecodeAsNil() {
					yyv4689[yyj4689] = ObjectReference{}
				} else {
					yyv4692 := &yyv4689[yyj4689]
					yyv4692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4689 < len(yyv4689) {
			yyv4689 = yyv4689[:yyj4689]
			yyc4689 = true
		} else if yyj4689 == 0 && yyv4689 == nil {
			yyv4689 = []ObjectReference{}
			yyc4689 = true
		}
	}
	yyh4689.End()
	if yyc4689 {
		*v = yyv4689
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4693 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4694 := &yyv4693
		yy4694.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4695 := *v
	yyh4695, yyl4695 := z.DecSliceHelperStart()
	var yyc4695 bool
	if yyl4695 == 0 {
		if yyv4695 == nil {
			yyv4695 = []ServiceAccount{}
			yyc4695 = true
		} else if len(yyv4695) != 0 {
			yyv4695 = yyv4695[:0]
			yyc4695 = true
		}
	} else if yyl4695 > 0 {
		var yyrr4695, yyrl4695 int
		var yyrt4695 bool
		if yyl4695 > cap(yyv4695) {

			yyrg4695 := len(yyv4695) > 0
			yyv24695 := yyv4695
			yyrl4695, yyrt4695 = z.DecInferLen(yyl4695, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4695 {
				if yyrl4695 <= cap(yyv4695) {
					yyv4695 = yyv4695[:yyrl4695]
				} else {
					yyv4695 = make([]ServiceAccount, yyrl4695)
				}
			} else {
				yyv4695 = make([]ServiceAccount, yyrl4695)
			}
			yyc4695 = true
			yyrr4695 = len(yyv4695)
			if yyrg4695 {
				copy(yyv4695, yyv24695)
			}
		} else if yyl4695 != len(yyv4695) {
			yyv4695 = yyv4695[:yyl4695]
			yyc4695 = true
		}
		yyj4695 := 0
		for ; yyj4695 < yyrr4695; yyj4695++ {
			yyh4695.ElemContainerState(yyj4695)
			if r.TryDecodeAsNil() {
				yyv4695[yyj4695] = ServiceAccount{}
			} else {
				yyv4696 := &yyv4695[yyj4695]
				yyv4696.CodecDecodeSelf(d)
			}

		}
		if yyrt4695 {
			for ; yyj4695 < yyl4695; yyj4695++ {
				yyv4695 = append(yyv4695, ServiceAccount{})
				yyh4695.ElemContainerState(yyj4695)
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ServiceAccount{}
				} else {
					yyv4697 := &yyv4695[yyj4695]
					yyv4697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4695 := 0
		for ; !r.CheckBreak(); yyj4695++ {

			if yyj4695 >= len(yyv4695) {
				yyv4695 = append(yyv4695, ServiceAccount{}) // var yyz4695 ServiceAccount
				yyc4695 = true
			}
			yyh4695.ElemContainerState(yyj4695)
			if yyj4695 < len(yyv4695) {
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ServiceAccount{}
				} else {
					yyv4698 := &yyv4695[yyj4695]
					yyv4698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4695 < len(yyv4695) {
			yyv4695 = yyv4695[:yyj4695]
			yyc4695 = true
		} else if yyj4695 == 0 && yyv4695 == nil {
			yyv4695 = []ServiceAccount{}
			yyc4695 = true
		}
	}
	yyh4695.End()
	if yyc4695 {
		*v = yyv4695
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4700 := &yyv4699
		yy4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []EndpointSubset{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrg4701 := len(yyv4701) > 0
			yyv24701 := yyv4701
			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]EndpointSubset, yyrl4701)
				}
			} else {
				yyv4701 = make([]EndpointSubset, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
			if yyrg4701 {
				copy(yyv4701, yyv24701)
			}
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = EndpointSubset{}
			} else {
				yyv4702 := &yyv4701[yyj4701]
				yyv4702.CodecDecodeSelf(d)
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, EndpointSubset{})
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = EndpointSubset{}
				} else {
					yyv4703 := &yyv4701[yyj4701]
					yyv4703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, EndpointSubset{}) // var yyz4701 EndpointSubset
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = EndpointSubset{}
				} else {
					yyv4704 := &yyv4701[yyj4701]
					yyv4704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []EndpointSubset{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []EndpointAddress{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]EndpointAddress, yyrl4707)
				}
			} else {
				yyv4707 = make([]EndpointAddress, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = EndpointAddress{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, EndpointAddress{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = EndpointAddress{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, EndpointAddress{}) // var yyz4707 EndpointAddress
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = EndpointAddress{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []EndpointAddress{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4711 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4712 := &yyv4711
		yy4712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4713 := *v
	yyh4713, yyl4713 := z.DecSliceHelperStart()
	var yyc4713 bool
	if yyl4713 == 0 {
		if yyv4713 == nil {
			yyv4713 = []EndpointPort{}
			yyc4713 = true
		} else if len(yyv4713) != 0 {
			yyv4713 = yyv4713[:0]
			yyc4713 = true
		}
	} else if yyl4713 > 0 {
		var yyrr4713, yyrl4713 int
		var yyrt4713 bool
		if yyl4713 > cap(yyv4713) {

			yyrg4713 := len(yyv4713) > 0
			yyv24713 := yyv4713
			yyrl4713, yyrt4713 = z.DecInferLen(yyl4713, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4713 {
				if yyrl4713 <= cap(yyv4713) {
					yyv4713 = yyv4713[:yyrl4713]
				} else {
					yyv4713 = make([]EndpointPort, yyrl4713)
				}
			} else {
				yyv4713 = make([]EndpointPort, yyrl4713)
			}
			yyc4713 = true
			yyrr4713 = len(yyv4713)
			if yyrg4713 {
				copy(yyv4713, yyv24713)
			}
		} else if yyl4713 != len(yyv4713) {
			yyv4713 = yyv4713[:yyl4713]
			yyc4713 = true
		}
		yyj4713 := 0
		for ; yyj4713 < yyrr4713; yyj4713++ {
			yyh4713.ElemContainerState(yyj4713)
			if r.TryDecodeAsNil() {
				yyv4713[yyj4713] = EndpointPort{}
			} else {
				yyv4714 := &yyv4713[yyj4713]
				yyv4714.CodecDecodeSelf(d)
			}

		}
		if yyrt4713 {
			for ; yyj4713 < yyl4713; yyj4713++ {
				yyv4713 = append(yyv4713, EndpointPort{})
				yyh4713.ElemContainerState(yyj4713)
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EndpointPort{}
				} else {
					yyv4715 := &yyv4713[yyj4713]
					yyv4715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4713 := 0
		for ; !r.CheckBreak(); yyj4713++ {

			if yyj4713 >= len(yyv4713) {
				yyv4713 = append(yyv4713, EndpointPort{}) // var yyz4713 EndpointPort
				yyc4713 = true
			}
			yyh4713.ElemContainerState(yyj4713)
			if yyj4713 < len(yyv4713) {
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EndpointPort{}
				} else {
					yyv4716 := &yyv4713[yyj4713]
					yyv4716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4713 < len(yyv4713) {
			yyv4713 = yyv4713[:yyj4713]
			yyc4713 = true
		} else if yyj4713 == 0 && yyv4713 == nil {
			yyv4713 = []EndpointPort{}
			yyc4713 = true
		}
	}
	yyh4713.End()
	if yyc4713 {
		*v = yyv4713
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4717 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4718 := &yyv4717
		yy4718.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4719 := *v
	yyh4719, yyl4719 := z.DecSliceHelperStart()
	var yyc4719 bool
	if yyl4719 == 0 {
		if yyv4719 == nil {
			yyv4719 = []Endpoints{}
			yyc4719 = true
		} else if len(yyv4719) != 0 {
			yyv4719 = yyv4719[:0]
			yyc4719 = true
		}
	} else if yyl4719 > 0 {
		var yyrr4719, yyrl4719 int
		var yyrt4719 bool
		if yyl4719 > cap(yyv4719) {

			yyrg4719 := len(yyv4719) > 0
			yyv24719 := yyv4719
			yyrl4719, yyrt4719 = z.DecInferLen(yyl4719, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4719 {
				if yyrl4719 <= cap(yyv4719) {
					yyv4719 = yyv4719[:yyrl4719]
				} else {
					yyv4719 = make([]Endpoints, yyrl4719)
				}
			} else {
				yyv4719 = make([]Endpoints, yyrl4719)
			}
			yyc4719 = true
			yyrr4719 = len(yyv4719)
			if yyrg4719 {
				copy(yyv4719, yyv24719)
			}
		} else if yyl4719 != len(yyv4719) {
			yyv4719 = yyv4719[:yyl4719]
			yyc4719 = true
		}
		yyj4719 := 0
		for ; yyj4719 < yyrr4719; yyj4719++ {
			yyh4719.ElemContainerState(yyj4719)
			if r.TryDecodeAsNil() {
				yyv4719[yyj4719] = Endpoints{}
			} else {
				yyv4720 := &yyv4719[yyj4719]
				yyv4720.CodecDecodeSelf(d)
			}

		}
		if yyrt4719 {
			for ; yyj4719 < yyl4719; yyj4719++ {
				yyv4719 = append(yyv4719, Endpoints{})
				yyh4719.ElemContainerState(yyj4719)
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = Endpoints{}
				} else {
					yyv4721 := &yyv4719[yyj4719]
					yyv4721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4719 := 0
		for ; !r.CheckBreak(); yyj4719++ {

			if yyj4719 >= len(yyv4719) {
				yyv4719 = append(yyv4719, Endpoints{}) // var yyz4719 Endpoints
				yyc4719 = true
			}
			yyh4719.ElemContainerState(yyj4719)
			if yyj4719 < len(yyv4719) {
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = Endpoints{}
				} else {
					yyv4722 := &yyv4719[yyj4719]
					yyv4722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4719 < len(yyv4719) {
			yyv4719 = yyv4719[:yyj4719]
			yyc4719 = true
		} else if yyj4719 == 0 && yyv4719 == nil {
			yyv4719 = []Endpoints{}
			yyc4719 = true
		}
	}
	yyh4719.End()
	if yyc4719 {
		*v = yyv4719
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4723 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4724 := &yyv4723
		yy4724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4725 := *v
	yyh4725, yyl4725 := z.DecSliceHelperStart()
	var yyc4725 bool
	if yyl4725 == 0 {
		if yyv4725 == nil {
			yyv4725 = []NodeCondition{}
			yyc4725 = true
		} else if len(yyv4725) != 0 {
			yyv4725 = yyv4725[:0]
			yyc4725 = true
		}
	} else if yyl4725 > 0 {
		var yyrr4725, yyrl4725 int
		var yyrt4725 bool
		if yyl4725 > cap(yyv4725) {

			yyrg4725 := len(yyv4725) > 0
			yyv24725 := yyv4725
			yyrl4725, yyrt4725 = z.DecInferLen(yyl4725, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4725 {
				if yyrl4725 <= cap(yyv4725) {
					yyv4725 = yyv4725[:yyrl4725]
				} else {
					yyv4725 = make([]NodeCondition, yyrl4725)
				}
			} else {
				yyv4725 = make([]NodeCondition, yyrl4725)
			}
			yyc4725 = true
			yyrr4725 = len(yyv4725)
			if yyrg4725 {
				copy(yyv4725, yyv24725)
			}
		} else if yyl4725 != len(yyv4725) {
			yyv4725 = yyv4725[:yyl4725]
			yyc4725 = true
		}
		yyj4725 := 0
		for ; yyj4725 < yyrr4725; yyj4725++ {
			yyh4725.ElemContainerState(yyj4725)
			if r.TryDecodeAsNil() {
				yyv4725[yyj4725] = NodeCondition{}
			} else {
				yyv4726 := &yyv4725[yyj4725]
				yyv4726.CodecDecodeSelf(d)
			}

		}
		if yyrt4725 {
			for ; yyj4725 < yyl4725; yyj4725++ {
				yyv4725 = append(yyv4725, NodeCondition{})
				yyh4725.ElemContainerState(yyj4725)
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = NodeCondition{}
				} else {
					yyv4727 := &yyv4725[yyj4725]
					yyv4727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4725 := 0
		for ; !r.CheckBreak(); yyj4725++ {

			if yyj4725 >= len(yyv4725) {
				yyv4725 = append(yyv4725, NodeCondition{}) // var yyz4725 NodeCondition
				yyc4725 = true
			}
			yyh4725.ElemContainerState(yyj4725)
			if yyj4725 < len(yyv4725) {
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = NodeCondition{}
				} else {
					yyv4728 := &yyv4725[yyj4725]
					yyv4728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4725 < len(yyv4725) {
			yyv4725 = yyv4725[:yyj4725]
			yyc4725 = true
		} else if yyj4725 == 0 && yyv4725 == nil {
			yyv4725 = []NodeCondition{}
			yyc4725 = true
		}
	}
	yyh4725.End()
	if yyc4725 {
		*v = yyv4725
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4730 := &yyv4729
		yy4730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4731 := *v
	yyh4731, yyl4731 := z.DecSliceHelperStart()
	var yyc4731 bool
	if yyl4731 == 0 {
		if yyv4731 == nil {
			yyv4731 = []NodeAddress{}
			yyc4731 = true
		} else if len(yyv4731) != 0 {
			yyv4731 = yyv4731[:0]
			yyc4731 = true
		}
	} else if yyl4731 > 0 {
		var yyrr4731, yyrl4731 int
		var yyrt4731 bool
		if yyl4731 > cap(yyv4731) {

			yyrg4731 := len(yyv4731) > 0
			yyv24731 := yyv4731
			yyrl4731, yyrt4731 = z.DecInferLen(yyl4731, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4731 {
				if yyrl4731 <= cap(yyv4731) {
					yyv4731 = yyv4731[:yyrl4731]
				} else {
					yyv4731 = make([]NodeAddress, yyrl4731)
				}
			} else {
				yyv4731 = make([]NodeAddress, yyrl4731)
			}
			yyc4731 = true
			yyrr4731 = len(yyv4731)
			if yyrg4731 {
				copy(yyv4731, yyv24731)
			}
		} else if yyl4731 != len(yyv4731) {
			yyv4731 = yyv4731[:yyl4731]
			yyc4731 = true
		}
		yyj4731 := 0
		for ; yyj4731 < yyrr4731; yyj4731++ {
			yyh4731.ElemContainerState(yyj4731)
			if r.TryDecodeAsNil() {
				yyv4731[yyj4731] = NodeAddress{}
			} else {
				yyv4732 := &yyv4731[yyj4731]
				yyv4732.CodecDecodeSelf(d)
			}

		}
		if yyrt4731 {
			for ; yyj4731 < yyl4731; yyj4731++ {
				yyv4731 = append(yyv4731, NodeAddress{})
				yyh4731.ElemContainerState(yyj4731)
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeAddress{}
				} else {
					yyv4733 := &yyv4731[yyj4731]
					yyv4733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4731 := 0
		for ; !r.CheckBreak(); yyj4731++ {

			if yyj4731 >= len(yyv4731) {
				yyv4731 = append(yyv4731, NodeAddress{}) // var yyz4731 NodeAddress
				yyc4731 = true
			}
			yyh4731.ElemContainerState(yyj4731)
			if yyj4731 < len(yyv4731) {
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeAddress{}
				} else {
					yyv4734 := &yyv4731[yyj4731]
					yyv4734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4731 < len(yyv4731) {
			yyv4731 = yyv4731[:yyj4731]
			yyc4731 = true
		} else if yyj4731 == 0 && yyv4731 == nil {
			yyv4731 = []NodeAddress{}
			yyc4731 = true
		}
	}
	yyh4731.End()
	if yyc4731 {
		*v = yyv4731
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4736 := &yyv4735
		yy4736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4737 := *v
	yyh4737, yyl4737 := z.DecSliceHelperStart()
	var yyc4737 bool
	if yyl4737 == 0 {
		if yyv4737 == nil {
			yyv4737 = []ContainerImage{}
			yyc4737 = true
		} else if len(yyv4737) != 0 {
			yyv4737 = yyv4737[:0]
			yyc4737 = true
		}
	} else if yyl4737 > 0 {
		var yyrr4737, yyrl4737 int
		var yyrt4737 bool
		if yyl4737 > cap(yyv4737) {

			yyrg4737 := len(yyv4737) > 0
			yyv24737 := yyv4737
			yyrl4737, yyrt4737 = z.DecInferLen(yyl4737, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4737 {
				if yyrl4737 <= cap(yyv4737) {
					yyv4737 = yyv4737[:yyrl4737]
				} else {
					yyv4737 = make([]ContainerImage, yyrl4737)
				}
			} else {
				yyv4737 = make([]ContainerImage, yyrl4737)
			}
			yyc4737 = true
			yyrr4737 = len(yyv4737)
			if yyrg4737 {
				copy(yyv4737, yyv24737)
			}
		} else if yyl4737 != len(yyv4737) {
			yyv4737 = yyv4737[:yyl4737]
			yyc4737 = true
		}
		yyj4737 := 0
		for ; yyj4737 < yyrr4737; yyj4737++ {
			yyh4737.ElemContainerState(yyj4737)
			if r.TryDecodeAsNil() {
				yyv4737[yyj4737] = ContainerImage{}
			} else {
				yyv4738 := &yyv4737[yyj4737]
				yyv4738.CodecDecodeSelf(d)
			}

		}
		if yyrt4737 {
			for ; yyj4737 < yyl4737; yyj4737++ {
				yyv4737 = append(yyv4737, ContainerImage{})
				yyh4737.ElemContainerState(yyj4737)
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = ContainerImage{}
				} else {
					yyv4739 := &yyv4737[yyj4737]
					yyv4739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4737 := 0
		for ; !r.CheckBreak(); yyj4737++ {

			if yyj4737 >= len(yyv4737) {
				yyv4737 = append(yyv4737, ContainerImage{}) // var yyz4737 ContainerImage
				yyc4737 = true
			}
			yyh4737.ElemContainerState(yyj4737)
			if yyj4737 < len(yyv4737) {
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = ContainerImage{}
				} else {
					yyv4740 := &yyv4737[yyj4737]
					yyv4740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4737 < len(yyv4737) {
			yyv4737 = yyv4737[:yyj4737]
			yyc4737 = true
		} else if yyj4737 == 0 && yyv4737 == nil {
			yyv4737 = []ContainerImage{}
			yyc4737 = true
		}
	}
	yyh4737.End()
	if yyc4737 {
		*v = yyv4737
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4741.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4742 := *v
	yyh4742, yyl4742 := z.DecSliceHelperStart()
	var yyc4742 bool
	if yyl4742 == 0 {
		if yyv4742 == nil {
			yyv4742 = []UniqueVolumeName{}
			yyc4742 = true
		} else if len(yyv4742) != 0 {
			yyv4742 = yyv4742[:0]
			yyc4742 = true
		}
	} else if yyl4742 > 0 {
		var yyrr4742, yyrl4742 int
		var yyrt4742 bool
		if yyl4742 > cap(yyv4742) {

			yyrl4742, yyrt4742 = z.DecInferLen(yyl4742, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4742 {
				if yyrl4742 <= cap(yyv4742) {
					yyv4742 = yyv4742[:yyrl4742]
				} else {
					yyv4742 = make([]UniqueVolumeName, yyrl4742)
				}
			} else {
				yyv4742 = make([]UniqueVolumeName, yyrl4742)
			}
			yyc4742 = true
			yyrr4742 = len(yyv4742)
		} else if yyl4742 != len(yyv4742) {
			yyv4742 = yyv4742[:yyl4742]
			yyc4742 = true
		}
		yyj4742 := 0
		for ; yyj4742 < yyrr4742; yyj4742++ {
			yyh4742.ElemContainerState(yyj4742)
			if r.TryDecodeAsNil() {
				yyv4742[yyj4742] = ""
			} else {
				yyv4742[yyj4742] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4742 {
			for ; yyj4742 < yyl4742; yyj4742++ {
				yyv4742 = append(yyv4742, "")
				yyh4742.ElemContainerState(yyj4742)
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = ""
				} else {
					yyv4742[yyj4742] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4742 := 0
		for ; !r.CheckBreak(); yyj4742++ {

			if yyj4742 >= len(yyv4742) {
				yyv4742 = append(yyv4742, "") // var yyz4742 UniqueVolumeName
				yyc4742 = true
			}
			yyh4742.ElemContainerState(yyj4742)
			if yyj4742 < len(yyv4742) {
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = ""
				} else {
					yyv4742[yyj4742] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4742 < len(yyv4742) {
			yyv4742 = yyv4742[:yyj4742]
			yyc4742 = true
		} else if yyj4742 == 0 && yyv4742 == nil {
			yyv4742 = []UniqueVolumeName{}
			yyc4742 = true
		}
	}
	yyh4742.End()
	if yyc4742 {
		*v = yyv4742
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4746 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4747 := &yyv4746
		yy4747.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4748 := *v
	yyh4748, yyl4748 := z.DecSliceHelperStart()
	var yyc4748 bool
	if yyl4748 == 0 {
		if yyv4748 == nil {
			yyv4748 = []AttachedVolume{}
			yyc4748 = true
		} else if len(yyv4748) != 0 {
			yyv4748 = yyv4748[:0]
			yyc4748 = true
		}
	} else if yyl4748 > 0 {
		var yyrr4748, yyrl4748 int
		var yyrt4748 bool
		if yyl4748 > cap(yyv4748) {

			yyrg4748 := len(yyv4748) > 0
			yyv24748 := yyv4748
			yyrl4748, yyrt4748 = z.DecInferLen(yyl4748, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4748 {
				if yyrl4748 <= cap(yyv4748) {
					yyv4748 = yyv4748[:yyrl4748]
				} else {
					yyv4748 = make([]AttachedVolume, yyrl4748)
				}
			} else {
				yyv4748 = make([]AttachedVolume, yyrl4748)
			}
			yyc4748 = true
			yyrr4748 = len(yyv4748)
			if yyrg4748 {
				copy(yyv4748, yyv24748)
			}
		} else if yyl4748 != len(yyv4748) {
			yyv4748 = yyv4748[:yyl4748]
			yyc4748 = true
		}
		yyj4748 := 0
		for ; yyj4748 < yyrr4748; yyj4748++ {
			yyh4748.ElemContainerState(yyj4748)
			if r.TryDecodeAsNil() {
				yyv4748[yyj4748] = AttachedVolume{}
			} else {
				yyv4749 := &yyv4748[yyj4748]
				yyv4749.CodecDecodeSelf(d)
			}

		}
		if yyrt4748 {
			for ; yyj4748 < yyl4748; yyj4748++ {
				yyv4748 = append(yyv4748, AttachedVolume{})
				yyh4748.ElemContainerState(yyj4748)
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = AttachedVolume{}
				} else {
					yyv4750 := &yyv4748[yyj4748]
					yyv4750.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4748 := 0
		for ; !r.CheckBreak(); yyj4748++ {

			if yyj4748 >= len(yyv4748) {
				yyv4748 = append(yyv4748, AttachedVolume{}) // var yyz4748 AttachedVolume
				yyc4748 = true
			}
			yyh4748.ElemContainerState(yyj4748)
			if yyj4748 < len(yyv4748) {
				if r.TryDecodeAsNil() {
					yyv4748[yyj4748] = AttachedVolume{}
				} else {
					yyv4751 := &yyv4748[yyj4748]
					yyv4751.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4748 < len(yyv4748) {
			yyv4748 = yyv4748[:yyj4748]
			yyc4748 = true
		} else if yyj4748 == 0 && yyv4748 == nil {
			yyv4748 = []AttachedVolume{}
			yyc4748 = true
		}
	}
	yyh4748.End()
	if yyc4748 {
		*v = yyv4748
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4752 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4753 := &yyv4752
		yy4753.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4754 := *v
	yyh4754, yyl4754 := z.DecSliceHelperStart()
	var yyc4754 bool
	if yyl4754 == 0 {
		if yyv4754 == nil {
			yyv4754 = []PreferAvoidPodsEntry{}
			yyc4754 = true
		} else if len(yyv4754) != 0 {
			yyv4754 = yyv4754[:0]
			yyc4754 = true
		}
	} else if yyl4754 > 0 {
		var yyrr4754, yyrl4754 int
		var yyrt4754 bool
		if yyl4754 > cap(yyv4754) {

			yyrg4754 := len(yyv4754) > 0
			yyv24754 := yyv4754
			yyrl4754, yyrt4754 = z.DecInferLen(yyl4754, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4754 {
				if yyrl4754 <= cap(yyv4754) {
					yyv4754 = yyv4754[:yyrl4754]
				} else {
					yyv4754 = make([]PreferAvoidPodsEntry, yyrl4754)
				}
			} else {
				yyv4754 = make([]PreferAvoidPodsEntry, yyrl4754)
			}
			yyc4754 = true
			yyrr4754 = len(yyv4754)
			if yyrg4754 {
				copy(yyv4754, yyv24754)
			}
		} else if yyl4754 != len(yyv4754) {
			yyv4754 = yyv4754[:yyl4754]
			yyc4754 = true
		}
		yyj4754 := 0
		for ; yyj4754 < yyrr4754; yyj4754++ {
			yyh4754.ElemContainerState(yyj4754)
			if r.TryDecodeAsNil() {
				yyv4754[yyj4754] = PreferAvoidPodsEntry{}
			} else {
				yyv4755 := &yyv4754[yyj4754]
				yyv4755.CodecDecodeSelf(d)
			}

		}
		if yyrt4754 {
			for ; yyj4754 < yyl4754; yyj4754++ {
				yyv4754 = append(yyv4754, PreferAvoidPodsEntry{})
				yyh4754.ElemContainerState(yyj4754)
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = PreferAvoidPodsEntry{}
				} else {
					yyv4756 := &yyv4754[yyj4754]
					yyv4756.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4754 := 0
		for ; !r.CheckBreak(); yyj4754++ {

			if yyj4754 >= len(yyv4754) {
				yyv4754 = append(yyv4754, PreferAvoidPodsEntry{}) // var yyz4754 PreferAvoidPodsEntry
				yyc4754 = true
			}
			yyh4754.ElemContainerState(yyj4754)
			if yyj4754 < len(yyv4754) {
				if r.TryDecodeAsNil() {
					yyv4754[yyj4754] = PreferAvoidPodsEntry{}
				} else {
					yyv4757 := &yyv4754[yyj4754]
					yyv4757.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4754 < len(yyv4754) {
			yyv4754 = yyv4754[:yyj4754]
			yyc4754 = true
		} else if yyj4754 == 0 && yyv4754 == nil {
			yyv4754 = []PreferAvoidPodsEntry{}
			yyc4754 = true
		}
	}
	yyh4754.End()
	if yyc4754 {
		*v = yyv4754
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4758, yyv4758 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4758.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4759 := &yyv4758
		yym4760 := z.EncBinary()
		_ = yym4760
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4759) {
		} else if !yym4760 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4759)
		} else {
			z.EncFallback(yy4759)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4761 := *v
	yyl4761 := r.ReadMapStart()
	yybh4761 := z.DecBasicHandle()
	if yyv4761 == nil {
		yyrl4761, _ := z.DecInferLen(yyl4761, yybh4761.MaxInitLen, 72)
		yyv4761 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4761)
		*v = yyv4761
	}
	var yymk4761 ResourceName
	var yymv4761 pkg3_resource.Quantity
	var yymg4761 bool
	if yybh4761.MapValueReset {
		yymg4761 = true
	}
	if yyl4761 > 0 {
		for yyj4761 := 0; yyj4761 < yyl4761; yyj4761++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4761 = ""
			} else {
				yymk4761 = ResourceName(r.DecodeString())
			}

			if yymg4761 {
				yymv4761 = yyv4761[yymk4761]
			} else {
				yymv4761 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4761 = pkg3_resource.Quantity{}
			} else {
				yyv4763 := &yymv4761
				yym4764 := z.DecBinary()
				_ = yym4764
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4763) {
				} else if !yym4764 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4763)
				} else {
					z.DecFallback(yyv4763, false)
				}
			}

			if yyv4761 != nil {
				yyv4761[yymk4761] = yymv4761
			}
		}
	} else if yyl4761 < 0 {
		for yyj4761 := 0; !r.CheckBreak(); yyj4761++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4761 = ""
			} else {
				yymk4761 = ResourceName(r.DecodeString())
			}

			if yymg4761 {
				yymv4761 = yyv4761[yymk4761]
			} else {
				yymv4761 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4761 = pkg3_resource.Quantity{}
			} else {
				yyv4766 := &yymv4761
				yym4767 := z.DecBinary()
				_ = yym4767
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4766) {
				} else if !yym4767 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4766)
				} else {
					z.DecFallback(yyv4766, false)
				}
			}

			if yyv4761 != nil {
				yyv4761[yymk4761] = yymv4761
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4769 := &yyv4768
		yy4769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4770 := *v
	yyh4770, yyl4770 := z.DecSliceHelperStart()
	var yyc4770 bool
	if yyl4770 == 0 {
		if yyv4770 == nil {
			yyv4770 = []Node{}
			yyc4770 = true
		} else if len(yyv4770) != 0 {
			yyv4770 = yyv4770[:0]
			yyc4770 = true
		}
	} else if yyl4770 > 0 {
		var yyrr4770, yyrl4770 int
		var yyrt4770 bool
		if yyl4770 > cap(yyv4770) {

			yyrg4770 := len(yyv4770) > 0
			yyv24770 := yyv4770
			yyrl4770, yyrt4770 = z.DecInferLen(yyl4770, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4770 {
				if yyrl4770 <= cap(yyv4770) {
					yyv4770 = yyv4770[:yyrl4770]
				} else {
					yyv4770 = make([]Node, yyrl4770)
				}
			} else {
				yyv4770 = make([]Node, yyrl4770)
			}
			yyc4770 = true
			yyrr4770 = len(yyv4770)
			if yyrg4770 {
				copy(yyv4770, yyv24770)
			}
		} else if yyl4770 != len(yyv4770) {
			yyv4770 = yyv4770[:yyl4770]
			yyc4770 = true
		}
		yyj4770 := 0
		for ; yyj4770 < yyrr4770; yyj4770++ {
			yyh4770.ElemContainerState(yyj4770)
			if r.TryDecodeAsNil() {
				yyv4770[yyj4770] = Node{}
			} else {
				yyv4771 := &yyv4770[yyj4770]
				yyv4771.CodecDecodeSelf(d)
			}

		}
		if yyrt4770 {
			for ; yyj4770 < yyl4770; yyj4770++ {
				yyv4770 = append(yyv4770, Node{})
				yyh4770.ElemContainerState(yyj4770)
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = Node{}
				} else {
					yyv4772 := &yyv4770[yyj4770]
					yyv4772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4770 := 0
		for ; !r.CheckBreak(); yyj4770++ {

			if yyj4770 >= len(yyv4770) {
				yyv4770 = append(yyv4770, Node{}) // var yyz4770 Node
				yyc4770 = true
			}
			yyh4770.ElemContainerState(yyj4770)
			if yyj4770 < len(yyv4770) {
				if r.TryDecodeAsNil() {
					yyv4770[yyj4770] = Node{}
				} else {
					yyv4773 := &yyv4770[yyj4770]
					yyv4773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4770 < len(yyv4770) {
			yyv4770 = yyv4770[:yyj4770]
			yyc4770 = true
		} else if yyj4770 == 0 && yyv4770 == nil {
			yyv4770 = []Node{}
			yyc4770 = true
		}
	}
	yyh4770.End()
	if yyc4770 {
		*v = yyv4770
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4774.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4775 := *v
	yyh4775, yyl4775 := z.DecSliceHelperStart()
	var yyc4775 bool
	if yyl4775 == 0 {
		if yyv4775 == nil {
			yyv4775 = []FinalizerName{}
			yyc4775 = true
		} else if len(yyv4775) != 0 {
			yyv4775 = yyv4775[:0]
			yyc4775 = true
		}
	} else if yyl4775 > 0 {
		var yyrr4775, yyrl4775 int
		var yyrt4775 bool
		if yyl4775 > cap(yyv4775) {

			yyrl4775, yyrt4775 = z.DecInferLen(yyl4775, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4775 {
				if yyrl4775 <= cap(yyv4775) {
					yyv4775 = yyv4775[:yyrl4775]
				} else {
					yyv4775 = make([]FinalizerName, yyrl4775)
				}
			} else {
				yyv4775 = make([]FinalizerName, yyrl4775)
			}
			yyc4775 = true
			yyrr4775 = len(yyv4775)
		} else if yyl4775 != len(yyv4775) {
			yyv4775 = yyv4775[:yyl4775]
			yyc4775 = true
		}
		yyj4775 := 0
		for ; yyj4775 < yyrr4775; yyj4775++ {
			yyh4775.ElemContainerState(yyj4775)
			if r.TryDecodeAsNil() {
				yyv4775[yyj4775] = ""
			} else {
				yyv4775[yyj4775] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4775 {
			for ; yyj4775 < yyl4775; yyj4775++ {
				yyv4775 = append(yyv4775, "")
				yyh4775.ElemContainerState(yyj4775)
				if r.TryDecodeAsNil() {
					yyv4775[yyj4775] = ""
				} else {
					yyv4775[yyj4775] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4775 := 0
		for ; !r.CheckBreak(); yyj4775++ {

			if yyj4775 >= len(yyv4775) {
				yyv4775 = append(yyv4775, "") // var yyz4775 FinalizerName
				yyc4775 = true
			}
			yyh4775.ElemContainerState(yyj4775)
			if yyj4775 < len(yyv4775) {
				if r.TryDecodeAsNil() {
					yyv4775[yyj4775] = ""
				} else {
					yyv4775[yyj4775] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4775 < len(yyv4775) {
			yyv4775 = yyv4775[:yyj4775]
			yyc4775 = true
		} else if yyj4775 == 0 && yyv4775 == nil {
			yyv4775 = []FinalizerName{}
			yyc4775 = true
		}
	}
	yyh4775.End()
	if yyc4775 {
		*v = yyv4775
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4779 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4780 := &yyv4779
		yy4780.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4781 := *v
	yyh4781, yyl4781 := z.DecSliceHelperStart()
	var yyc4781 bool
	if yyl4781 == 0 {
		if yyv4781 == nil {
			yyv4781 = []Namespace{}
			yyc4781 = true
		} else if len(yyv4781) != 0 {
			yyv4781 = yyv4781[:0]
			yyc4781 = true
		}
	} else if yyl4781 > 0 {
		var yyrr4781, yyrl4781 int
		var yyrt4781 bool
		if yyl4781 > cap(yyv4781) {

			yyrg4781 := len(yyv4781) > 0
			yyv24781 := yyv4781
			yyrl4781, yyrt4781 = z.DecInferLen(yyl4781, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4781 {
				if yyrl4781 <= cap(yyv4781) {
					yyv4781 = yyv4781[:yyrl4781]
				} else {
					yyv4781 = make([]Namespace, yyrl4781)
				}
			} else {
				yyv4781 = make([]Namespace, yyrl4781)
			}
			yyc4781 = true
			yyrr4781 = len(yyv4781)
			if yyrg4781 {
				copy(yyv4781, yyv24781)
			}
		} else if yyl4781 != len(yyv4781) {
			yyv4781 = yyv4781[:yyl4781]
			yyc4781 = true
		}
		yyj4781 := 0
		for ; yyj4781 < yyrr4781; yyj4781++ {
			yyh4781.ElemContainerState(yyj4781)
			if r.TryDecodeAsNil() {
				yyv4781[yyj4781] = Namespace{}
			} else {
				yyv4782 := &yyv4781[yyj4781]
				yyv4782.CodecDecodeSelf(d)
			}

		}
		if yyrt4781 {
			for ; yyj4781 < yyl4781; yyj4781++ {
				yyv4781 = append(yyv4781, Namespace{})
				yyh4781.ElemContainerState(yyj4781)
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = Namespace{}
				} else {
					yyv4783 := &yyv4781[yyj4781]
					yyv4783.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4781 := 0
		for ; !r.CheckBreak(); yyj4781++ {

			if yyj4781 >= len(yyv4781) {
				yyv4781 = append(yyv4781, Namespace{}) // var yyz4781 Namespace
				yyc4781 = true
			}
			yyh4781.ElemContainerState(yyj4781)
			if yyj4781 < len(yyv4781) {
				if r.TryDecodeAsNil() {
					yyv4781[yyj4781] = Namespace{}
				} else {
					yyv4784 := &yyv4781[yyj4781]
					yyv4784.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4781 < len(yyv4781) {
			yyv4781 = yyv4781[:yyj4781]
			yyc4781 = true
		} else if yyj4781 == 0 && yyv4781 == nil {
			yyv4781 = []Namespace{}
			yyc4781 = true
		}
	}
	yyh4781.End()
	if yyc4781 {
		*v = yyv4781
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4785 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4786 := &yyv4785
		yy4786.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4787 := *v
	yyh4787, yyl4787 := z.DecSliceHelperStart()
	var yyc4787 bool
	if yyl4787 == 0 {
		if yyv4787 == nil {
			yyv4787 = []Event{}
			yyc4787 = true
		} else if len(yyv4787) != 0 {
			yyv4787 = yyv4787[:0]
			yyc4787 = true
		}
	} else if yyl4787 > 0 {
		var yyrr4787, yyrl4787 int
		var yyrt4787 bool
		if yyl4787 > cap(yyv4787) {

			yyrg4787 := len(yyv4787) > 0
			yyv24787 := yyv4787
			yyrl4787, yyrt4787 = z.DecInferLen(yyl4787, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4787 {
				if yyrl4787 <= cap(yyv4787) {
					yyv4787 = yyv4787[:yyrl4787]
				} else {
					yyv4787 = make([]Event, yyrl4787)
				}
			} else {
				yyv4787 = make([]Event, yyrl4787)
			}
			yyc4787 = true
			yyrr4787 = len(yyv4787)
			if yyrg4787 {
				copy(yyv4787, yyv24787)
			}
		} else if yyl4787 != len(yyv4787) {
			yyv4787 = yyv4787[:yyl4787]
			yyc4787 = true
		}
		yyj4787 := 0
		for ; yyj4787 < yyrr4787; yyj4787++ {
			yyh4787.ElemContainerState(yyj4787)
			if r.TryDecodeAsNil() {
				yyv4787[yyj4787] = Event{}
			} else {
				yyv4788 := &yyv4787[yyj4787]
				yyv4788.CodecDecodeSelf(d)
			}

		}
		if yyrt4787 {
			for ; yyj4787 < yyl4787; yyj4787++ {
				yyv4787 = append(yyv4787, Event{})
				yyh4787.ElemContainerState(yyj4787)
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = Event{}
				} else {
					yyv4789 := &yyv4787[yyj4787]
					yyv4789.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4787 := 0
		for ; !r.CheckBreak(); yyj4787++ {

			if yyj4787 >= len(yyv4787) {
				yyv4787 = append(yyv4787, Event{}) // var yyz4787 Event
				yyc4787 = true
			}
			yyh4787.ElemContainerState(yyj4787)
			if yyj4787 < len(yyv4787) {
				if r.TryDecodeAsNil() {
					yyv4787[yyj4787] = Event{}
				} else {
					yyv4790 := &yyv4787[yyj4787]
					yyv4790.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4787 < len(yyv4787) {
			yyv4787 = yyv4787[:yyj4787]
			yyc4787 = true
		} else if yyj4787 == 0 && yyv4787 == nil {
			yyv4787 = []Event{}
			yyc4787 = true
		}
	}
	yyh4787.End()
	if yyc4787 {
		*v = yyv4787
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4791 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4792 := &yyv4791
		yym4793 := z.EncBinary()
		_ = yym4793
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4792) {
		} else if !yym4793 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4792)
		} else {
			z.EncFallback(yy4792)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4794 := *v
	yyh4794, yyl4794 := z.DecSliceHelperStart()
	var yyc4794 bool
	if yyl4794 == 0 {
		if yyv4794 == nil {
			yyv4794 = []pkg5_runtime.RawExtension{}
			yyc4794 = true
		} else if len(yyv4794) != 0 {
			yyv4794 = yyv4794[:0]
			yyc4794 = true
		}
	} else if yyl4794 > 0 {
		var yyrr4794, yyrl4794 int
		var yyrt4794 bool
		if yyl4794 > cap(yyv4794) {

			yyrg4794 := len(yyv4794) > 0
			yyv24794 := yyv4794
			yyrl4794, yyrt4794 = z.DecInferLen(yyl4794, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4794 {
				if yyrl4794 <= cap(yyv4794) {
					yyv4794 = yyv4794[:yyrl4794]
				} else {
					yyv4794 = make([]pkg5_runtime.RawExtension, yyrl4794)
				}
			} else {
				yyv4794 = make([]pkg5_runtime.RawExtension, yyrl4794)
			}
			yyc4794 = true
			yyrr4794 = len(yyv4794)
			if yyrg4794 {
				copy(yyv4794, yyv24794)
			}
		} else if yyl4794 != len(yyv4794) {
			yyv4794 = yyv4794[:yyl4794]
			yyc4794 = true
		}
		yyj4794 := 0
		for ; yyj4794 < yyrr4794; yyj4794++ {
			yyh4794.ElemContainerState(yyj4794)
			if r.TryDecodeAsNil() {
				yyv4794[yyj4794] = pkg5_runtime.RawExtension{}
			} else {
				yyv4795 := &yyv4794[yyj4794]
				yym4796 := z.DecBinary()
				_ = yym4796
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4795) {
				} else if !yym4796 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4795)
				} else {
					z.DecFallback(yyv4795, false)
				}
			}

		}
		if yyrt4794 {
			for ; yyj4794 < yyl4794; yyj4794++ {
				yyv4794 = append(yyv4794, pkg5_runtime.RawExtension{})
				yyh4794.ElemContainerState(yyj4794)
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = pkg5_runtime.RawExtension{}
				} else {
					yyv4797 := &yyv4794[yyj4794]
					yym4798 := z.DecBinary()
					_ = yym4798
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4797) {
					} else if !yym4798 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4797)
					} else {
						z.DecFallback(yyv4797, false)
					}
				}

			}
		}

	} else {
		yyj4794 := 0
		for ; !r.CheckBreak(); yyj4794++ {

			if yyj4794 >= len(yyv4794) {
				yyv4794 = append(yyv4794, pkg5_runtime.RawExtension{}) // var yyz4794 pkg5_runtime.RawExtension
				yyc4794 = true
			}
			yyh4794.ElemContainerState(yyj4794)
			if yyj4794 < len(yyv4794) {
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = pkg5_runtime.RawExtension{}
				} else {
					yyv4799 := &yyv4794[yyj4794]
					yym4800 := z.DecBinary()
					_ = yym4800
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4799) {
					} else if !yym4800 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4799)
					} else {
						z.DecFallback(yyv4799, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4794 < len(yyv4794) {
			yyv4794 = yyv4794[:yyj4794]
			yyc4794 = true
		} else if yyj4794 == 0 && yyv4794 == nil {
			yyv4794 = []pkg5_runtime.RawExtension{}
			yyc4794 = true
		}
	}
	yyh4794.End()
	if yyc4794 {
		*v = yyv4794
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4801 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4802 := &yyv4801
		yy4802.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []LimitRangeItem{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrg4803 := len(yyv4803) > 0
			yyv24803 := yyv4803
			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]LimitRangeItem, yyrl4803)
				}
			} else {
				yyv4803 = make([]LimitRangeItem, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
			if yyrg4803 {
				copy(yyv4803, yyv24803)
			}
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = LimitRangeItem{}
			} else {
				yyv4804 := &yyv4803[yyj4803]
				yyv4804.CodecDecodeSelf(d)
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, LimitRangeItem{})
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = LimitRangeItem{}
				} else {
					yyv4805 := &yyv4803[yyj4803]
					yyv4805.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, LimitRangeItem{}) // var yyz4803 LimitRangeItem
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = LimitRangeItem{}
				} else {
					yyv4806 := &yyv4803[yyj4803]
					yyv4806.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []LimitRangeItem{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4807 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4808 := &yyv4807
		yy4808.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4809 := *v
	yyh4809, yyl4809 := z.DecSliceHelperStart()
	var yyc4809 bool
	if yyl4809 == 0 {
		if yyv4809 == nil {
			yyv4809 = []LimitRange{}
			yyc4809 = true
		} else if len(yyv4809) != 0 {
			yyv4809 = yyv4809[:0]
			yyc4809 = true
		}
	} else if yyl4809 > 0 {
		var yyrr4809, yyrl4809 int
		var yyrt4809 bool
		if yyl4809 > cap(yyv4809) {

			yyrg4809 := len(yyv4809) > 0
			yyv24809 := yyv4809
			yyrl4809, yyrt4809 = z.DecInferLen(yyl4809, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4809 {
				if yyrl4809 <= cap(yyv4809) {
					yyv4809 = yyv4809[:yyrl4809]
				} else {
					yyv4809 = make([]LimitRange, yyrl4809)
				}
			} else {
				yyv4809 = make([]LimitRange, yyrl4809)
			}
			yyc4809 = true
			yyrr4809 = len(yyv4809)
			if yyrg4809 {
				copy(yyv4809, yyv24809)
			}
		} else if yyl4809 != len(yyv4809) {
			yyv4809 = yyv4809[:yyl4809]
			yyc4809 = true
		}
		yyj4809 := 0
		for ; yyj4809 < yyrr4809; yyj4809++ {
			yyh4809.ElemContainerState(yyj4809)
			if r.TryDecodeAsNil() {
				yyv4809[yyj4809] = LimitRange{}
			} else {
				yyv4810 := &yyv4809[yyj4809]
				yyv4810.CodecDecodeSelf(d)
			}

		}
		if yyrt4809 {
			for ; yyj4809 < yyl4809; yyj4809++ {
				yyv4809 = append(yyv4809, LimitRange{})
				yyh4809.ElemContainerState(yyj4809)
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = LimitRange{}
				} else {
					yyv4811 := &yyv4809[yyj4809]
					yyv4811.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4809 := 0
		for ; !r.CheckBreak(); yyj4809++ {

			if yyj4809 >= len(yyv4809) {
				yyv4809 = append(yyv4809, LimitRange{}) // var yyz4809 LimitRange
				yyc4809 = true
			}
			yyh4809.ElemContainerState(yyj4809)
			if yyj4809 < len(yyv4809) {
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = LimitRange{}
				} else {
					yyv4812 := &yyv4809[yyj4809]
					yyv4812.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4809 < len(yyv4809) {
			yyv4809 = yyv4809[:yyj4809]
			yyc4809 = true
		} else if yyj4809 == 0 && yyv4809 == nil {
			yyv4809 = []LimitRange{}
			yyc4809 = true
		}
	}
	yyh4809.End()
	if yyc4809 {
		*v = yyv4809
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4813 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4813.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4814 := *v
	yyh4814, yyl4814 := z.DecSliceHelperStart()
	var yyc4814 bool
	if yyl4814 == 0 {
		if yyv4814 == nil {
			yyv4814 = []ResourceQuotaScope{}
			yyc4814 = true
		} else if len(yyv4814) != 0 {
			yyv4814 = yyv4814[:0]
			yyc4814 = true
		}
	} else if yyl4814 > 0 {
		var yyrr4814, yyrl4814 int
		var yyrt4814 bool
		if yyl4814 > cap(yyv4814) {

			yyrl4814, yyrt4814 = z.DecInferLen(yyl4814, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4814 {
				if yyrl4814 <= cap(yyv4814) {
					yyv4814 = yyv4814[:yyrl4814]
				} else {
					yyv4814 = make([]ResourceQuotaScope, yyrl4814)
				}
			} else {
				yyv4814 = make([]ResourceQuotaScope, yyrl4814)
			}
			yyc4814 = true
			yyrr4814 = len(yyv4814)
		} else if yyl4814 != len(yyv4814) {
			yyv4814 = yyv4814[:yyl4814]
			yyc4814 = true
		}
		yyj4814 := 0
		for ; yyj4814 < yyrr4814; yyj4814++ {
			yyh4814.ElemContainerState(yyj4814)
			if r.TryDecodeAsNil() {
				yyv4814[yyj4814] = ""
			} else {
				yyv4814[yyj4814] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4814 {
			for ; yyj4814 < yyl4814; yyj4814++ {
				yyv4814 = append(yyv4814, "")
				yyh4814.ElemContainerState(yyj4814)
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = ""
				} else {
					yyv4814[yyj4814] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4814 := 0
		for ; !r.CheckBreak(); yyj4814++ {

			if yyj4814 >= len(yyv4814) {
				yyv4814 = append(yyv4814, "") // var yyz4814 ResourceQuotaScope
				yyc4814 = true
			}
			yyh4814.ElemContainerState(yyj4814)
			if yyj4814 < len(yyv4814) {
				if r.TryDecodeAsNil() {
					yyv4814[yyj4814] = ""
				} else {
					yyv4814[yyj4814] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4814 < len(yyv4814) {
			yyv4814 = yyv4814[:yyj4814]
			yyc4814 = true
		} else if yyj4814 == 0 && yyv4814 == nil {
			yyv4814 = []ResourceQuotaScope{}
			yyc4814 = true
		}
	}
	yyh4814.End()
	if yyc4814 {
		*v = yyv4814
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4818 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4819 := &yyv4818
		yy4819.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4820 := *v
	yyh4820, yyl4820 := z.DecSliceHelperStart()
	var yyc4820 bool
	if yyl4820 == 0 {
		if yyv4820 == nil {
			yyv4820 = []ResourceQuota{}
			yyc4820 = true
		} else if len(yyv4820) != 0 {
			yyv4820 = yyv4820[:0]
			yyc4820 = true
		}
	} else if yyl4820 > 0 {
		var yyrr4820, yyrl4820 int
		var yyrt4820 bool
		if yyl4820 > cap(yyv4820) {

			yyrg4820 := len(yyv4820) > 0
			yyv24820 := yyv4820
			yyrl4820, yyrt4820 = z.DecInferLen(yyl4820, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4820 {
				if yyrl4820 <= cap(yyv4820) {
					yyv4820 = yyv4820[:yyrl4820]
				} else {
					yyv4820 = make([]ResourceQuota, yyrl4820)
				}
			} else {
				yyv4820 = make([]ResourceQuota, yyrl4820)
			}
			yyc4820 = true
			yyrr4820 = len(yyv4820)
			if yyrg4820 {
				copy(yyv4820, yyv24820)
			}
		} else if yyl4820 != len(yyv4820) {
			yyv4820 = yyv4820[:yyl4820]
			yyc4820 = true
		}
		yyj4820 := 0
		for ; yyj4820 < yyrr4820; yyj4820++ {
			yyh4820.ElemContainerState(yyj4820)
			if r.TryDecodeAsNil() {
				yyv4820[yyj4820] = ResourceQuota{}
			} else {
				yyv4821 := &yyv4820[yyj4820]
				yyv4821.CodecDecodeSelf(d)
			}

		}
		if yyrt4820 {
			for ; yyj4820 < yyl4820; yyj4820++ {
				yyv4820 = append(yyv4820, ResourceQuota{})
				yyh4820.ElemContainerState(yyj4820)
				if r.TryDecodeAsNil() {
					yyv4820[yyj4820] = ResourceQuota{}
				} else {
					yyv4822 := &yyv4820[yyj4820]
					yyv4822.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4820 := 0
		for ; !r.CheckBreak(); yyj4820++ {

			if yyj4820 >= len(yyv4820) {
				yyv4820 = append(yyv4820, ResourceQuota{}) // var yyz4820 ResourceQuota
				yyc4820 = true
			}
			yyh4820.ElemContainerState(yyj4820)
			if yyj4820 < len(yyv4820) {
				if r.TryDecodeAsNil() {
					yyv4820[yyj4820] = ResourceQuota{}
				} else {
					yyv4823 := &yyv4820[yyj4820]
					yyv4823.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4820 < len(yyv4820) {
			yyv4820 = yyv4820[:yyj4820]
			yyc4820 = true
		} else if yyj4820 == 0 && yyv4820 == nil {
			yyv4820 = []ResourceQuota{}
			yyc4820 = true
		}
	}
	yyh4820.End()
	if yyc4820 {
		*v = yyv4820
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4824, yyv4824 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4825 := z.EncBinary()
		_ = yym4825
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4824))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4824 == nil {
			r.EncodeNil()
		} else {
			yym4826 := z.EncBinary()
			_ = yym4826
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4824))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4827 := *v
	yyl4827 := r.ReadMapStart()
	yybh4827 := z.DecBasicHandle()
	if yyv4827 == nil {
		yyrl4827, _ := z.DecInferLen(yyl4827, yybh4827.MaxInitLen, 40)
		yyv4827 = make(map[string][]uint8, yyrl4827)
		*v = yyv4827
	}
	var yymk4827 string
	var yymv4827 []uint8
	var yymg4827 bool
	if yybh4827.MapValueReset {
		yymg4827 = true
	}
	if yyl4827 > 0 {
		for yyj4827 := 0; yyj4827 < yyl4827; yyj4827++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4827 = ""
			} else {
				yymk4827 = string(r.DecodeString())
			}

			if yymg4827 {
				yymv4827 = yyv4827[yymk4827]
			} else {
				yymv4827 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4827 = nil
			} else {
				yyv4829 := &yymv4827
				yym4830 := z.DecBinary()
				_ = yym4830
				if false {
				} else {
					*yyv4829 = r.DecodeBytes(*(*[]byte)(yyv4829), false, false)
				}
			}

			if yyv4827 != nil {
				yyv4827[yymk4827] = yymv4827
			}
		}
	} else if yyl4827 < 0 {
		for yyj4827 := 0; !r.CheckBreak(); yyj4827++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4827 = ""
			} else {
				yymk4827 = string(r.DecodeString())
			}

			if yymg4827 {
				yymv4827 = yyv4827[yymk4827]
			} else {
				yymv4827 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4827 = nil
			} else {
				yyv4832 := &yymv4827
				yym4833 := z.DecBinary()
				_ = yym4833
				if false {
				} else {
					*yyv4832 = r.DecodeBytes(*(*[]byte)(yyv4832), false, false)
				}
			}

			if yyv4827 != nil {
				yyv4827[yymk4827] = yymv4827
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4834 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4835 := &yyv4834
		yy4835.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4836 := *v
	yyh4836, yyl4836 := z.DecSliceHelperStart()
	var yyc4836 bool
	if yyl4836 == 0 {
		if yyv4836 == nil {
			yyv4836 = []Secret{}
			yyc4836 = true
		} else if len(yyv4836) != 0 {
			yyv4836 = yyv4836[:0]
			yyc4836 = true
		}
	} else if yyl4836 > 0 {
		var yyrr4836, yyrl4836 int
		var yyrt4836 bool
		if yyl4836 > cap(yyv4836) {

			yyrg4836 := len(yyv4836) > 0
			yyv24836 := yyv4836
			yyrl4836, yyrt4836 = z.DecInferLen(yyl4836, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4836 {
				if yyrl4836 <= cap(yyv4836) {
					yyv4836 = yyv4836[:yyrl4836]
				} else {
					yyv4836 = make([]Secret, yyrl4836)
				}
			} else {
				yyv4836 = make([]Secret, yyrl4836)
			}
			yyc4836 = true
			yyrr4836 = len(yyv4836)
			if yyrg4836 {
				copy(yyv4836, yyv24836)
			}
		} else if yyl4836 != len(yyv4836) {
			yyv4836 = yyv4836[:yyl4836]
			yyc4836 = true
		}
		yyj4836 := 0
		for ; yyj4836 < yyrr4836; yyj4836++ {
			yyh4836.ElemContainerState(yyj4836)
			if r.TryDecodeAsNil() {
				yyv4836[yyj4836] = Secret{}
			} else {
				yyv4837 := &yyv4836[yyj4836]
				yyv4837.CodecDecodeSelf(d)
			}

		}
		if yyrt4836 {
			for ; yyj4836 < yyl4836; yyj4836++ {
				yyv4836 = append(yyv4836, Secret{})
				yyh4836.ElemContainerState(yyj4836)
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Secret{}
				} else {
					yyv4838 := &yyv4836[yyj4836]
					yyv4838.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4836 := 0
		for ; !r.CheckBreak(); yyj4836++ {

			if yyj4836 >= len(yyv4836) {
				yyv4836 = append(yyv4836, Secret{}) // var yyz4836 Secret
				yyc4836 = true
			}
			yyh4836.ElemContainerState(yyj4836)
			if yyj4836 < len(yyv4836) {
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Secret{}
				} else {
					yyv4839 := &yyv4836[yyj4836]
					yyv4839.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4836 < len(yyv4836) {
			yyv4836 = yyv4836[:yyj4836]
			yyc4836 = true
		} else if yyj4836 == 0 && yyv4836 == nil {
			yyv4836 = []Secret{}
			yyc4836 = true
		}
	}
	yyh4836.End()
	if yyc4836 {
		*v = yyv4836
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4840 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4841 := &yyv4840
		yy4841.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4842 := *v
	yyh4842, yyl4842 := z.DecSliceHelperStart()
	var yyc4842 bool
	if yyl4842 == 0 {
		if yyv4842 == nil {
			yyv4842 = []ConfigMap{}
			yyc4842 = true
		} else if len(yyv4842) != 0 {
			yyv4842 = yyv4842[:0]
			yyc4842 = true
		}
	} else if yyl4842 > 0 {
		var yyrr4842, yyrl4842 int
		var yyrt4842 bool
		if yyl4842 > cap(yyv4842) {

			yyrg4842 := len(yyv4842) > 0
			yyv24842 := yyv4842
			yyrl4842, yyrt4842 = z.DecInferLen(yyl4842, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4842 {
				if yyrl4842 <= cap(yyv4842) {
					yyv4842 = yyv4842[:yyrl4842]
				} else {
					yyv4842 = make([]ConfigMap, yyrl4842)
				}
			} else {
				yyv4842 = make([]ConfigMap, yyrl4842)
			}
			yyc4842 = true
			yyrr4842 = len(yyv4842)
			if yyrg4842 {
				copy(yyv4842, yyv24842)
			}
		} else if yyl4842 != len(yyv4842) {
			yyv4842 = yyv4842[:yyl4842]
			yyc4842 = true
		}
		yyj4842 := 0
		for ; yyj4842 < yyrr4842; yyj4842++ {
			yyh4842.ElemContainerState(yyj4842)
			if r.TryDecodeAsNil() {
				yyv4842[yyj4842] = ConfigMap{}
			} else {
				yyv4843 := &yyv4842[yyj4842]
				yyv4843.CodecDecodeSelf(d)
			}

		}
		if yyrt4842 {
			for ; yyj4842 < yyl4842; yyj4842++ {
				yyv4842 = append(yyv4842, ConfigMap{})
				yyh4842.ElemContainerState(yyj4842)
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = ConfigMap{}
				} else {
					yyv4844 := &yyv4842[yyj4842]
					yyv4844.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4842 := 0
		for ; !r.CheckBreak(); yyj4842++ {

			if yyj4842 >= len(yyv4842) {
				yyv4842 = append(yyv4842, ConfigMap{}) // var yyz4842 ConfigMap
				yyc4842 = true
			}
			yyh4842.ElemContainerState(yyj4842)
			if yyj4842 < len(yyv4842) {
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = ConfigMap{}
				} else {
					yyv4845 := &yyv4842[yyj4842]
					yyv4845.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4842 < len(yyv4842) {
			yyv4842 = yyv4842[:yyj4842]
			yyc4842 = true
		} else if yyj4842 == 0 && yyv4842 == nil {
			yyv4842 = []ConfigMap{}
			yyc4842 = true
		}
	}
	yyh4842.End()
	if yyc4842 {
		*v = yyv4842
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4846 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4847 := &yyv4846
		yy4847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4848 := *v
	yyh4848, yyl4848 := z.DecSliceHelperStart()
	var yyc4848 bool
	if yyl4848 == 0 {
		if yyv4848 == nil {
			yyv4848 = []ComponentCondition{}
			yyc4848 = true
		} else if len(yyv4848) != 0 {
			yyv4848 = yyv4848[:0]
			yyc4848 = true
		}
	} else if yyl4848 > 0 {
		var yyrr4848, yyrl4848 int
		var yyrt4848 bool
		if yyl4848 > cap(yyv4848) {

			yyrg4848 := len(yyv4848) > 0
			yyv24848 := yyv4848
			yyrl4848, yyrt4848 = z.DecInferLen(yyl4848, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4848 {
				if yyrl4848 <= cap(yyv4848) {
					yyv4848 = yyv4848[:yyrl4848]
				} else {
					yyv4848 = make([]ComponentCondition, yyrl4848)
				}
			} else {
				yyv4848 = make([]ComponentCondition, yyrl4848)
			}
			yyc4848 = true
			yyrr4848 = len(yyv4848)
			if yyrg4848 {
				copy(yyv4848, yyv24848)
			}
		} else if yyl4848 != len(yyv4848) {
			yyv4848 = yyv4848[:yyl4848]
			yyc4848 = true
		}
		yyj4848 := 0
		for ; yyj4848 < yyrr4848; yyj4848++ {
			yyh4848.ElemContainerState(yyj4848)
			if r.TryDecodeAsNil() {
				yyv4848[yyj4848] = ComponentCondition{}
			} else {
				yyv4849 := &yyv4848[yyj4848]
				yyv4849.CodecDecodeSelf(d)
			}

		}
		if yyrt4848 {
			for ; yyj4848 < yyl4848; yyj4848++ {
				yyv4848 = append(yyv4848, ComponentCondition{})
				yyh4848.ElemContainerState(yyj4848)
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = ComponentCondition{}
				} else {
					yyv4850 := &yyv4848[yyj4848]
					yyv4850.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4848 := 0
		for ; !r.CheckBreak(); yyj4848++ {

			if yyj4848 >= len(yyv4848) {
				yyv4848 = append(yyv4848, ComponentCondition{}) // var yyz4848 ComponentCondition
				yyc4848 = true
			}
			yyh4848.ElemContainerState(yyj4848)
			if yyj4848 < len(yyv4848) {
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = ComponentCondition{}
				} else {
					yyv4851 := &yyv4848[yyj4848]
					yyv4851.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4848 < len(yyv4848) {
			yyv4848 = yyv4848[:yyj4848]
			yyc4848 = true
		} else if yyj4848 == 0 && yyv4848 == nil {
			yyv4848 = []ComponentCondition{}
			yyc4848 = true
		}
	}
	yyh4848.End()
	if yyc4848 {
		*v = yyv4848
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4853 := &yyv4852
		yy4853.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4854 := *v
	yyh4854, yyl4854 := z.DecSliceHelperStart()
	var yyc4854 bool
	if yyl4854 == 0 {
		if yyv4854 == nil {
			yyv4854 = []ComponentStatus{}
			yyc4854 = true
		} else if len(yyv4854) != 0 {
			yyv4854 = yyv4854[:0]
			yyc4854 = true
		}
	} else if yyl4854 > 0 {
		var yyrr4854, yyrl4854 int
		var yyrt4854 bool
		if yyl4854 > cap(yyv4854) {

			yyrg4854 := len(yyv4854) > 0
			yyv24854 := yyv4854
			yyrl4854, yyrt4854 = z.DecInferLen(yyl4854, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4854 {
				if yyrl4854 <= cap(yyv4854) {
					yyv4854 = yyv4854[:yyrl4854]
				} else {
					yyv4854 = make([]ComponentStatus, yyrl4854)
				}
			} else {
				yyv4854 = make([]ComponentStatus, yyrl4854)
			}
			yyc4854 = true
			yyrr4854 = len(yyv4854)
			if yyrg4854 {
				copy(yyv4854, yyv24854)
			}
		} else if yyl4854 != len(yyv4854) {
			yyv4854 = yyv4854[:yyl4854]
			yyc4854 = true
		}
		yyj4854 := 0
		for ; yyj4854 < yyrr4854; yyj4854++ {
			yyh4854.ElemContainerState(yyj4854)
			if r.TryDecodeAsNil() {
				yyv4854[yyj4854] = ComponentStatus{}
			} else {
				yyv4855 := &yyv4854[yyj4854]
				yyv4855.CodecDecodeSelf(d)
			}

		}
		if yyrt4854 {
			for ; yyj4854 < yyl4854; yyj4854++ {
				yyv4854 = append(yyv4854, ComponentStatus{})
				yyh4854.ElemContainerState(yyj4854)
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = ComponentStatus{}
				} else {
					yyv4856 := &yyv4854[yyj4854]
					yyv4856.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4854 := 0
		for ; !r.CheckBreak(); yyj4854++ {

			if yyj4854 >= len(yyv4854) {
				yyv4854 = append(yyv4854, ComponentStatus{}) // var yyz4854 ComponentStatus
				yyc4854 = true
			}
			yyh4854.ElemContainerState(yyj4854)
			if yyj4854 < len(yyv4854) {
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = ComponentStatus{}
				} else {
					yyv4857 := &yyv4854[yyj4854]
					yyv4857.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4854 < len(yyv4854) {
			yyv4854 = yyv4854[:yyj4854]
			yyc4854 = true
		} else if yyj4854 == 0 && yyv4854 == nil {
			yyv4854 = []ComponentStatus{}
			yyc4854 = true
		}
	}
	yyh4854.End()
	if yyc4854 {
		*v = yyv4854
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4858 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4859 := &yyv4858
		yy4859.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4860 := *v
	yyh4860, yyl4860 := z.DecSliceHelperStart()
	var yyc4860 bool
	if yyl4860 == 0 {
		if yyv4860 == nil {
			yyv4860 = []DownwardAPIVolumeFile{}
			yyc4860 = true
		} else if len(yyv4860) != 0 {
			yyv4860 = yyv4860[:0]
			yyc4860 = true
		}
	} else if yyl4860 > 0 {
		var yyrr4860, yyrl4860 int
		var yyrt4860 bool
		if yyl4860 > cap(yyv4860) {

			yyrg4860 := len(yyv4860) > 0
			yyv24860 := yyv4860
			yyrl4860, yyrt4860 = z.DecInferLen(yyl4860, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4860 {
				if yyrl4860 <= cap(yyv4860) {
					yyv4860 = yyv4860[:yyrl4860]
				} else {
					yyv4860 = make([]DownwardAPIVolumeFile, yyrl4860)
				}
			} else {
				yyv4860 = make([]DownwardAPIVolumeFile, yyrl4860)
			}
			yyc4860 = true
			yyrr4860 = len(yyv4860)
			if yyrg4860 {
				copy(yyv4860, yyv24860)
			}
		} else if yyl4860 != len(yyv4860) {
			yyv4860 = yyv4860[:yyl4860]
			yyc4860 = true
		}
		yyj4860 := 0
		for ; yyj4860 < yyrr4860; yyj4860++ {
			yyh4860.ElemContainerState(yyj4860)
			if r.TryDecodeAsNil() {
				yyv4860[yyj4860] = DownwardAPIVolumeFile{}
			} else {
				yyv4861 := &yyv4860[yyj4860]
				yyv4861.CodecDecodeSelf(d)
			}

		}
		if yyrt4860 {
			for ; yyj4860 < yyl4860; yyj4860++ {
				yyv4860 = append(yyv4860, DownwardAPIVolumeFile{})
				yyh4860.ElemContainerState(yyj4860)
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = DownwardAPIVolumeFile{}
				} else {
					yyv4862 := &yyv4860[yyj4860]
					yyv4862.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4860 := 0
		for ; !r.CheckBreak(); yyj4860++ {

			if yyj4860 >= len(yyv4860) {
				yyv4860 = append(yyv4860, DownwardAPIVolumeFile{}) // var yyz4860 DownwardAPIVolumeFile
				yyc4860 = true
			}
			yyh4860.ElemContainerState(yyj4860)
			if yyj4860 < len(yyv4860) {
				if r.TryDecodeAsNil() {
					yyv4860[yyj4860] = DownwardAPIVolumeFile{}
				} else {
					yyv4863 := &yyv4860[yyj4860]
					yyv4863.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4860 < len(yyv4860) {
			yyv4860 = yyv4860[:yyj4860]
			yyc4860 = true
		} else if yyj4860 == 0 && yyv4860 == nil {
			yyv4860 = []DownwardAPIVolumeFile{}
			yyc4860 = true
		}
	}
	yyh4860.End()
	if yyc4860 {
		*v = yyv4860
	}
}
