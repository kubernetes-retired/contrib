events {
    worker_connections 1024;
}

http {
    default_type 'text/plain';
    # maximum allowed size of the client request body. By default this is 1m.
    # Request with bigger bodies nginx will return error code 413.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    client_max_body_size 10m;

    server {
        # please check the benefits of reuseport https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1
        # basically instructs to create an individual listening socket for each worker process (using the SO_REUSEPORT
        # socket option), allowing a kernel to distribute incoming connections between worker processes.
        listen 8080 default_server reuseport;

        # Replace '_' with your hostname.
        server_name _;
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$host$request_uri;
        }        

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                -- replace HTML special characters to prevent XSS.
                function sanitize(s)
                    local s, _ = string.gsub(s or "", "[&<>]",
                        function(m) return string.format("&#x%x;", string.byte(m, 1)) end)
                    return s
                end

                ngx.say("CLIENT VALUES:")
                ngx.say("client_address=", ngx.var.remote_addr)
                ngx.say("command=", sanitize(ngx.req.get_method()))
                ngx.say("real path=", sanitize(ngx.var.request_uri))
                ngx.say("query=", sanitize(ngx.var.query_string))
                ngx.say("request_version=", sanitize(ngx.req.http_version()))

                ngx.say("request_uri=", sanitize( ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri))
                ngx.say("")

                ngx.say("SERVER VALUES:")
                ngx.say("server_version=", "nginx: "..ngx.var.nginx_version.." - lua: "..ngx.config.ngx_lua_version)
                ngx.say("")

                ngx.say("HEADERS RECEIVED:")
                local headers = ngx.req.get_headers()
                local keys = {}
                for key, val in pairs(headers) do
                    table.insert(keys, key)
                end

                table.sort(keys)
                for i, key in ipairs(keys) do
                    ngx.say(key, "=", sanitize(headers[key]))
                end

                ngx.say("BODY:")
                ngx.print(sanitize(ngx.var.request_body or "-no body in request-"))
            }
        }
    }
}
