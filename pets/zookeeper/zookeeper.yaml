# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  name: zk
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: peer
  - port: 3888
    name: leader-election
  # *.zk.default.svc.cluster.local
  clusterIP: None
  selector:
    app: zk
---
apiVersion: apps/v1alpha1
kind: PetSet
metadata:
  name: zoo
spec:
  serviceName: "zk"
  replicas: 3
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/initialized: "false"
      labels:
        app: zk
    spec:
      containers:
      - name: zk
        image: bprashanth/k8s-zookeeper:0.1
        imagePullPolicy: Always
        ports:
        - containerPort: 9367
          name: peer-finder
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        args:
        # Use on-change for older but stable zookeeper versions.
        # Use on-start for zookeeper versions > 3.5.0 that are
        # capable of dynamic reconfiguration.
        # If you're using the on-change and on-start scripts in
        # this example dir, you never need both.
        #- --on-change="/on-change.sh"
        - --on-start="/on-start.sh"
        - --service=zk
        volumeMounts:
        # These volume mounts are persistent. They're like inline claims,
        # but not exactly because the names need to match exactly one of
        # the pet volumes.
        - name: datadir
          mountPath: /data/www
        # This volume mount is destroyed with the pod
        - name: home
          mountPath: /home
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
      - name: home
        hostPath:
          path: /tmp/zk_home
  volumeClaimTemplates:
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  - metadata:
      name: datadir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
