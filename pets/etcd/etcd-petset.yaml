apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: etcd
  labels:
    app: etcd
spec:
  ports:
  - port: 2380
    name: peer
  - port: 2379
    name: client
  clusterIP: None
  selector:
    app: etcd
---
apiVersion: apps/v1alpha1
kind: PetSet
metadata:
  name: etcd
spec:
  serviceName: "etcd"
  replicas: 3
  template:
    metadata:
      labels:
        app: etcd
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      containers:
      - name: etcd
        image: gcr.io/google_containers/etcd-amd64:2.2.5
        ports:
        - containerPort: 2380
          name: peer
        - containerPort: 2379
          name: client
        env:
        - name: CLUSTER_SIZE
          value: "3"
        - name: PETSET_NAME
          value: "etcd"
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
        command:
          - "/bin/sh"
          - "-ec"
          - |
            for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${PETSET_NAME}-${i}.${PETSET_NAME} to come up"
                    ping -W 1 -c 1 ${PETSET_NAME}-${i}.${PETSET_NAME} > /dev/null && break
                    sleep 1s
                done
            done

            HOSTNAME=$(hostname)

            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd ]; then
                echo "Re-joining etcd member"
                member_id=$(cat /var/run/etcd/meta | cut -d':' -f1)

                EPS=""
                for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
                    EPS="${EPS}${EPS:+,}http://${PETSET_NAME}-${i}.${PETSET_NAME}:2379"
                done

                # re-join member
                ETCDCTL_ENDPOINT=${EPS} etcdctl member update ${member_id} http://${HOSTNAME}.${PETSET_NAME}:2380
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                    --listen-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379,http://127.0.0.1:2379 \
                    --advertise-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd
            fi

            PEERS=""
            for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${PETSET_NAME}-${i}=http://${PETSET_NAME}-${i}.${PETSET_NAME}:2380"
            done

            # store member id into PVC for later member replacement
            collect_member() {
                while ! etcdctl member list &>/dev/null; do sleep 1; done
                etcdctl member list | grep ${HOSTNAME}.etcd > /var/run/etcd/meta
            }

            collect_member &

            # join member
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                --listen-peer-urls http://${HOSTNAME}.${PETSET_NAME}:2380 \
                --listen-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379,http://127.0.0.1:2379 \
                --advertise-client-urls http://${HOSTNAME}.${PETSET_NAME}:2379 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: 1Gi

